"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/components/VimEditor.tsx":
/*!**************************************!*\
  !*** ./src/components/VimEditor.tsx ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var _chakra_ui_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @chakra-ui/react */ \"(app-pages-browser)/./node_modules/@chakra-ui/react/dist/esm/components/box/box.js\");\n/* harmony import */ var _chakra_ui_react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @chakra-ui/react */ \"(app-pages-browser)/./node_modules/@chakra-ui/react/dist/esm/components/flex/flex.js\");\n/* harmony import */ var _chakra_ui_react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @chakra-ui/react */ \"(app-pages-browser)/./node_modules/@chakra-ui/react/dist/esm/components/typography/text.js\");\n/* harmony import */ var _chakra_ui_react__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @chakra-ui/react */ \"(app-pages-browser)/./node_modules/@chakra-ui/react/dist/esm/components/stack/h-stack.js\");\n/* harmony import */ var _chakra_ui_react__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @chakra-ui/react */ \"(app-pages-browser)/./node_modules/@chakra-ui/react/dist/esm/components/icon/icon.js\");\n/* harmony import */ var _chakra_ui_react__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @chakra-ui/react */ \"(app-pages-browser)/./node_modules/@chakra-ui/react/dist/esm/components/button/button.js\");\n/* harmony import */ var _uiw_react_codemirror__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @uiw/react-codemirror */ \"(app-pages-browser)/./node_modules/@uiw/react-codemirror/esm/index.js\");\n/* harmony import */ var _codemirror_lang_html__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @codemirror/lang-html */ \"(app-pages-browser)/./node_modules/@codemirror/lang-html/dist/index.js\");\n/* harmony import */ var _codemirror_lang_css__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @codemirror/lang-css */ \"(app-pages-browser)/./node_modules/@codemirror/lang-css/dist/index.js\");\n/* harmony import */ var _codemirror_lang_javascript__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @codemirror/lang-javascript */ \"(app-pages-browser)/./node_modules/@codemirror/lang-javascript/dist/index.js\");\n/* harmony import */ var _codemirror_theme_one_dark__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @codemirror/theme-one-dark */ \"(app-pages-browser)/./node_modules/@codemirror/theme-one-dark/dist/index.js\");\n/* harmony import */ var _replit_codemirror_vim__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @replit/codemirror-vim */ \"(app-pages-browser)/./node_modules/@replit/codemirror-vim/dist/index.js\");\n/* harmony import */ var framer_motion__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! framer-motion */ \"(app-pages-browser)/./node_modules/framer-motion/dist/es/render/components/motion/proxy.mjs\");\n/* harmony import */ var framer_motion__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! framer-motion */ \"(app-pages-browser)/./node_modules/framer-motion/dist/es/components/AnimatePresence/index.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _barrel_optimize_names_FiCommand_FiEdit_FiRefreshCw_FiTerminal_react_icons_fi__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! __barrel_optimize__?names=FiCommand,FiEdit,FiRefreshCw,FiTerminal!=!react-icons/fi */ \"(app-pages-browser)/./node_modules/react-icons/fi/index.mjs\");\n// --- サンプルコード・VimTips定数 ---\n\nvar _s = $RefreshSig$();\nconst htmlSample = '<div class=\"container\">\\n  <h1>Hello Vim!</h1>\\n  <p>これはVim練習用のサンプルです。</p>\\n</div>\\n';\nconst cssSample = \".container {\\n  max-width: 600px;\\n  margin: 0 auto;\\n  padding: 2rem;\\n  background: #f5f5f5;\\n}\\n\";\nconst jsSample = \"document.querySelector('.container').addEventListener('click', function() {\\n  alert('Vimで編集してみよう！');\\n});\\n\";\nconst vimTips = \"// --- おまけ: よく使うVimコマンド ---\\n// h / j / k / l : 左右上下にカーソル移動\\n// w / b / e : 単語単位で移動\\n// 0 / $ / ^ : 行頭・行末・最初の非空白文字へ\\n// gg / G : ファイル先頭・末尾へ移動\\n// i / a / o / O : 挿入モード\\n// x : 文字削除\\n// dd : 行削除\\n// yy : 行コピー\\n// p / P : 貼り付け\\n// u / Ctrl+r : アンドゥ・リドゥ\\n// cw / cc / c$ : 単語・行・行末まで変更\\n// . : 直前の操作を繰り返し\\n// /pattern : 検索\\n// n / N : 次・前の検索結果へ\\n// :%s/old/new/g : 置換\\n// v / V : 選択開始\\n// y / d : コピー・削除\\n\";\n// --- Vimモード情報・型定義 ---\n\n\n\n\n\n\n\n\n\n\nconst MotionBox = (0,framer_motion__WEBPACK_IMPORTED_MODULE_3__.motion)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_4__.Box);\n_c = MotionBox;\nconst MotionFlex = (0,framer_motion__WEBPACK_IMPORTED_MODULE_3__.motion)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_5__.Flex);\n_c1 = MotionFlex;\nconst MotionText = (0,framer_motion__WEBPACK_IMPORTED_MODULE_3__.motion)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_6__.Text);\n_c2 = MotionText;\nconst modeInfo = {\n    normal: {\n        text: \"NORMAL\",\n        color: \"orange.400\",\n        icon: _barrel_optimize_names_FiCommand_FiEdit_FiRefreshCw_FiTerminal_react_icons_fi__WEBPACK_IMPORTED_MODULE_7__.FiCommand,\n        hint: \"Press i to enter insert mode\"\n    },\n    insert: {\n        text: \"INSERT\",\n        color: \"green.400\",\n        icon: _barrel_optimize_names_FiCommand_FiEdit_FiRefreshCw_FiTerminal_react_icons_fi__WEBPACK_IMPORTED_MODULE_7__.FiEdit,\n        hint: \"Press Esc to return to normal mode\"\n    },\n    visual: {\n        text: \"VISUAL\",\n        color: \"purple.400\",\n        icon: _barrel_optimize_names_FiCommand_FiEdit_FiRefreshCw_FiTerminal_react_icons_fi__WEBPACK_IMPORTED_MODULE_7__.FiCommand,\n        hint: \"Select text with h,j,k,l or use y to copy\"\n    }\n};\nfunction VimEditor() {\n    _s();\n    const [mode, setMode] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(\"html\");\n    const [vimMode, setVimMode] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(\"normal\");\n    // SSR/CSR差異によるeditor描画遅延対策: isMounted判定を廃止\n    // editorRef, viewRefは不要\n    // isMounted判定を廃止\n    // アニメーション用のvariants\n    const containerVariants = {\n        hidden: {\n            opacity: 0,\n            scale: 0.98\n        },\n        visible: {\n            opacity: 1,\n            scale: 1,\n            transition: {\n                duration: 0.4\n            }\n        }\n    };\n    const modeIndicatorVariants = {\n        hidden: {\n            opacity: 0,\n            x: -15,\n            scale: 0.9\n        },\n        visible: {\n            opacity: 1,\n            x: 0,\n            scale: 1,\n            transition: {\n                duration: 0.3\n            }\n        },\n        exit: {\n            opacity: 0,\n            x: 15,\n            scale: 0.9,\n            transition: {\n                duration: 0.2\n            }\n        }\n    };\n    // 言語拡張取得（@uiw/react-codemirror用）\n    function getExtensions() {\n        switch(mode){\n            case \"html\":\n                return [\n                    (0,_codemirror_lang_html__WEBPACK_IMPORTED_MODULE_8__.html)(),\n                    (0,_replit_codemirror_vim__WEBPACK_IMPORTED_MODULE_9__.vim)(),\n                    _codemirror_theme_one_dark__WEBPACK_IMPORTED_MODULE_10__.oneDark\n                ];\n            case \"css\":\n                return [\n                    (0,_codemirror_lang_css__WEBPACK_IMPORTED_MODULE_11__.css)(),\n                    (0,_replit_codemirror_vim__WEBPACK_IMPORTED_MODULE_9__.vim)(),\n                    _codemirror_theme_one_dark__WEBPACK_IMPORTED_MODULE_10__.oneDark\n                ];\n            case \"js\":\n                return [\n                    (0,_codemirror_lang_javascript__WEBPACK_IMPORTED_MODULE_12__.javascript)(),\n                    (0,_replit_codemirror_vim__WEBPACK_IMPORTED_MODULE_9__.vim)(),\n                    _codemirror_theme_one_dark__WEBPACK_IMPORTED_MODULE_10__.oneDark\n                ];\n            default:\n                return [\n                    (0,_replit_codemirror_vim__WEBPACK_IMPORTED_MODULE_9__.vim)(),\n                    _codemirror_theme_one_dark__WEBPACK_IMPORTED_MODULE_10__.oneDark\n                ];\n        }\n    }\n    const [html, setHtml] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(htmlSample);\n    const [css, setCss] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(cssSample);\n    const [js, setJs] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(jsSample);\n    const [code, setCode] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(htmlSample + vimTips);\n    // 初回レンダリング時に必ずhtmlSample+vimTipsで初期化\n    // editor初期化・Vimモード監視はonUpdate/onChangeで十分\n    // Vimモード監視（@uiw/react-codemirrorのonUpdateで判定）\n    // Vimモード判定はonChangeで常にnormalに戻す（insertはVim拡張で自動）\n    const onUpdate = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((_viewUpdate)=>{}, []);\n    const getSample = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(()=>{\n        if (mode === \"html\") return htmlSample + vimTips;\n        if (mode === \"css\") return cssSample + vimTips;\n        return jsSample + vimTips;\n    }, [\n        mode\n    ]);\n    // 上記で宣言済みなので重複削除\n    const [showPreview, setShowPreview] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(false);\n    const handleReset = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)(()=>{\n        setHtml(htmlSample);\n        setCss(cssSample);\n        setJs(jsSample);\n        setCode(mode === \"html\" ? htmlSample + vimTips : mode === \"css\" ? cssSample + vimTips : jsSample + vimTips);\n        setVimMode(\"normal\");\n        setShowPreview(false);\n    }, [\n        mode\n    ]);\n    const handleModeChange = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((m)=>{\n        // 現在の内容を保存\n        if (mode === \"html\") setHtml(code.replace(vimTips, \"\"));\n        if (mode === \"css\") setCss(code.replace(vimTips, \"\"));\n        if (mode === \"js\") setJs(code.replace(vimTips, \"\"));\n        // モード切り替え\n        setMode(m);\n        // 切り替え先の内容を表示\n        if (m === \"html\") setCode(html + vimTips);\n        else if (m === \"css\") setCode(css + vimTips);\n        else setCode(js + vimTips);\n        setShowPreview(false);\n    }, [\n        mode,\n        code,\n        html,\n        css,\n        js\n    ]);\n    // プレビュー用HTML生成（最新のhtml, css, js内容を合成）\n    const previewSrcDoc = '\\n    <!DOCTYPE html>\\n    <html lang=\"ja\">\\n    <head>\\n      <meta charset=\"UTF-8\" />\\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\\n      <title>Preview</title>\\n      <style>\\n      '.concat(css, \"\\n      </style>\\n    </head>\\n    <body>\\n      \").concat(html, \"\\n      <script>\\n      \").concat(js, \"\\n      </script>\\n    </body>\\n    </html>\\n  \");\n    const onChange = (0,react__WEBPACK_IMPORTED_MODULE_2__.useCallback)((value)=>{\n        setCode(value);\n        // 編集内容を保存\n        if (mode === \"html\") setHtml(value.replace(vimTips, \"\"));\n        if (mode === \"css\") setCss(value.replace(vimTips, \"\"));\n        if (mode === \"js\") setJs(value.replace(vimTips, \"\"));\n    }, [\n        mode\n    ]);\n    // SSR/CSR差異による高さ0問題を防ぐ\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(MotionBox, {\n        bgGradient: \"gradient.primary\",\n        color: \"text.primary\",\n        p: {\n            base: 2,\n            md: 4\n        },\n        borderRadius: \"2xl\",\n        boxShadow: \"glass\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        borderWidth: 1,\n        borderColor: \"border.primary\",\n        position: \"relative\",\n        overflow: \"hidden\",\n        flex: 1,\n        minH: {\n            base: \"400px\",\n            md: \"520px\",\n            lg: \"600px\"\n        },\n        maxH: {\n            base: \"520px\",\n            md: \"640px\",\n            lg: \"700px\"\n        },\n        h: {\n            base: \"440px\",\n            md: \"600px\",\n            lg: \"680px\"\n        },\n        initial: \"hidden\",\n        animate: \"visible\",\n        variants: containerVariants,\n        _before: {\n            content: '\"\"',\n            position: \"absolute\",\n            top: 0,\n            left: 0,\n            right: 0,\n            bottom: 0,\n            background: \"gradient.glass\",\n            borderRadius: \"inherit\",\n            pointerEvents: \"none\"\n        },\n        _hover: {\n            boxShadow: \"glass-hover\",\n            transform: \"translateY(-1px)\"\n        },\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(MotionFlex, {\n                alignItems: \"center\",\n                px: [\n                    2,\n                    4\n                ],\n                py: [\n                    2,\n                    3\n                ],\n                borderBottomWidth: 1,\n                borderColor: \"primary.700\",\n                bgGradient: \"linear(to-r, primary.900, primary.800)\",\n                justifyContent: \"space-between\",\n                position: \"relative\",\n                _before: {\n                    content: '\"\"',\n                    position: \"absolute\",\n                    top: 0,\n                    left: 0,\n                    right: 0,\n                    bottom: 0,\n                    background: \"linear-gradient(90deg, rgba(255,152,0,0.08) 0%, transparent 50%, rgba(255,152,0,0.03) 100%)\",\n                    pointerEvents: \"none\"\n                },\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_5__.Flex, {\n                        alignItems: \"center\",\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_13__.HStack, {\n                                gap: 2,\n                                marginRight: 5,\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_4__.Box, {\n                                        w: 3,\n                                        h: 3,\n                                        borderRadius: \"full\",\n                                        bg: \"red.400\"\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\hr-hm\\\\Desktop\\\\study\\\\vimapp\\\\src\\\\components\\\\VimEditor.tsx\",\n                                        lineNumber: 276,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_4__.Box, {\n                                        w: 3,\n                                        h: 3,\n                                        borderRadius: \"full\",\n                                        bg: \"yellow.400\"\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\hr-hm\\\\Desktop\\\\study\\\\vimapp\\\\src\\\\components\\\\VimEditor.tsx\",\n                                        lineNumber: 277,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_4__.Box, {\n                                        w: 3,\n                                        h: 3,\n                                        borderRadius: \"full\",\n                                        bg: \"green.400\"\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\hr-hm\\\\Desktop\\\\study\\\\vimapp\\\\src\\\\components\\\\VimEditor.tsx\",\n                                        lineNumber: 278,\n                                        columnNumber: 13\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\hr-hm\\\\Desktop\\\\study\\\\vimapp\\\\src\\\\components\\\\VimEditor.tsx\",\n                                lineNumber: 275,\n                                columnNumber: 11\n                            }, this),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_5__.Flex, {\n                                alignItems: \"center\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_14__.Icon, {\n                                        as: _barrel_optimize_names_FiCommand_FiEdit_FiRefreshCw_FiTerminal_react_icons_fi__WEBPACK_IMPORTED_MODULE_7__.FiTerminal,\n                                        color: \"secondary.400\",\n                                        mr: 2\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\hr-hm\\\\Desktop\\\\study\\\\vimapp\\\\src\\\\components\\\\VimEditor.tsx\",\n                                        lineNumber: 281,\n                                        columnNumber: 13\n                                    }, this),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(MotionText, {\n                                        fontFamily: \"mono\",\n                                        fontWeight: \"medium\",\n                                        letterSpacing: \"tight\",\n                                        color: \"white\",\n                                        initial: {\n                                            opacity: 0,\n                                            y: -10\n                                        },\n                                        animate: {\n                                            opacity: 1,\n                                            y: 0\n                                        },\n                                        transition: {\n                                            duration: 0.3\n                                        },\n                                        children: [\n                                            mode.toUpperCase(),\n                                            \" Editor\"\n                                        ]\n                                    }, mode, true, {\n                                        fileName: \"C:\\\\Users\\\\hr-hm\\\\Desktop\\\\study\\\\vimapp\\\\src\\\\components\\\\VimEditor.tsx\",\n                                        lineNumber: 282,\n                                        columnNumber: 13\n                                    }, this)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\hr-hm\\\\Desktop\\\\study\\\\vimapp\\\\src\\\\components\\\\VimEditor.tsx\",\n                                lineNumber: 280,\n                                columnNumber: 11\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\hr-hm\\\\Desktop\\\\study\\\\vimapp\\\\src\\\\components\\\\VimEditor.tsx\",\n                        lineNumber: 274,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_13__.HStack, {\n                        justifyContent: \"flex-end\",\n                        gap: 2,\n                        children: [\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_15__.Button, {\n                                onClick: ()=>setShowPreview((prev)=>!prev),\n                                colorScheme: showPreview ? \"purple\" : \"gray\",\n                                bg: showPreview ? \"linear-gradient(135deg, rgba(128,90,213,0.2), rgba(128,90,213,0.1))\" : \"transparent\",\n                                color: showPreview ? \"purple.400\" : \"gray.400\",\n                                borderRadius: \"md\",\n                                px: 3,\n                                py: 1.5,\n                                height: \"auto\",\n                                fontFamily: \"mono\",\n                                fontWeight: showPreview ? \"bold\" : \"medium\",\n                                letterSpacing: \"tight\",\n                                borderWidth: showPreview ? 1 : 0,\n                                borderColor: showPreview ? \"purple.800\" : \"transparent\",\n                                _hover: {\n                                    bg: \"linear-gradient(135deg, rgba(128,90,213,0.3), rgba(128,90,213,0.15))\",\n                                    color: \"purple.400\",\n                                    transform: \"translateY(-1px)\",\n                                    boxShadow: \"0 4px 8px rgba(0,0,0,0.3)\"\n                                },\n                                _active: {\n                                    bg: \"blackAlpha.500\",\n                                    transform: \"translateY(0)\"\n                                },\n                                _focus: {\n                                    outline: \"none\"\n                                },\n                                _focusVisible: {\n                                    outline: \"none\"\n                                },\n                                transition: \"all 0.2s cubic-bezier(0.4, 0, 0.2, 1)\",\n                                mr: 1,\n                                \"aria-label\": \"プレビュー表示切り替え\",\n                                \"aria-pressed\": showPreview,\n                                children: \"Preview\"\n                            }, void 0, false, {\n                                fileName: \"C:\\\\Users\\\\hr-hm\\\\Desktop\\\\study\\\\vimapp\\\\src\\\\components\\\\VimEditor.tsx\",\n                                lineNumber: 297,\n                                columnNumber: 11\n                            }, this),\n                            [\n                                \"html\",\n                                \"css\",\n                                \"js\"\n                            ].map((m)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_15__.Button, {\n                                    onClick: ()=>handleModeChange(m),\n                                    colorScheme: mode === m ? \"orange\" : \"gray\",\n                                    bg: mode === m ? \"linear-gradient(135deg, rgba(255,152,0,0.2), rgba(255,152,0,0.1))\" : \"transparent\",\n                                    color: mode === m ? \"secondary.400\" : \"gray.400\",\n                                    borderRadius: \"md\",\n                                    px: 3,\n                                    py: 1.5,\n                                    height: \"auto\",\n                                    fontFamily: \"mono\",\n                                    fontWeight: mode === m ? \"bold\" : \"medium\",\n                                    letterSpacing: \"tight\",\n                                    borderWidth: mode === m ? 1 : 0,\n                                    borderColor: mode === m ? \"secondary.800\" : \"transparent\",\n                                    _hover: {\n                                        bg: mode === m ? \"linear-gradient(135deg, rgba(255,152,0,0.3), rgba(255,152,0,0.15))\" : \"blackAlpha.300\",\n                                        color: \"secondary.400\",\n                                        transform: \"translateY(-1px)\",\n                                        boxShadow: \"0 4px 8px rgba(0,0,0,0.3)\"\n                                    },\n                                    _active: {\n                                        bg: \"blackAlpha.500\",\n                                        transform: \"translateY(0)\"\n                                    },\n                                    _focus: {\n                                        outline: \"none\",\n                                        boxShadow: \"none\"\n                                    },\n                                    _focusVisible: {\n                                        outline: \"2px solid\",\n                                        outlineColor: \"secondary.400\",\n                                        outlineOffset: \"2px\",\n                                        boxShadow: \"0 0 0 2px rgba(255,152,0,0.3)\",\n                                        borderColor: mode === m ? \"secondary.800\" : \"transparent\"\n                                    },\n                                    transition: \"all 0.2s cubic-bezier(0.4, 0, 0.2, 1)\",\n                                    mr: 1,\n                                    \"aria-label\": \"\".concat(m.toUpperCase(), \"エディターモードに切り替え\"),\n                                    \"aria-pressed\": mode === m,\n                                    children: m.toUpperCase()\n                                }, m, false, {\n                                    fileName: \"C:\\\\Users\\\\hr-hm\\\\Desktop\\\\study\\\\vimapp\\\\src\\\\components\\\\VimEditor.tsx\",\n                                    lineNumber: 335,\n                                    columnNumber: 13\n                                }, this)),\n                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_15__.Button, {\n                                onClick: handleReset,\n                                colorScheme: \"gray\",\n                                bg: \"transparent\",\n                                color: \"gray.400\",\n                                borderRadius: \"md\",\n                                px: 3,\n                                py: 1.5,\n                                height: \"auto\",\n                                fontFamily: \"mono\",\n                                fontWeight: \"medium\",\n                                letterSpacing: \"tight\",\n                                borderWidth: 0,\n                                _hover: {\n                                    bg: \"linear-gradient(135deg, rgba(128,90,213,0.2), rgba(128,90,213,0.1))\",\n                                    color: \"purple.400\",\n                                    transform: \"translateY(-1px)\",\n                                    boxShadow: \"0 4px 8px rgba(0,0,0,0.3)\"\n                                },\n                                _active: {\n                                    bg: \"blackAlpha.500\",\n                                    transform: \"translateY(0)\"\n                                },\n                                _focus: {\n                                    outline: \"none\"\n                                },\n                                _focusVisible: {\n                                    outline: \"none\"\n                                },\n                                transition: \"all 0.2s cubic-bezier(0.4, 0, 0.2, 1)\",\n                                ml: 2,\n                                \"aria-label\": \"エディターの内容をリセット\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_14__.Icon, {\n                                        as: _barrel_optimize_names_FiCommand_FiEdit_FiRefreshCw_FiTerminal_react_icons_fi__WEBPACK_IMPORTED_MODULE_7__.FiRefreshCw,\n                                        mr: 1\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\hr-hm\\\\Desktop\\\\study\\\\vimapp\\\\src\\\\components\\\\VimEditor.tsx\",\n                                        lineNumber: 415,\n                                        columnNumber: 13\n                                    }, this),\n                                    \" Reset\"\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\hr-hm\\\\Desktop\\\\study\\\\vimapp\\\\src\\\\components\\\\VimEditor.tsx\",\n                                lineNumber: 386,\n                                columnNumber: 11\n                            }, this)\n                        ]\n                    }, void 0, true, {\n                        fileName: \"C:\\\\Users\\\\hr-hm\\\\Desktop\\\\study\\\\vimapp\\\\src\\\\components\\\\VimEditor.tsx\",\n                        lineNumber: 296,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\hr-hm\\\\Desktop\\\\study\\\\vimapp\\\\src\\\\components\\\\VimEditor.tsx\",\n                lineNumber: 253,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(MotionFlex, {\n                position: \"absolute\",\n                bottom: 0,\n                left: 0,\n                right: 0,\n                px: 4,\n                py: 1.5,\n                bg: \"linear-gradient(135deg, rgba(0,0,0,0.8), rgba(0,0,0,0.6))\",\n                borderTopWidth: 1,\n                borderColor: \"primary.700\",\n                zIndex: 5,\n                fontSize: \"sm\",\n                fontFamily: \"mono\",\n                justifyContent: \"space-between\",\n                alignItems: \"center\",\n                backdropFilter: \"blur(10px)\",\n                _before: {\n                    content: '\"\"',\n                    position: \"absolute\",\n                    top: 0,\n                    left: 0,\n                    right: 0,\n                    height: \"1px\",\n                    background: \"linear-gradient(90deg, transparent, \".concat(modeInfo[vimMode].color, \", transparent)\"),\n                    opacity: 0.6\n                },\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(framer_motion__WEBPACK_IMPORTED_MODULE_16__.AnimatePresence, {\n                        mode: \"wait\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(MotionFlex, {\n                            alignItems: \"center\",\n                            variants: modeIndicatorVariants,\n                            initial: \"hidden\",\n                            animate: \"visible\",\n                            exit: \"exit\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_14__.Icon, {\n                                    as: modeInfo[vimMode].icon,\n                                    color: modeInfo[vimMode].color,\n                                    mr: 2\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\hr-hm\\\\Desktop\\\\study\\\\vimapp\\\\src\\\\components\\\\VimEditor.tsx\",\n                                    lineNumber: 456,\n                                    columnNumber: 13\n                                }, this),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(MotionText, {\n                                    color: modeInfo[vimMode].color,\n                                    fontWeight: \"medium\",\n                                    fontSize: \"sm\",\n                                    textShadow: \"0 0 8px \".concat(modeInfo[vimMode].color, \"40\"),\n                                    children: modeInfo[vimMode].text\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\hr-hm\\\\Desktop\\\\study\\\\vimapp\\\\src\\\\components\\\\VimEditor.tsx\",\n                                    lineNumber: 461,\n                                    columnNumber: 13\n                                }, this)\n                            ]\n                        }, vimMode, true, {\n                            fileName: \"C:\\\\Users\\\\hr-hm\\\\Desktop\\\\study\\\\vimapp\\\\src\\\\components\\\\VimEditor.tsx\",\n                            lineNumber: 448,\n                            columnNumber: 11\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\hr-hm\\\\Desktop\\\\study\\\\vimapp\\\\src\\\\components\\\\VimEditor.tsx\",\n                        lineNumber: 447,\n                        columnNumber: 9\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_6__.Text, {\n                        color: \"gray.500\",\n                        fontSize: \"xs\",\n                        children: modeInfo[vimMode].hint\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\hr-hm\\\\Desktop\\\\study\\\\vimapp\\\\src\\\\components\\\\VimEditor.tsx\",\n                        lineNumber: 471,\n                        columnNumber: 9\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\hr-hm\\\\Desktop\\\\study\\\\vimapp\\\\src\\\\components\\\\VimEditor.tsx\",\n                lineNumber: 420,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_4__.Box, {\n                flex: 1,\n                minHeight: 0,\n                borderRadius: \"lg\",\n                overflow: \"hidden\",\n                width: \"100%\",\n                display: \"flex\",\n                position: \"relative\",\n                mb: 8,\n                height: \"100%\",\n                maxH: \"100%\",\n                children: [\n                    !showPreview && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_4__.Box, {\n                        w: \"100%\",\n                        h: \"100%\",\n                        maxH: {\n                            base: \"340px\",\n                            md: \"480px\",\n                            lg: \"560px\"\n                        },\n                        minH: {\n                            base: \"220px\",\n                            md: \"320px\"\n                        },\n                        overflowY: \"auto\",\n                        borderRadius: \"md\",\n                        bg: \"transparent\",\n                        boxShadow: \"none\",\n                        style: {\n                            height: \"100%\",\n                            fontSize: \"16px\",\n                            outline: \"none\"\n                        },\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_uiw_react_codemirror__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n                            value: code,\n                            height: \"100%\",\n                            extensions: getExtensions(),\n                            theme: _codemirror_theme_one_dark__WEBPACK_IMPORTED_MODULE_10__.oneDark,\n                            onChange: onChange,\n                            onUpdate: onUpdate,\n                            style: {\n                                fontSize: \"16px\",\n                                background: \"transparent\"\n                            }\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\hr-hm\\\\Desktop\\\\study\\\\vimapp\\\\src\\\\components\\\\VimEditor.tsx\",\n                            lineNumber: 505,\n                            columnNumber: 13\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\hr-hm\\\\Desktop\\\\study\\\\vimapp\\\\src\\\\components\\\\VimEditor.tsx\",\n                        lineNumber: 490,\n                        columnNumber: 11\n                    }, this),\n                    showPreview && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_chakra_ui_react__WEBPACK_IMPORTED_MODULE_4__.Box, {\n                        w: \"100%\",\n                        h: \"100%\",\n                        maxH: {\n                            base: \"340px\",\n                            md: \"480px\",\n                            lg: \"560px\"\n                        },\n                        minH: {\n                            base: \"220px\",\n                            md: \"320px\"\n                        },\n                        overflowY: \"auto\",\n                        borderRadius: \"md\",\n                        bg: \"white\",\n                        boxShadow: \"md\",\n                        position: \"relative\",\n                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"iframe\", {\n                            title: \"Preview\",\n                            srcDoc: previewSrcDoc,\n                            style: {\n                                width: \"100%\",\n                                height: \"100%\",\n                                border: \"none\",\n                                background: \"white\"\n                            },\n                            sandbox: \"allow-scripts allow-same-origin\"\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\hr-hm\\\\Desktop\\\\study\\\\vimapp\\\\src\\\\components\\\\VimEditor.tsx\",\n                            lineNumber: 528,\n                            columnNumber: 13\n                        }, this)\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\hr-hm\\\\Desktop\\\\study\\\\vimapp\\\\src\\\\components\\\\VimEditor.tsx\",\n                        lineNumber: 517,\n                        columnNumber: 11\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\hr-hm\\\\Desktop\\\\study\\\\vimapp\\\\src\\\\components\\\\VimEditor.tsx\",\n                lineNumber: 476,\n                columnNumber: 7\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"C:\\\\Users\\\\hr-hm\\\\Desktop\\\\study\\\\vimapp\\\\src\\\\components\\\\VimEditor.tsx\",\n        lineNumber: 217,\n        columnNumber: 5\n    }, this);\n}\n_s(VimEditor, \"fZ9mlgngsbH1AsnQyHZ43PlLZvA=\");\n_c3 = VimEditor;\n/* harmony default export */ __webpack_exports__[\"default\"] = (VimEditor);\nvar _c, _c1, _c2, _c3;\n$RefreshReg$(_c, \"MotionBox\");\n$RefreshReg$(_c1, \"MotionFlex\");\n$RefreshReg$(_c2, \"MotionText\");\n$RefreshReg$(_c3, \"VimEditor\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/components/VimEditor.tsx\n"));

/***/ }),

/***/ "(app-pages-browser)/./node_modules/@replit/codemirror-vim/dist/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@replit/codemirror-vim/dist/index.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CodeMirror: function() { return /* binding */ CodeMirror; },\n/* harmony export */   Vim: function() { return /* binding */ Vim; },\n/* harmony export */   getCM: function() { return /* binding */ getCM; },\n/* harmony export */   vim: function() { return /* binding */ vim; }\n/* harmony export */ });\n/* harmony import */ var _codemirror_state__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @codemirror/state */ \"(app-pages-browser)/./node_modules/@codemirror/state/dist/index.js\");\n/* harmony import */ var _codemirror_language__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @codemirror/language */ \"(app-pages-browser)/./node_modules/@codemirror/language/dist/index.js\");\n/* harmony import */ var _codemirror_view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @codemirror/view */ \"(app-pages-browser)/./node_modules/@codemirror/view/dist/index.js\");\n/* harmony import */ var _codemirror_search__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @codemirror/search */ \"(app-pages-browser)/./node_modules/@codemirror/search/dist/index.js\");\n/* harmony import */ var _codemirror_commands__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @codemirror/commands */ \"(app-pages-browser)/./node_modules/@codemirror/commands/dist/index.js\");\n\n\n\n\n\n\n\n//@ts-check\n\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/5/LICENSE\n\n/**\n * Supported keybindings:\n *   Too many to list. Refer to defaultKeymap below.\n *\n * Supported Ex commands:\n *   Refer to defaultExCommandMap below.\n *\n * Registers: unnamed, -, ., :, /, _, a-z, A-Z, 0-9\n *   (Does not respect the special case for number registers when delete\n *    operator is made with these commands: %, (, ),  , /, ?, n, N, {, } )\n *   TODO: Implement the remaining registers.\n *\n * Marks: a-z, A-Z, and 0-9\n *   TODO: Implement the remaining special marks. They have more complex\n *       behavior.\n *\n * Events:\n *  'vim-mode-change' - raised on the editor anytime the current mode changes,\n *                      Event object: {mode: \"visual\", subMode: \"linewise\"}\n *\n * Code structure:\n *  1. Default keymap\n *  2. Variable declarations and short basic helpers\n *  3. Instance (External API) implementation\n *  4. Internal state tracking objects (input state, counter) implementation\n *     and instantiation\n *  5. Key handler (the main command dispatcher) implementation\n *  6. Motion, operator, and action implementations\n *  7. Helper functions for the key handler, motions, operators, and actions\n *  8. Set up Vim to work as a keymap for CodeMirror.\n *  9. Ex command implementations.\n */\n\n\n/** @arg {typeof import(\"./cm_adapter\").CodeMirror} CM */\nfunction initVim(CM) {\n\n/**\n * @typedef { import(\"./cm_adapter\").CodeMirror } CodeMirror\n * @typedef { import(\"./types\").CodeMirrorV} CodeMirrorV\n * @typedef { import(\"./types\").Pos } Pos\n * @typedef { import(\"./types\").vimState } vimState \n * @typedef { import(\"./types\").ExFn } ExFn\n * @typedef { import(\"./types\").MotionArgs } MotionArgs\n * @typedef { import(\"./types\").ActionArgs } ActionArgs\n * @typedef { import(\"./types\").OperatorArgs } OperatorArgs\n * @typedef { import(\"./types\").vimKey } vimKey\n * @typedef { import(\"./types\").Marker } Marker\n * @typedef { import(\"./types\").InputStateInterface } InputStateInterface\n * @typedef { import(\"./types\").SearchStateInterface } SearchStateInterface\n * @typedef { import(\"./types\").InsertModeChanges } InsertModeChanges\n */\n  var Pos = CM.Pos;\n\n  /** @arg {CodeMirror} cm @arg {Pos} curStart @arg {Pos} curEnd */\n  function updateSelectionForSurrogateCharacters(cm, curStart, curEnd) {\n    // start and character position when no selection \n    // is the same in visual mode, and differs in 1 character in normal mode\n    if (curStart.line === curEnd.line && curStart.ch >= curEnd.ch - 1) {\n      var text = cm.getLine(curStart.line);\n      var charCode = text.charCodeAt(curStart.ch);\n      if (0xD800 <= charCode && charCode <= 0xD8FF) {\n        curEnd.ch += 1;\n      }\n    }\n\n    return {start: curStart, end: curEnd};\n  }\n  /** @type {import(\"./types\").vimKeyMap} */\n  var defaultKeymap = [\n    // Key to key mapping. This goes first to make it possible to override\n    // existing mappings.\n    { keys: '<Left>', type: 'keyToKey', toKeys: 'h' },\n    { keys: '<Right>', type: 'keyToKey', toKeys: 'l' },\n    { keys: '<Up>', type: 'keyToKey', toKeys: 'k' },\n    { keys: '<Down>', type: 'keyToKey', toKeys: 'j' },\n    { keys: 'g<Up>', type: 'keyToKey', toKeys: 'gk' },\n    { keys: 'g<Down>', type: 'keyToKey', toKeys: 'gj' },\n    { keys: '<Space>', type: 'keyToKey', toKeys: 'l' },\n    { keys: '<BS>', type: 'keyToKey', toKeys: 'h'},\n    { keys: '<Del>', type: 'keyToKey', toKeys: 'x' },\n    { keys: '<C-Space>', type: 'keyToKey', toKeys: 'W' },\n    { keys: '<C-BS>', type: 'keyToKey', toKeys: 'B' },\n    { keys: '<S-Space>', type: 'keyToKey', toKeys: 'w' },\n    { keys: '<S-BS>', type: 'keyToKey', toKeys: 'b' },\n    { keys: '<C-n>', type: 'keyToKey', toKeys: 'j' },\n    { keys: '<C-p>', type: 'keyToKey', toKeys: 'k' },\n    { keys: '<C-[>', type: 'keyToKey', toKeys: '<Esc>' },\n    { keys: '<C-c>', type: 'keyToKey', toKeys: '<Esc>' },\n    { keys: '<C-[>', type: 'keyToKey', toKeys: '<Esc>', context: 'insert' },\n    { keys: '<C-c>', type: 'keyToKey', toKeys: '<Esc>', context: 'insert' },\n    { keys: '<C-Esc>', type: 'keyToKey', toKeys: '<Esc>' }, // ipad keyboard sends C-Esc instead of C-[\n    { keys: '<C-Esc>', type: 'keyToKey', toKeys: '<Esc>', context: 'insert' },\n    { keys: 's', type: 'keyToKey', toKeys: 'cl', context: 'normal' },\n    { keys: 's', type: 'keyToKey', toKeys: 'c', context: 'visual'},\n    { keys: 'S', type: 'keyToKey', toKeys: 'cc', context: 'normal' },\n    { keys: 'S', type: 'keyToKey', toKeys: 'VdO', context: 'visual' },\n    { keys: '<Home>', type: 'keyToKey', toKeys: '0' },\n    { keys: '<End>', type: 'keyToKey', toKeys: '$' },\n    { keys: '<PageUp>', type: 'keyToKey', toKeys: '<C-b>' },\n    { keys: '<PageDown>', type: 'keyToKey', toKeys: '<C-f>' },\n    { keys: '<CR>', type: 'keyToKey', toKeys: 'j^', context: 'normal' },\n    { keys: '<Ins>', type: 'keyToKey', toKeys: 'i', context: 'normal'},\n    { keys: '<Ins>', type: 'action', action: 'toggleOverwrite', context: 'insert' },\n    // Motions\n    { keys: 'H', type: 'motion', motion: 'moveToTopLine', motionArgs: { linewise: true, toJumplist: true }},\n    { keys: 'M', type: 'motion', motion: 'moveToMiddleLine', motionArgs: { linewise: true, toJumplist: true }},\n    { keys: 'L', type: 'motion', motion: 'moveToBottomLine', motionArgs: { linewise: true, toJumplist: true }},\n    { keys: 'h', type: 'motion', motion: 'moveByCharacters', motionArgs: { forward: false }},\n    { keys: 'l', type: 'motion', motion: 'moveByCharacters', motionArgs: { forward: true }},\n    { keys: 'j', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, linewise: true }},\n    { keys: 'k', type: 'motion', motion: 'moveByLines', motionArgs: { forward: false, linewise: true }},\n    { keys: 'gj', type: 'motion', motion: 'moveByDisplayLines', motionArgs: { forward: true }},\n    { keys: 'gk', type: 'motion', motion: 'moveByDisplayLines', motionArgs: { forward: false }},\n    { keys: 'w', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: false }},\n    { keys: 'W', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: false, bigWord: true }},\n    { keys: 'e', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: true, inclusive: true }},\n    { keys: 'E', type: 'motion', motion: 'moveByWords', motionArgs: { forward: true, wordEnd: true, bigWord: true, inclusive: true }},\n    { keys: 'b', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false }},\n    { keys: 'B', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false, bigWord: true }},\n    { keys: 'ge', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: true, inclusive: true }},\n    { keys: 'gE', type: 'motion', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: true, bigWord: true, inclusive: true }},\n    { keys: '{', type: 'motion', motion: 'moveByParagraph', motionArgs: { forward: false, toJumplist: true }},\n    { keys: '}', type: 'motion', motion: 'moveByParagraph', motionArgs: { forward: true, toJumplist: true }},\n    { keys: '(', type: 'motion', motion: 'moveBySentence', motionArgs: { forward: false }},\n    { keys: ')', type: 'motion', motion: 'moveBySentence', motionArgs: { forward: true }},\n    { keys: '<C-f>', type: 'motion', motion: 'moveByPage', motionArgs: { forward: true }},\n    { keys: '<C-b>', type: 'motion', motion: 'moveByPage', motionArgs: { forward: false }},\n    { keys: '<C-d>', type: 'motion', motion: 'moveByScroll', motionArgs: { forward: true, explicitRepeat: true }},\n    { keys: '<C-u>', type: 'motion', motion: 'moveByScroll', motionArgs: { forward: false, explicitRepeat: true }},\n    { keys: 'gg', type: 'motion', motion: 'moveToLineOrEdgeOfDocument', motionArgs: { forward: false, explicitRepeat: true, linewise: true, toJumplist: true }},\n    { keys: 'G', type: 'motion', motion: 'moveToLineOrEdgeOfDocument', motionArgs: { forward: true, explicitRepeat: true, linewise: true, toJumplist: true }},\n    { keys: \"g$\", type: \"motion\", motion: \"moveToEndOfDisplayLine\" },\n    { keys: \"g^\", type: \"motion\", motion: \"moveToStartOfDisplayLine\" },\n    { keys: \"g0\", type: \"motion\", motion: \"moveToStartOfDisplayLine\" },\n    { keys: '0', type: 'motion', motion: 'moveToStartOfLine' },\n    { keys: '^', type: 'motion', motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: '+', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, toFirstChar:true }},\n    { keys: '-', type: 'motion', motion: 'moveByLines', motionArgs: { forward: false, toFirstChar:true }},\n    { keys: '_', type: 'motion', motion: 'moveByLines', motionArgs: { forward: true, toFirstChar:true, repeatOffset:-1 }},\n    { keys: '$', type: 'motion', motion: 'moveToEol', motionArgs: { inclusive: true }},\n    { keys: '%', type: 'motion', motion: 'moveToMatchedSymbol', motionArgs: { inclusive: true, toJumplist: true }},\n    { keys: 'f<character>', type: 'motion', motion: 'moveToCharacter', motionArgs: { forward: true , inclusive: true }},\n    { keys: 'F<character>', type: 'motion', motion: 'moveToCharacter', motionArgs: { forward: false }},\n    { keys: 't<character>', type: 'motion', motion: 'moveTillCharacter', motionArgs: { forward: true, inclusive: true }},\n    { keys: 'T<character>', type: 'motion', motion: 'moveTillCharacter', motionArgs: { forward: false }},\n    { keys: ';', type: 'motion', motion: 'repeatLastCharacterSearch', motionArgs: { forward: true }},\n    { keys: ',', type: 'motion', motion: 'repeatLastCharacterSearch', motionArgs: { forward: false }},\n    { keys: '\\'<register>', type: 'motion', motion: 'goToMark', motionArgs: {toJumplist: true, linewise: true}},\n    { keys: '`<register>', type: 'motion', motion: 'goToMark', motionArgs: {toJumplist: true}},\n    { keys: ']`', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: true } },\n    { keys: '[`', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: false } },\n    { keys: ']\\'', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: true, linewise: true } },\n    { keys: '[\\'', type: 'motion', motion: 'jumpToMark', motionArgs: { forward: false, linewise: true } },\n    // the next two aren't motions but must come before more general motion declarations\n    { keys: ']p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: true, isEdit: true, matchIndent: true}},\n    { keys: '[p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: false, isEdit: true, matchIndent: true}},\n    { keys: ']<character>', type: 'motion', motion: 'moveToSymbol', motionArgs: { forward: true, toJumplist: true}},\n    { keys: '[<character>', type: 'motion', motion: 'moveToSymbol', motionArgs: { forward: false, toJumplist: true}},\n    { keys: '|', type: 'motion', motion: 'moveToColumn'},\n    { keys: 'o', type: 'motion', motion: 'moveToOtherHighlightedEnd', context:'visual'},\n    { keys: 'O', type: 'motion', motion: 'moveToOtherHighlightedEnd', motionArgs: {sameLine: true}, context:'visual'},\n    // Operators\n    { keys: 'd', type: 'operator', operator: 'delete' },\n    { keys: 'y', type: 'operator', operator: 'yank' },\n    { keys: 'c', type: 'operator', operator: 'change' },\n    { keys: '=', type: 'operator', operator: 'indentAuto' },\n    { keys: '>', type: 'operator', operator: 'indent', operatorArgs: { indentRight: true }},\n    { keys: '<', type: 'operator', operator: 'indent', operatorArgs: { indentRight: false }},\n    { keys: 'g~', type: 'operator', operator: 'changeCase' },\n    { keys: 'gu', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: true}, isEdit: true },\n    { keys: 'gU', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: false}, isEdit: true },\n    { keys: 'n', type: 'motion', motion: 'findNext', motionArgs: { forward: true, toJumplist: true }},\n    { keys: 'N', type: 'motion', motion: 'findNext', motionArgs: { forward: false, toJumplist: true }},\n    { keys: 'gn', type: 'motion', motion: 'findAndSelectNextInclusive', motionArgs: { forward: true }},\n    { keys: 'gN', type: 'motion', motion: 'findAndSelectNextInclusive', motionArgs: { forward: false }},\n    { keys: 'gq', type: 'operator', operator: 'hardWrap' },\n    { keys: 'gw', type: 'operator', operator: 'hardWrap', operatorArgs: {keepCursor: true}},\n    { keys: 'g?', type: 'operator', operator: 'rot13'},\n    // Operator-Motion dual commands\n    { keys: 'x', type: 'operatorMotion', operator: 'delete', motion: 'moveByCharacters', motionArgs: { forward: true }, operatorMotionArgs: { visualLine: false }},\n    { keys: 'X', type: 'operatorMotion', operator: 'delete', motion: 'moveByCharacters', motionArgs: { forward: false }, operatorMotionArgs: { visualLine: true }},\n    { keys: 'D', type: 'operatorMotion', operator: 'delete', motion: 'moveToEol', motionArgs: { inclusive: true }, context: 'normal'},\n    { keys: 'D', type: 'operator', operator: 'delete', operatorArgs: { linewise: true }, context: 'visual'},\n    { keys: 'Y', type: 'operatorMotion', operator: 'yank', motion: 'expandToLine', motionArgs: { linewise: true }, context: 'normal'},\n    { keys: 'Y', type: 'operator', operator: 'yank', operatorArgs: { linewise: true }, context: 'visual'},\n    { keys: 'C', type: 'operatorMotion', operator: 'change', motion: 'moveToEol', motionArgs: { inclusive: true }, context: 'normal'},\n    { keys: 'C', type: 'operator', operator: 'change', operatorArgs: { linewise: true }, context: 'visual'},\n    { keys: '~', type: 'operatorMotion', operator: 'changeCase', motion: 'moveByCharacters', motionArgs: { forward: true }, operatorArgs: { shouldMoveCursor: true }, context: 'normal'},\n    { keys: '~', type: 'operator', operator: 'changeCase', context: 'visual'},\n    { keys: '<C-u>', type: 'operatorMotion', operator: 'delete', motion: 'moveToStartOfLine', context: 'insert' },\n    { keys: '<C-w>', type: 'operatorMotion', operator: 'delete', motion: 'moveByWords', motionArgs: { forward: false, wordEnd: false }, context: 'insert' },\n    //ignore C-w in normal mode\n    { keys: '<C-w>', type: 'idle', context: 'normal' },\n    // Actions\n    { keys: '<C-i>', type: 'action', action: 'jumpListWalk', actionArgs: { forward: true }},\n    { keys: '<C-o>', type: 'action', action: 'jumpListWalk', actionArgs: { forward: false }},\n    { keys: '<C-e>', type: 'action', action: 'scroll', actionArgs: { forward: true, linewise: true }},\n    { keys: '<C-y>', type: 'action', action: 'scroll', actionArgs: { forward: false, linewise: true }},\n    { keys: 'a', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'charAfter' }, context: 'normal' },\n    { keys: 'A', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'eol' }, context: 'normal' },\n    { keys: 'A', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'endOfSelectedArea' }, context: 'visual' },\n    { keys: 'i', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'inplace' }, context: 'normal' },\n    { keys: 'gi', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'lastEdit' }, context: 'normal' },\n    { keys: 'I', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'firstNonBlank'}, context: 'normal' },\n    { keys: 'gI', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'bol'}, context: 'normal' },\n    { keys: 'I', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { insertAt: 'startOfSelectedArea' }, context: 'visual' },\n    { keys: 'o', type: 'action', action: 'newLineAndEnterInsertMode', isEdit: true, interlaceInsertRepeat: true, actionArgs: { after: true }, context: 'normal' },\n    { keys: 'O', type: 'action', action: 'newLineAndEnterInsertMode', isEdit: true, interlaceInsertRepeat: true, actionArgs: { after: false }, context: 'normal' },\n    { keys: 'v', type: 'action', action: 'toggleVisualMode' },\n    { keys: 'V', type: 'action', action: 'toggleVisualMode', actionArgs: { linewise: true }},\n    { keys: '<C-v>', type: 'action', action: 'toggleVisualMode', actionArgs: { blockwise: true }},\n    { keys: '<C-q>', type: 'action', action: 'toggleVisualMode', actionArgs: { blockwise: true }},\n    { keys: 'gv', type: 'action', action: 'reselectLastSelection' },\n    { keys: 'J', type: 'action', action: 'joinLines', isEdit: true },\n    { keys: 'gJ', type: 'action', action: 'joinLines', actionArgs: { keepSpaces: true }, isEdit: true },\n    { keys: 'p', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: true, isEdit: true }},\n    { keys: 'P', type: 'action', action: 'paste', isEdit: true, actionArgs: { after: false, isEdit: true }},\n    { keys: 'r<character>', type: 'action', action: 'replace', isEdit: true },\n    { keys: '@<register>', type: 'action', action: 'replayMacro' },\n    { keys: 'q<register>', type: 'action', action: 'enterMacroRecordMode' },\n    // Handle Replace-mode as a special case of insert mode.\n    { keys: 'R', type: 'action', action: 'enterInsertMode', isEdit: true, actionArgs: { replace: true }, context: 'normal'},\n    { keys: 'R', type: 'operator', operator: 'change', operatorArgs: { linewise: true, fullLine: true }, context: 'visual', exitVisualBlock: true},\n    { keys: 'u', type: 'action', action: 'undo', context: 'normal' },\n    { keys: 'u', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: true}, context: 'visual', isEdit: true },\n    { keys: 'U', type: 'operator', operator: 'changeCase', operatorArgs: {toLower: false}, context: 'visual', isEdit: true },\n    { keys: '<C-r>', type: 'action', action: 'redo' },\n    { keys: 'm<register>', type: 'action', action: 'setMark' },\n    { keys: '\"<register>', type: 'action', action: 'setRegister' },\n    { keys: '<C-r><register>', type: 'action', action: 'insertRegister', context: 'insert', isEdit: true },\n    { keys: '<C-o>', type: 'action', action: 'oneNormalCommand', context: 'insert' },\n    { keys: 'zz', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'center' }},\n    { keys: 'z.', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'center' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: 'zt', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'top' }},\n    { keys: 'z<CR>', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'top' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: 'zb', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'bottom' }},\n    { keys: 'z-', type: 'action', action: 'scrollToCursor', actionArgs: { position: 'bottom' }, motion: 'moveToFirstNonWhiteSpaceCharacter' },\n    { keys: '.', type: 'action', action: 'repeatLastEdit' },\n    { keys: '<C-a>', type: 'action', action: 'incrementNumberToken', isEdit: true, actionArgs: {increase: true, backtrack: false}},\n    { keys: '<C-x>', type: 'action', action: 'incrementNumberToken', isEdit: true, actionArgs: {increase: false, backtrack: false}},\n    { keys: '<C-t>', type: 'action', action: 'indent', actionArgs: { indentRight: true }, context: 'insert' },\n    { keys: '<C-d>', type: 'action', action: 'indent', actionArgs: { indentRight: false }, context: 'insert' },\n    // Text object motions\n    { keys: 'a<register>', type: 'motion', motion: 'textObjectManipulation' },\n    { keys: 'i<register>', type: 'motion', motion: 'textObjectManipulation', motionArgs: { textObjectInner: true }},\n    // Search\n    { keys: '/', type: 'search', searchArgs: { forward: true, querySrc: 'prompt', toJumplist: true }},\n    { keys: '?', type: 'search', searchArgs: { forward: false, querySrc: 'prompt', toJumplist: true }},\n    { keys: '*', type: 'search', searchArgs: { forward: true, querySrc: 'wordUnderCursor', wholeWordOnly: true, toJumplist: true }},\n    { keys: '#', type: 'search', searchArgs: { forward: false, querySrc: 'wordUnderCursor', wholeWordOnly: true, toJumplist: true }},\n    { keys: 'g*', type: 'search', searchArgs: { forward: true, querySrc: 'wordUnderCursor', toJumplist: true }},\n    { keys: 'g#', type: 'search', searchArgs: { forward: false, querySrc: 'wordUnderCursor', toJumplist: true }},\n    // Ex command\n    { keys: ':', type: 'ex' }\n  ];\n  var usedKeys = Object.create(null);\n  var defaultKeymapLength = defaultKeymap.length;\n\n  /**\n   * Ex commands\n   * Care must be taken when adding to the default Ex command map. For any\n   * pair of commands that have a shared prefix, at least one of their\n   * shortNames must not match the prefix of the other command.\n   */\n  var defaultExCommandMap = [\n    { name: 'colorscheme', shortName: 'colo' },\n    { name: 'map' },\n    { name: 'imap', shortName: 'im' },\n    { name: 'nmap', shortName: 'nm' },\n    { name: 'vmap', shortName: 'vm' },\n    { name: 'omap', shortName: 'om' },\n    { name: 'noremap', shortName: 'no' },\n    { name: 'nnoremap', shortName: 'nn' },\n    { name: 'vnoremap', shortName: 'vn' },\n    { name: 'inoremap', shortName: 'ino' },\n    { name: 'onoremap', shortName: 'ono' },\n    { name: 'unmap' },\n    { name: 'mapclear', shortName: 'mapc' },\n    { name: 'nmapclear', shortName: 'nmapc' },\n    { name: 'vmapclear', shortName: 'vmapc' },\n    { name: 'imapclear', shortName: 'imapc' },\n    { name: 'omapclear', shortName: 'omapc' },\n    { name: 'write', shortName: 'w' },\n    { name: 'undo', shortName: 'u' },\n    { name: 'redo', shortName: 'red' },\n    { name: 'set', shortName: 'se' },\n    { name: 'setlocal', shortName: 'setl' },\n    { name: 'setglobal', shortName: 'setg' },\n    { name: 'sort', shortName: 'sor' },\n    { name: 'substitute', shortName: 's', possiblyAsync: true },\n    { name: 'startinsert', shortName: 'start' },\n    { name: 'nohlsearch', shortName: 'noh' },\n    { name: 'yank', shortName: 'y' },\n    { name: 'delmarks', shortName: 'delm' },\n    { name: 'marks',  excludeFromCommandHistory: true },\n    { name: 'registers', shortName: 'reg', excludeFromCommandHistory: true },\n    { name: 'vglobal', shortName: 'v' },\n    { name: 'delete', shortName: 'd' },\n    { name: 'join', shortName: 'j' },\n    { name: 'normal', shortName: 'norm' },\n    { name: 'global', shortName: 'g' }\n  ];\n\n  /**\n   * Langmap\n   * Determines how to interpret keystrokes in Normal and Visual mode.\n   * Useful for people who use a different keyboard layout than QWERTY\n   */\n  var langmap = parseLangmap('');\n\n  /** @arg {CodeMirror} cm */\n  function enterVimMode(cm) {\n    cm.setOption('disableInput', true);\n    cm.setOption('showCursorWhenSelecting', false);\n    CM.signal(cm, \"vim-mode-change\", {mode: \"normal\"});\n    cm.on('cursorActivity', onCursorActivity);\n    maybeInitVimState(cm);\n    // @ts-ignore\n    CM.on(cm.getInputField(), 'paste', getOnPasteFn(cm));\n  }\n\n  /** @arg {CodeMirror} cm */\n  function leaveVimMode(cm) {\n    cm.setOption('disableInput', false);\n    cm.off('cursorActivity', onCursorActivity);\n    // @ts-ignore\n    CM.off(cm.getInputField(), 'paste', getOnPasteFn(cm));\n    cm.state.vim = null;\n    if (highlightTimeout) clearTimeout(highlightTimeout);\n  }\n\n  /** @arg {CodeMirrorV} cm */\n  function getOnPasteFn(cm) {\n    var vim = cm.state.vim;\n    if (!vim.onPasteFn) {\n      vim.onPasteFn = function() {\n        if (!vim.insertMode) {\n          cm.setCursor(offsetCursor(cm.getCursor(), 0, 1));\n          actions.enterInsertMode(cm, {}, vim);\n        }\n      };\n    }\n    return vim.onPasteFn;\n  }\n\n  var numberRegex = /[\\d]/;\n  var wordCharTest = [CM.isWordChar, function(ch) {\n    return ch && !CM.isWordChar(ch) && !/\\s/.test(ch);\n  }], bigWordCharTest = [function(ch) {\n    return /\\S/.test(ch);\n  }];\n  var validMarks = ['<', '>'];\n  var validRegisters = ['-', '\"', '.', ':', '_', '/', '+'];\n  var latinCharRegex = /^\\w$/;\n  var upperCaseChars = /^[A-Z]$/;\n  try { upperCaseChars = new RegExp(\"^[\\\\p{Lu}]$\", \"u\"); }\n  catch (_) { }\n\n  /** @arg {CodeMirror} cm @arg {number} line */\n  function isLine(cm, line) {\n    return line >= cm.firstLine() && line <= cm.lastLine();\n  }\n  /** @arg {string} k */\n  function isLowerCase(k) {\n    return (/^[a-z]$/).test(k);\n  }\n  /** @arg {string} k */\n  function isMatchableSymbol(k) {\n    return '()[]{}'.indexOf(k) != -1;\n  }\n  /** @arg {string} k */\n  function isNumber(k) {\n    return numberRegex.test(k);\n  }\n  /** @arg {string} k */\n  function isUpperCase(k) {\n    return upperCaseChars.test(k);\n  }\n  /** @arg {string} k */\n  function isWhiteSpaceString(k) {\n    return (/^\\s*$/).test(k);\n  }\n  /** @arg {string} k */\n  function isEndOfSentenceSymbol(k) {\n    return '.?!'.indexOf(k) != -1;\n  }\n  /** @arg {any} val @arg {string | any[]} arr */\n  function inArray(val, arr) {\n    for (var i = 0; i < arr.length; i++) {\n      if (arr[i] == val) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n\n  /** @typedef {import(\"./types\").vimOption} vimOption */\n  /** @type {Object<string, vimOption>} */\n  var options = {};\n  /**\n   * @overload\n   * @arg {string} name \n   * @arg {boolean|null|undefined} defaultValue \n   * @arg {'boolean'} type \n   * @arg {string[]|null} [aliases] \n   * @arg {import(\"./types\").booleanOptionCallback} [callback] \n   * @returns {void}\n   */\n  /**\n   * @overload\n   * @arg {string} name \n   * @arg {number|null|undefined} defaultValue \n   * @arg {'number'} type \n   * @arg {string[]|null} [aliases] \n   * @arg {import(\"./types\").numberOptionCallback} [callback]\n   * @returns {void} \n   */\n  /**\n   * @overload\n   * @arg {string} name \n   * @arg {string|null|undefined} defaultValue \n   * @arg {'string'} type \n   * @arg {string[]|null} [aliases] \n   * @arg {import(\"./types\").stringOptionCallback} [callback]\n   * @returns {void}\n   */\n  /** \n   * @arg {string} name \n   * @arg {any} defaultValue \n   * @arg {'string'} type \n   * @arg {string[]|null} [aliases] \n   * @arg {import(\"./types\").optionCallback} [callback] \n   * */\n  function defineOption(name, defaultValue, type, aliases, callback) {\n    if (defaultValue === undefined && !callback) {\n      throw Error('defaultValue is required unless callback is provided');\n    }\n    if (!type) { type = 'string'; }\n    options[name] = {\n      type: type,\n      defaultValue: defaultValue,\n      callback: callback\n    };\n    if (aliases) {\n      for (var i = 0; i < aliases.length; i++) {\n        options[aliases[i]] = options[name];\n      }\n    }\n    if (defaultValue) {\n      setOption(name, defaultValue);\n    }\n  }\n\n  /**\n   * @arg {string} name \n   * @arg {any} value \n   * @arg {CodeMirrorV} [cm] \n   * @arg {{ scope?: any; } | undefined} [cfg] */\n  function setOption(name, value, cm, cfg) {\n    var option = options[name];\n    cfg = cfg || {};\n    var scope = cfg.scope;\n    if (!option) {\n      return new Error('Unknown option: ' + name);\n    }\n    if (option.type == 'boolean') {\n      if (value && value !== true) {\n        return new Error('Invalid argument: ' + name + '=' + value);\n      } else if (value !== false) {\n        // Boolean options are set to true if value is not defined.\n        value = true;\n      }\n    }\n    if (option.callback) {\n      if (scope !== 'local') {\n        option.callback(value, undefined);\n      }\n      if (scope !== 'global' && cm) {\n        option.callback(value, cm);\n      }\n    } else {\n      if (scope !== 'local') {\n        option.value = option.type == 'boolean' ? !!value : value;\n      }\n      if (scope !== 'global' && cm) {\n        cm.state.vim.options[name] = {value: value};\n      }\n    }\n  }\n\n  /** \n   * @arg {string} name \n   * @arg {CodeMirrorV} [cm] \n   * @arg {{ scope?: any; } | undefined} [cfg] */\n  function getOption(name, cm, cfg) {\n    var option = options[name];\n    cfg = cfg || {};\n    var scope = cfg.scope;\n    if (!option) {\n      return new Error('Unknown option: ' + name);\n    }\n    if (option.callback) {\n      let local = cm && option.callback(undefined, cm);\n      if (scope !== 'global' && local !== undefined) {\n        return local;\n      }\n      if (scope !== 'local') {\n        return option.callback();\n      }\n      return;\n    } else {\n      let local = (scope !== 'global') && (cm && cm.state.vim.options[name]);\n      return (local || (scope !== 'local') && option || {}).value;\n    }\n  }\n  /** @arg {string|undefined} name @arg {CodeMirrorV} [cm] */\n  defineOption('filetype', undefined, 'string', ['ft'], function(name, cm) {\n    // Option is local. Do nothing for global.\n    if (cm === undefined) {\n      return;\n    }\n    // The 'filetype' option proxies to the CodeMirror 'mode' option.\n    if (name === undefined) {\n      let mode = cm.getOption('mode');\n      return mode == 'null' ? '' : mode;\n    } else {\n      let mode = name == '' ? 'null' : name;\n      cm.setOption('mode', mode);\n    }\n  });\n  defineOption('textwidth', 80, 'number', ['tw'], function(width, cm) {\n    // Option is local. Do nothing for global.\n    if (cm === undefined) {\n      return;\n    }\n    // The 'filetype' option proxies to the CodeMirror 'mode' option.\n    if (width === undefined) {\n      var value = cm.getOption('textwidth');\n      return value;\n    } else {\n      var column = Math.round(width);\n      if (column > 1) {\n        cm.setOption('textwidth', column);\n      }\n    }\n  });\n\n  var createCircularJumpList = function() {\n    var size = 100;\n    var pointer = -1;\n    var head = 0;\n    var tail = 0;\n    \n    var buffer = /**@type {(Marker|undefined)[]} */ (new Array(size));\n    /** @arg {CodeMirror} cm  @arg {Pos} oldCur @arg {Pos} newCur */\n    function add(cm, oldCur, newCur) {\n      var current = pointer % size;\n      var curMark = buffer[current];\n      /** @arg {Pos} cursor */\n      function useNextSlot(cursor) {\n        var next = ++pointer % size;\n        var trashMark = buffer[next];\n        if (trashMark) {\n          trashMark.clear();\n        }\n        buffer[next] = cm.setBookmark(cursor);\n      }\n      if (curMark) {\n        var markPos = curMark.find();\n        // avoid recording redundant cursor position\n        if (markPos && !cursorEqual(markPos, oldCur)) {\n          useNextSlot(oldCur);\n        }\n      } else {\n        useNextSlot(oldCur);\n      }\n      useNextSlot(newCur);\n      head = pointer;\n      tail = pointer - size + 1;\n      if (tail < 0) {\n        tail = 0;\n      }\n    }\n    /** @arg {CodeMirror} cm  @arg {number} offset */\n    function move(cm, offset) {\n      pointer += offset;\n      if (pointer > head) {\n        pointer = head;\n      } else if (pointer < tail) {\n        pointer = tail;\n      }\n      var mark = buffer[(size + pointer) % size];\n      // skip marks that are temporarily removed from text buffer\n      if (mark && !mark.find()) {\n        var inc = offset > 0 ? 1 : -1;\n        var newCur;\n        var oldCur = cm.getCursor();\n        do {\n          pointer += inc;\n          mark = buffer[(size + pointer) % size];\n          // skip marks that are the same as current position\n          if (mark &&\n              (newCur = mark.find()) &&\n              !cursorEqual(oldCur, newCur)) {\n            break;\n          }\n        } while (pointer < head && pointer > tail);\n      }\n      return mark;\n    }\n    /** @arg {CodeMirror} cm @arg {number} offset */\n    function find(cm, offset) {\n      var oldPointer = pointer;\n      var mark = move(cm, offset);\n      pointer = oldPointer;\n      return mark && mark.find();\n    }\n    return {\n      /**@type{Pos|undefined} */\n      cachedCursor: undefined, //used for # and * jumps\n      add: add,\n      find: find,\n      move: move\n    };\n  };\n\n  /** \n   * Returns an object to track the changes associated insert mode.  It\n   * clones the object that is passed in, or creates an empty object one if\n   * none is provided.\n   * @arg {import(\"./types\").InsertModeChanges | undefined} [c]\n   * @returns {import(\"./types\").InsertModeChanges} \n   */\n  var createInsertModeChanges = function(c) {\n    if (c) {\n      // Copy construction\n      return {\n        changes: c.changes,\n        expectCursorActivityForChange: c.expectCursorActivityForChange\n      };\n    }\n    return {\n      // Change list\n      changes: [],\n      // Set to true on change, false on cursorActivity.\n      expectCursorActivityForChange: false\n    };\n  };\n\n  class MacroModeState {\n    constructor() {\n      this.latestRegister = undefined;\n      this.isPlaying = false;\n      this.isRecording = false;\n      /** @type {string[]}*/\n      this.replaySearchQueries = [];\n      this.onRecordingDone = undefined;\n      this.lastInsertModeChanges = createInsertModeChanges();\n    }\n    exitMacroRecordMode() {\n      var macroModeState = vimGlobalState.macroModeState;\n      if (macroModeState.onRecordingDone) {\n        macroModeState.onRecordingDone(); // close dialog\n      }\n      macroModeState.onRecordingDone = undefined;\n      macroModeState.isRecording = false;\n    }\n    /**\n     * @arg {CodeMirror} cm\n     * @arg {string} registerName\n     */\n    enterMacroRecordMode(cm, registerName) {\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      if (register) {\n        register.clear();\n        this.latestRegister = registerName;\n        if (cm.openDialog) {\n          var template = dom('span', {class: 'cm-vim-message'}, 'recording @' + registerName);\n          this.onRecordingDone = cm.openDialog(template, function() {}, {bottom:true});\n        }\n        this.isRecording = true;\n      }\n    }\n  }\n  /**\n   * @arg {CodeMirror} cm\n   * @return {vimState}\n   */\n  function maybeInitVimState(cm) {\n    if (!cm.state.vim) {\n      // Store instance state in the CodeMirror object.\n      cm.state.vim = {\n        inputState: new InputState(),\n        // Vim's input state that triggered the last edit, used to repeat\n        // motions and operators with '.'.\n        lastEditInputState: undefined,\n        // Vim's action command before the last edit, used to repeat actions\n        // with '.' and insert mode repeat.\n        lastEditActionCommand: undefined,\n        // When using jk for navigation, if you move from a longer line to a\n        // shorter line, the cursor may clip to the end of the shorter line.\n        // If j is pressed again and cursor goes to the next line, the\n        // cursor should go back to its horizontal position on the longer\n        // line if it can. This is to keep track of the horizontal position.\n        lastHPos: -1,\n        // Doing the same with screen-position for gj/gk\n        lastHSPos: -1,\n        // The last motion command run. Cleared if a non-motion command gets\n        // executed in between.\n        lastMotion: null,\n        marks: {},\n        insertMode: false,\n        insertModeReturn: false,\n        // Repeat count for changes made in insert mode, triggered by key\n        // sequences like 3,i. Only exists when insertMode is true.\n        insertModeRepeat: undefined,\n        visualMode: false,\n        // If we are in visual line mode. No effect if visualMode is false.\n        visualLine: false,\n        visualBlock: false,\n        lastSelection: /**@type{vimState[\"lastSelection\"]}*/( /**@type{unknown}*/(null)),\n        lastPastedText: undefined,\n        sel: {anchor: new Pos(0, 0), head: new Pos(0, 0)},\n        // Buffer-local/window-local values of vim options.\n        options: {},\n        // Whether the next character should be interpreted literally\n        // Necassary for correct implementation of f<character>, r<character> etc.\n        // in terms of langmaps.\n        expectLiteralNext: false,\n        status: \"\",\n      };\n    }\n    return cm.state.vim;\n  }\n  /**\n   * @type { \n      {\n        macroModeState: MacroModeState;\n        registerController: RegisterController;\n        searchHistoryController: HistoryController;\n        jumpList: ReturnType<createCircularJumpList>;\n        exCommandHistoryController: HistoryController; \n        lastCharacterSearch: {increment: number, forward: boolean, selectedCharacter: string}; \n        query?: any;\n        isReversed?: boolean;\n        lastSubstituteReplacePart: any;\n        searchQuery?: null; \n        searchIsReversed?: boolean; \n      }\n    }\n  */\n  var vimGlobalState;\n  function resetVimGlobalState() {\n    vimGlobalState = {\n      // The current search query.\n      searchQuery: null,\n      // Whether we are searching backwards.\n      searchIsReversed: false,\n      // Replace part of the last substituted pattern\n      lastSubstituteReplacePart: undefined,\n      jumpList: createCircularJumpList(),\n      macroModeState: new MacroModeState(),\n      // Recording latest f, t, F or T motion command.\n      lastCharacterSearch: {increment:0, forward:true, selectedCharacter:''},\n      registerController: new RegisterController({}),\n      // search history buffer\n      searchHistoryController: new HistoryController(),\n      // ex Command history buffer\n      exCommandHistoryController : new HistoryController()\n    };\n    for (var optionName in options) {\n      var option = options[optionName];\n      option.value = option.defaultValue;\n    }\n  }\n\n  class InsertModeKey {\n    /**\n     * Wrapper for special keys pressed in insert mode\n     * @arg {string} keyName\n     * @arg {KeyboardEvent} e\n     * @returns\n     */    \n    constructor(keyName, e) {\n      this.keyName = keyName;\n      this.key = e.key;\n      this.ctrlKey = e.ctrlKey;\n      this.altKey = e.altKey;\n      this.metaKey = e.metaKey;\n      this.shiftKey = e.shiftKey;\n    }\n  }\n\n\n  /** @type {number | undefined|false} */\n  var lastInsertModeKeyTimer;\n  var vimApi = {\n    enterVimMode: enterVimMode,\n    leaveVimMode: leaveVimMode,\n    buildKeyMap: function() {\n      // TODO: Convert keymap into dictionary format for fast lookup.\n    },\n    // Testing hook, though it might be useful to expose the register\n    // controller anyway.\n    getRegisterController: function() {\n      return vimGlobalState.registerController;\n    },\n    // Testing hook.\n    resetVimGlobalState_: resetVimGlobalState,\n\n    // Testing hook.\n    getVimGlobalState_: function() {\n      return vimGlobalState;\n    },\n\n    // Testing hook.\n    maybeInitVimState_: maybeInitVimState,\n\n    suppressErrorLogging: false,\n\n    InsertModeKey: InsertModeKey,\n    /**@type {(lhs: string, rhs: string, ctx: string) => void} */\n    map: function(lhs, rhs, ctx) {\n      // Add user defined key bindings.\n      exCommandDispatcher.map(lhs, rhs, ctx);\n    },\n    /**@type {(lhs: string, ctx: string) => any} */\n    unmap: function(lhs, ctx) {\n      return exCommandDispatcher.unmap(lhs, ctx);\n    },\n    // Non-recursive map function.\n    // NOTE: This will not create mappings to key maps that aren't present\n    // in the default key map. See TODO at bottom of function.\n    /**@type {(lhs: string, rhs: string, ctx: string) => void} */\n    noremap: function(lhs, rhs, ctx) {\n      exCommandDispatcher.map(lhs, rhs, ctx, true);\n    },\n    // Remove all user-defined mappings for the provided context.\n    /**@arg {string} [ctx]} */\n    mapclear: function(ctx) {\n      // Partition the existing keymap into user-defined and true defaults.\n      var actualLength = defaultKeymap.length,\n          origLength = defaultKeymapLength;\n      var userKeymap = defaultKeymap.slice(0, actualLength - origLength);\n      defaultKeymap = defaultKeymap.slice(actualLength - origLength);\n      if (ctx) {\n        // If a specific context is being cleared, we need to keep mappings\n        // from all other contexts.\n        for (var i = userKeymap.length - 1; i >= 0; i--) {\n          var mapping = userKeymap[i];\n          if (ctx !== mapping.context) {\n            if (mapping.context) {\n              this._mapCommand(mapping);\n            } else {\n              // `mapping` applies to all contexts so create keymap copies\n              // for each context except the one being cleared.\n              var contexts = ['normal', 'insert', 'visual'];\n              for (var j in contexts) {\n                if (contexts[j] !== ctx) {\n                  var newMapping = Object.assign({}, mapping);\n                  newMapping.context = contexts[j];\n                  this._mapCommand(newMapping);\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    langmap: updateLangmap,\n    vimKeyFromEvent: vimKeyFromEvent,\n    // TODO: Expose setOption and getOption as instance methods. Need to decide how to namespace\n    // them, or somehow make them work with the existing CodeMirror setOption/getOption API.\n    setOption: setOption,\n    getOption: getOption,\n    defineOption: defineOption,\n    /**@type {(name: string, prefix: string|undefined, func: ExFn) => void} */\n    defineEx: function(name, prefix, func){\n      if (!prefix) {\n        prefix = name;\n      } else if (name.indexOf(prefix) !== 0) {\n        throw new Error('(Vim.defineEx) \"'+prefix+'\" is not a prefix of \"'+name+'\", command not registered');\n      }\n      exCommands[name]=func;\n      exCommandDispatcher.commandMap_[prefix]={name:name, shortName:prefix, type:'api'};\n    },\n    /**@type {(cm: CodeMirror, key: string, origin: string) => undefined | boolean} */\n    handleKey: function (cm, key, origin) {\n      var command = this.findKey(cm, key, origin);\n      if (typeof command === 'function') {\n        return command();\n      }\n    },\n    multiSelectHandleKey: multiSelectHandleKey,\n\n    /**\n     * This is the outermost function called by CodeMirror, after keys have\n     * been mapped to their Vim equivalents.\n     *\n     * Finds a command based on the key (and cached keys if there is a\n     * multi-key sequence). Returns `undefined` if no key is matched, a noop\n     * function if a partial match is found (multi-key), and a function to\n     * execute the bound command if a a key is matched. The function always\n     * returns true.\n     */\n    /**@type {(cm_: CodeMirror, key: string, origin?: string| undefined) => (() => boolean|undefined) | undefined} */\n    findKey: function(cm_, key, origin) {\n      var vim = maybeInitVimState(cm_);\n      var cm = /**@type {CodeMirrorV}*/(cm_);\n\n      function handleMacroRecording() {\n        var macroModeState = vimGlobalState.macroModeState;\n        if (macroModeState.isRecording) {\n          if (key == 'q') {\n            macroModeState.exitMacroRecordMode();\n            clearInputState(cm);\n            return true;\n          }\n          if (origin != 'mapping') {\n            logKey(macroModeState, key);\n          }\n        }\n      }\n      function handleEsc() {\n        if (key == '<Esc>') {\n          if (vim.visualMode) {\n            // Get back to normal mode.\n            exitVisualMode(cm);\n          } else if (vim.insertMode) {\n            // Get back to normal mode.\n            exitInsertMode(cm);\n          } else {\n            // We're already in normal mode. Let '<Esc>' be handled normally.\n            return;\n          }\n          clearInputState(cm);\n          return true;\n        }\n      }\n\n      function handleKeyInsertMode() {\n        if (handleEsc()) { return true; }\n        vim.inputState.keyBuffer.push(key);\n        var keys = vim.inputState.keyBuffer.join(\"\");\n        var keysAreChars = key.length == 1;\n        var match = commandDispatcher.matchCommand(keys, defaultKeymap, vim.inputState, 'insert');\n        var changeQueue = vim.inputState.changeQueue;\n\n        if (match.type == 'none') { clearInputState(cm); return false; }\n        else if (match.type == 'partial') {\n          if (match.expectLiteralNext) vim.expectLiteralNext = true;\n          if (lastInsertModeKeyTimer) { window.clearTimeout(lastInsertModeKeyTimer); }\n          lastInsertModeKeyTimer = keysAreChars && window.setTimeout(\n            function() { if (vim.insertMode && vim.inputState.keyBuffer.length) { clearInputState(cm); } },\n            getOption('insertModeEscKeysTimeout'));\n          if (keysAreChars) {\n            var selections = cm.listSelections();\n            if (!changeQueue || changeQueue.removed.length != selections.length)\n              changeQueue = vim.inputState.changeQueue = new ChangeQueue;\n            changeQueue.inserted += key;\n            for (var i = 0; i < selections.length; i++) {\n              var from = cursorMin(selections[i].anchor, selections[i].head);\n              var to = cursorMax(selections[i].anchor, selections[i].head);\n              var text = cm.getRange(from, cm.state.overwrite ? offsetCursor(to, 0, 1) : to);\n              changeQueue.removed[i] = (changeQueue.removed[i] || \"\") + text;\n            }\n          }\n          return !keysAreChars;\n        }\n        else if (match.type == 'full') {\n          vim.inputState.keyBuffer.length = 0;\n        }\n        vim.expectLiteralNext = false;\n\n        if (lastInsertModeKeyTimer) { window.clearTimeout(lastInsertModeKeyTimer); }\n        if (match.command && changeQueue) {\n          var selections = cm.listSelections();\n          for (var i = 0; i < selections.length; i++) {\n            var here = selections[i].head;\n            cm.replaceRange(changeQueue.removed[i] || \"\", \n              offsetCursor(here, 0, -changeQueue.inserted.length), here, '+input');\n          }\n          vimGlobalState.macroModeState.lastInsertModeChanges.changes.pop();\n        }\n        if (!match.command) clearInputState(cm);\n        return match.command;\n      }\n\n      function handleKeyNonInsertMode() {\n        if (handleMacroRecording() || handleEsc()) { return true; }\n\n        vim.inputState.keyBuffer.push(key);\n        var keys = vim.inputState.keyBuffer.join(\"\");\n        if (/^[1-9]\\d*$/.test(keys)) { return true; }\n\n        var keysMatcher = /^(\\d*)(.*)$/.exec(keys);\n        if (!keysMatcher) { clearInputState(cm); return false; }\n        var context = vim.visualMode ? 'visual' :\n                                        'normal';\n        var mainKey = keysMatcher[2] || keysMatcher[1];\n        if (vim.inputState.operatorShortcut && vim.inputState.operatorShortcut.slice(-1) == mainKey) {\n          // multikey operators act linewise by repeating only the last character\n          mainKey = vim.inputState.operatorShortcut;\n        }\n        var match = commandDispatcher.matchCommand(mainKey, defaultKeymap, vim.inputState, context);\n        if (match.type == 'none') { clearInputState(cm); return false; }\n        else if (match.type == 'partial') {\n          if (match.expectLiteralNext) vim.expectLiteralNext = true;\n          return true;\n        }\n        else if (match.type == 'clear') { clearInputState(cm); return true; }\n        vim.expectLiteralNext = false;\n\n        vim.inputState.keyBuffer.length = 0;\n        keysMatcher = /^(\\d*)(.*)$/.exec(keys);\n        if (keysMatcher && keysMatcher[1] && keysMatcher[1] != '0') {\n          vim.inputState.pushRepeatDigit(keysMatcher[1]);\n        }\n        return match.command;\n      }\n\n      var command = vim.insertMode\n        ? handleKeyInsertMode()\n        : handleKeyNonInsertMode();\n\n      if (command === false) {\n        return !vim.insertMode && (key.length === 1 || (CM.isMac && /<A-.>/.test(key)))? function() { return true; } : undefined;\n      } else if (command === true) {\n        // TODO: Look into using CodeMirror's multi-key handling.\n        // Return no-op since we are caching the key. Counts as handled, but\n        // don't want act on it just yet.\n        return function() { return true; };\n      } else if (command) {\n        return function() {\n          return cm.operation(function() {\n            // @ts-ignore\n            cm.curOp.isVimOp = true;\n            try {\n              if (typeof command != 'object') return;\n              \n              if (command.type == 'keyToKey') {\n                doKeyToKey(cm, command.toKeys, command);\n              } else {\n                commandDispatcher.processCommand(cm, vim, command);\n              }\n            } catch (e) {\n              // clear VIM state in case it's in a bad state.\n              // @ts-ignore\n              cm.state.vim = undefined;\n              maybeInitVimState(cm);\n              if (!vimApi.suppressErrorLogging) {\n                console['log'](e);\n              }\n              throw e;\n            }\n            return true;\n          });\n        };\n      }\n    },\n    /**@type {(cm: CodeMirrorV, input: string)=>void} */\n    handleEx: function(cm, input) {\n      exCommandDispatcher.processCommand(cm, input);\n    },\n\n    defineMotion: defineMotion,\n    defineAction: defineAction,\n    defineOperator: defineOperator,\n    mapCommand: mapCommand,\n    _mapCommand: _mapCommand,\n\n    defineRegister: defineRegister,\n\n    exitVisualMode: exitVisualMode,\n    exitInsertMode: exitInsertMode\n  };\n\n  var keyToKeyStack = [];\n  var noremap = false;\n  /**@type {undefined | null | import(\"./types\").PromptOptions} */\n  var virtualPrompt;\n  /**\n   * @arg {string} key\n   */\n  function sendKeyToPrompt(key) {\n    if (!virtualPrompt) throw new Error('No prompt to send key to');\n    if (key[0] == \"<\") {\n      var lowerKey = key.toLowerCase().slice(1, -1);\n      var parts = lowerKey.split('-');\n      lowerKey = parts.pop() || '';\n      if (lowerKey == 'lt') key = '<';\n      else if (lowerKey == 'space') key = ' ';\n      else if (lowerKey == 'cr') key = '\\n';\n      else if (vimToCmKeyMap[lowerKey]) {\n        var value = virtualPrompt.value || \"\";\n        var event =  {\n          key: vimToCmKeyMap[lowerKey],\n          target: {\n            value: value,\n            selectionEnd: value.length,\n            selectionStart: value.length\n          }\n        };\n        if (virtualPrompt.onKeyDown) {\n          virtualPrompt.onKeyDown(event, virtualPrompt.value, close);\n        }\n        if (virtualPrompt && virtualPrompt.onKeyUp) {\n          virtualPrompt.onKeyUp(event, virtualPrompt.value, close);\n        }\n        return;\n      }\n    }\n    if (key == '\\n') {\n      var prompt = virtualPrompt;\n      virtualPrompt = null;\n      prompt.onClose && prompt.onClose(prompt.value);\n    } else {\n      virtualPrompt.value = (virtualPrompt.value || '') + key;\n    }\n\n    /** @param {string | undefined} value */\n    function close(value) {\n      if (!virtualPrompt) return;\n      if (typeof value == 'string') { virtualPrompt.value = value; }\n      else { virtualPrompt = null; }\n    }\n  }\n  /**\n   * @arg {CodeMirrorV} cm\n   * @arg {string} keys\n   * @arg {vimKey|import(\"./types\").exCommandDefinition|{noremap?: boolean}} [fromKey]\n   */\n  function doKeyToKey(cm, keys, fromKey) {\n    var noremapBefore = noremap;\n    // prevent infinite recursion.\n    if (fromKey) {\n      if (keyToKeyStack.indexOf(fromKey) != -1) return;\n      keyToKeyStack.push(fromKey);\n      noremap = fromKey.noremap != false;\n    }\n\n    try {\n      var vim = maybeInitVimState(cm);\n      var keyRe = /<(?:[CSMA]-)*\\w+>|./gi;\n\n      var match;\n      // Pull off one command key, which is either a single character\n      // or a special sequence wrapped in '<' and '>', e.g. '<Space>'.\n      while ((match = keyRe.exec(keys))) {\n        var key = match[0];\n        var wasInsert = vim.insertMode;\n        if (virtualPrompt) {\n          sendKeyToPrompt(key);\n          continue;\n        }\n\n        var result = vimApi.handleKey(cm, key, 'mapping');\n\n        if (!result && wasInsert && vim.insertMode) {\n          if (key[0] == \"<\") {\n            var lowerKey = key.toLowerCase().slice(1, -1);\n            var parts = lowerKey.split('-');\n            lowerKey = parts.pop() || '';\n            if (lowerKey == 'lt') key = '<';\n            else if (lowerKey == 'space') key = ' ';\n            else if (lowerKey == 'cr') key = '\\n';\n            else if (vimToCmKeyMap.hasOwnProperty(lowerKey)) {\n              // todo support codemirror keys in insertmode vimToCmKeyMap\n              key = vimToCmKeyMap[lowerKey];\n              sendCmKey(cm, key);\n              continue;\n            } else {\n              key = key[0];\n              keyRe.lastIndex = match.index + 1;\n            }\n          }\n          cm.replaceSelection(key);\n        }\n      }\n    } finally {\n      keyToKeyStack.pop();\n      noremap = keyToKeyStack.length ? noremapBefore : false;\n      if (!keyToKeyStack.length && virtualPrompt) {\n        var promptOptions = virtualPrompt;\n        virtualPrompt = null;\n        showPrompt(cm, promptOptions);\n      }\n    }\n  }\n\n  /**@type{Record<string, string>} */\n  var specialKey = {\n    Return: 'CR', Backspace: 'BS', 'Delete': 'Del', Escape: 'Esc', Insert: 'Ins',\n    ArrowLeft: 'Left', ArrowRight: 'Right', ArrowUp: 'Up', ArrowDown: 'Down',\n    Enter: 'CR', ' ': 'Space'\n  };\n  var ignoredKeys = { Shift: 1, Alt: 1, Command: 1, Control: 1,\n    CapsLock: 1, AltGraph: 1, Dead: 1, Unidentified: 1 };\n\n  var vimToCmKeyMap = {};\n  'Left|Right|Up|Down|End|Home'.split('|').concat(Object.keys(specialKey)).forEach(function(x) {\n    vimToCmKeyMap[(specialKey[x] || '').toLowerCase()]\n        = vimToCmKeyMap[x.toLowerCase()] = x;\n  });\n\n  /**\n   * @param {KeyboardEvent} e\n   * @param {vimState} [vim]\n   */\n  function vimKeyFromEvent(e, vim) {\n    var key = e.key;\n    if (ignoredKeys[key]) return;\n    if (key.length > 1 && key[0] == \"n\") {\n      key = key.replace(\"Numpad\", \"\");\n    }\n    key = specialKey[key] || key;\n\n    var name = '';\n    if (e.ctrlKey) { name += 'C-'; }\n    if (e.altKey) { name += 'A-'; }\n    if (e.metaKey) { name += 'M-'; }\n    // on mac many characters are entered as option- combos\n    // (e.g. on swiss keyboard { is option-8)\n    // so we ignore lonely A- modifier for keypress event on mac\n    if (CM.isMac && name == \"A-\" && key.length == 1) {\n      name = name.slice(2);\n    }\n    if ((name || key.length > 1) && e.shiftKey) { name += 'S-'; }\n\n    if (vim && !vim.expectLiteralNext && key.length == 1) {\n      if (langmap.keymap && key in langmap.keymap) {\n        if (langmap.remapCtrl != false || !name)\n          key = langmap.keymap[key];\n      } else if (key.charCodeAt(0) > 128) {\n        if (!usedKeys[key]) {\n          var code = e.code?.slice(-1) || \"\";\n          if (!e.shiftKey) code = code.toLowerCase();\n          if (code) {\n            key = code;\n            // also restore A- for mac\n            if (!name && e.altKey) name = 'A-';\n          }\n        }\n      }\n    }\n\n    name += key;\n    if (name.length > 1) { name = '<' + name + '>'; }\n    return name;\n  }\n  // langmap support\n  function updateLangmap(langmapString, remapCtrl) {\n    if (langmap.string !== langmapString) {\n      langmap = parseLangmap(langmapString);\n    }\n    langmap.remapCtrl = remapCtrl;\n  }\n  /** \n   *  From :help langmap\n   *  The 'langmap' option is a list of parts, separated with commas.  Each\n   *      part can be in one of two forms:\n   *      1.  A list of pairs.  Each pair is a \"from\" character immediately\n   *          followed by the \"to\" character.  Examples: \"aA\", \"aAbBcC\".\n   *      2.  A list of \"from\" characters, a semi-colon and a list of \"to\"\n   *          characters.  Example: \"abc;ABC\"\n   * @arg {string} langmapString\n   * @returns {{string: string, keymap: Record<string, string>, remapCtrl?: boolean}}\n   */\n  function parseLangmap(langmapString) {\n    let keymap = ({})/**@type {Record<string, string>}*/;\n    if (!langmapString) return { keymap: keymap, string: '' };\n\n    /** @arg {string} list */\n    function getEscaped(list) {\n      return list.split(/\\\\?(.)/).filter(Boolean);\n    }\n    langmapString.split(/((?:[^\\\\,]|\\\\.)+),/).map(part => {\n      if (!part) return;\n      const semicolon = part.split(/((?:[^\\\\;]|\\\\.)+);/);\n      if (semicolon.length == 3) {\n        const from = getEscaped(semicolon[1]);\n        const to = getEscaped(semicolon[2]);\n        if (from.length !== to.length) return; // skip over malformed part\n        for (let i = 0; i < from.length; ++i) keymap[from[i]] = to[i];\n      } else if (semicolon.length == 1) {\n        const pairs = getEscaped(part);\n        if (pairs.length % 2 !== 0) return; // skip over malformed part\n        for (let i = 0; i < pairs.length; i += 2) keymap[pairs[i]] = pairs[i + 1];\n      }\n    });\n\n    return { keymap: keymap, string: langmapString };\n  }\n\n  defineOption('langmap', undefined, 'string', ['lmap'], function(name, cm) {\n    // The 'filetype' option proxies to the CodeMirror 'mode' option.\n    if (name === undefined) {\n      return langmap.string;\n    } else {\n      updateLangmap(name);\n    }\n  });\n\n  // Represents the current input state.\n  /**@implements {InputStateInterface} */\n  class InputState {\n    constructor() {\n      /**@type{InputStateInterface[\"prefixRepeat\"]} */\n      this.prefixRepeat = [];\n      /**@type{InputStateInterface[\"motionRepeat\"]} */\n      this.motionRepeat = [];\n      /**@type{InputStateInterface[\"operator\"]} */\n      this.operator = null;\n      /**@type{InputStateInterface[\"operatorArgs\"]} */\n      this.operatorArgs = null;\n      /**@type{InputStateInterface[\"motion\"]} */\n      this.motion = null;\n      /**@type{InputStateInterface[\"motionArgs\"]} */\n      this.motionArgs = null;\n      /**@type{InputStateInterface[\"keyBuffer\"]} */\n      this.keyBuffer = []; // For matching multi-key commands.\n      /**@type{InputStateInterface[\"registerName\"]} */\n      this.registerName = undefined; // Defaults to the unnamed register.\n      /**@type{InputStateInterface[\"changeQueue\"]} */\n      this.changeQueue = null; // For restoring text used by insert mode keybindings\n    }\n    /** @param {string} n */\n    pushRepeatDigit(n) {\n      if (!this.operator) {\n        this.prefixRepeat = this.prefixRepeat.concat(n);\n      } else {\n        this.motionRepeat = this.motionRepeat.concat(n);\n      }\n    }\n    getRepeat() {\n      var repeat = 0;\n      if (this.prefixRepeat.length > 0 || this.motionRepeat.length > 0) {\n        repeat = 1;\n        if (this.prefixRepeat.length > 0) {\n          repeat *= parseInt(this.prefixRepeat.join(''), 10);\n        }\n        if (this.motionRepeat.length > 0) {\n          repeat *= parseInt(this.motionRepeat.join(''), 10);\n        }\n      }\n      return repeat;\n    }\n  }\n\n  /** @arg {CodeMirrorV} cm  @arg {string} [reason] */\n  function clearInputState(cm, reason) {\n    cm.state.vim.inputState = new InputState();\n    cm.state.vim.expectLiteralNext = false;\n    CM.signal(cm, 'vim-command-done', reason);\n  }\n\n  function ChangeQueue() {\n    this.removed = [];\n    this.inserted = \"\";\n  }\n\n  /**\n   * Register stores information about copy and paste registers.  Besides\n   * text, a register must store whether it is linewise (i.e., when it is\n   * pasted, should it insert itself into a new line, or should the text be\n   * inserted at the cursor position.)\n   */\n  class Register {\n    /** @arg {string} [text] @arg {boolean} [linewise] @arg {boolean } [blockwise] */\n    constructor(text, linewise, blockwise) {\n      this.clear();\n      this.keyBuffer = [text || ''];\n      /** @type {InsertModeChanges[]} */\n      this.insertModeChanges = [];\n      /** @type {string[]}*/\n      this.searchQueries = [];\n      this.linewise = !!linewise;\n      this.blockwise = !!blockwise;\n    }\n    /** @arg {string} [text] @arg {boolean} [linewise] @arg {boolean } [blockwise] */\n    setText(text, linewise, blockwise) {\n      this.keyBuffer = [text || ''];\n      this.linewise = !!linewise;\n      this.blockwise = !!blockwise;\n    }\n    /** @arg {string} text @arg {boolean} [linewise] */\n    pushText(text, linewise) {\n      // if this register has ever been set to linewise, use linewise.\n      if (linewise) {\n        if (!this.linewise) {\n          this.keyBuffer.push('\\n');\n        }\n        this.linewise = true;\n      }\n      this.keyBuffer.push(text);\n    }\n    /** @arg {InsertModeChanges} changes */\n    pushInsertModeChanges(changes) {\n      this.insertModeChanges.push(createInsertModeChanges(changes));\n    }\n    /** @arg {string} query */\n    pushSearchQuery(query) {\n      this.searchQueries.push(query);\n    }\n    clear() {\n      this.keyBuffer = [];\n      this.insertModeChanges = [];\n      this.searchQueries = [];\n      this.linewise = false;\n    }\n    toString() {\n      return this.keyBuffer.join('');\n    }\n  }\n\n  /**\n   * Defines an external register.\n   *\n   * The name should be a single character that will be used to reference the register.\n   * The register should support setText, pushText, clear, and toString(). See Register\n   * for a reference implementation.\n   * @arg {string} name\n   * @arg {Register} register\n   */\n  function defineRegister(name, register) {\n    var registers = vimGlobalState.registerController.registers;\n    if (!name || name.length != 1) {\n      throw Error('Register name must be 1 character');\n    }\n    if (registers[name]) {\n      throw Error('Register already defined ' + name);\n    }\n    registers[name] = register;\n    validRegisters.push(name);\n  }\n\n  /**\n   * vim registers allow you to keep many independent copy and paste buffers.\n   * See http://usevim.com/2012/04/13/registers/ for an introduction.\n   *\n   * RegisterController keeps the state of all the registers.  An initial\n   * state may be passed in.  The unnamed register '\"' will always be\n   * overridden.\n   */\n  class RegisterController {\n    /** @arg {Object<string, Register>} registers */\n    constructor(registers) {\n      this.registers = registers;\n      this.unnamedRegister = registers['\"'] = new Register();\n      registers['.'] = new Register();\n      registers[':'] = new Register();\n      registers['/'] = new Register();\n      registers['+'] = new Register();\n    }\n    /**\n     * @param {string | null | undefined} registerName\n     * @param {string} operator\n     * @param {string} text\n     * @param {boolean} [linewise]\n     * @param {boolean} [blockwise]\n     */\n    pushText(registerName, operator, text, linewise, blockwise) {\n      // The black hole register, \"_, means delete/yank to nowhere.\n      if (registerName === '_') return;\n      if (linewise && text.charAt(text.length - 1) !== '\\n') {\n        text += '\\n';\n      }\n      // Lowercase and uppercase registers refer to the same register.\n      // Uppercase just means append.\n      var register = this.isValidRegister(registerName) ?\n          this.getRegister(registerName) : null;\n      // if no register/an invalid register was specified, things go to the\n      // default registers\n      if (!register || !registerName) {\n        switch (operator) {\n          case 'yank':\n            // The 0 register contains the text from the most recent yank.\n            this.registers['0'] = new Register(text, linewise, blockwise);\n            break;\n          case 'delete':\n          case 'change':\n            if (text.indexOf('\\n') == -1) {\n              // Delete less than 1 line. Update the small delete register.\n              this.registers['-'] = new Register(text, linewise);\n            } else {\n              // Shift down the contents of the numbered registers and put the\n              // deleted text into register 1.\n              this.shiftNumericRegisters_();\n              this.registers['1'] = new Register(text, linewise);\n            }\n            break;\n        }\n        // Make sure the unnamed register is set to what just happened\n        this.unnamedRegister.setText(text, linewise, blockwise);\n        return;\n      }\n\n      // If we've gotten to this point, we've actually specified a register\n      var append = isUpperCase(registerName);\n      if (append) {\n        register.pushText(text, linewise);\n      } else {\n        register.setText(text, linewise, blockwise);\n      }\n      if (registerName === '+') {\n        navigator.clipboard.writeText(text);\n      }\n      // The unnamed register always has the same value as the last used\n      // register.\n      this.unnamedRegister.setText(register.toString(), linewise);\n    }\n    /**\n     * Gets the register named @name.  If one of @name doesn't already exist,\n     * create it.  If @name is invalid, return the unnamedRegister.\n     * @arg {string} [name]\n     */\n    getRegister(name) {\n      if (!this.isValidRegister(name)) {\n        return this.unnamedRegister;\n      }\n      name = name.toLowerCase();\n      if (!this.registers[name]) {\n        this.registers[name] = new Register();\n      }\n      return this.registers[name];\n    }\n    /**@type {{(name: any): name is string}} */\n    isValidRegister(name) {\n      return name && (inArray(name, validRegisters) || latinCharRegex.test(name));\n    }\n    shiftNumericRegisters_() {\n      for (var i = 9; i >= 2; i--) {\n        this.registers[i] = this.getRegister('' + (i - 1));\n      }\n    }\n  }\n  class HistoryController {\n    constructor() {\n      /**@type {string[]} */\n      this.historyBuffer = [];\n      this.iterator = 0;\n      this.initialPrefix = null;\n    }\n    /**\n     * the input argument here acts a user entered prefix for a small time\n     * until we start autocompletion in which case it is the autocompleted.\n     * @arg {string} input\n     * @arg {boolean} up\n     */\n    nextMatch(input, up) {\n      var historyBuffer = this.historyBuffer;\n      var dir = up ? -1 : 1;\n      if (this.initialPrefix === null) this.initialPrefix = input;\n      for (var i = this.iterator + dir; up ? i >= 0 : i < historyBuffer.length; i += dir) {\n        var element = historyBuffer[i];\n        for (var j = 0; j <= element.length; j++) {\n          if (this.initialPrefix == element.substring(0, j)) {\n            this.iterator = i;\n            return element;\n          }\n        }\n      }\n      // should return the user input in case we reach the end of buffer.\n      if (i >= historyBuffer.length) {\n        this.iterator = historyBuffer.length;\n        return this.initialPrefix;\n      }\n      // return the last autocompleted query or exCommand as it is.\n      if (i < 0) return input;\n    }\n    /** @arg {string} input */\n    pushInput(input) {\n      var index = this.historyBuffer.indexOf(input);\n      if (index > -1) this.historyBuffer.splice(index, 1);\n      if (input.length) this.historyBuffer.push(input);\n    }\n    reset() {\n      this.initialPrefix = null;\n      this.iterator = this.historyBuffer.length;\n    }\n  }\n  var commandDispatcher = {\n    /**\n     * @param {string} keys\n     * @param {vimKey[]} keyMap\n     * @param {InputStateInterface} inputState\n     * @param {string} context\n     */\n    matchCommand: function(keys, keyMap, inputState, context) {\n      var matches = commandMatches(keys, keyMap, context, inputState);\n      var bestMatch = matches.full[0];\n      if (!bestMatch) {\n        if (matches.partial.length) {\n          return {\n            type: 'partial',\n            expectLiteralNext: matches.partial.length == 1 && matches.partial[0].keys.slice(-11) == '<character>' // langmap literal logic\n          };\n        }\n        return {type: 'none'};\n      }\n      if (bestMatch.keys.slice(-11) == '<character>' || bestMatch.keys.slice(-10) == '<register>') {\n        var character = lastChar(keys);\n        if (!character || character.length > 1) return {type: 'clear'};\n        inputState.selectedCharacter = character;\n      }\n      return {type: 'full', command: bestMatch};\n    },\n    /**\n     * @arg {CodeMirrorV} cm\n     * @arg {vimState} vim\n     * @arg {vimKey} command\n     */\n    processCommand: function(cm, vim, command) {\n      vim.inputState.repeatOverride = command.repeatOverride;\n      switch (command.type) {\n        case 'motion':\n          this.processMotion(cm, vim, command);\n          break;\n        case 'operator':\n          this.processOperator(cm, vim, command);\n          break;\n        case 'operatorMotion':\n          this.processOperatorMotion(cm, vim, command);\n          break;\n        case 'action':\n          this.processAction(cm, vim, command);\n          break;\n        case 'search':\n          this.processSearch(cm, vim, command);\n          break;\n        case 'ex':\n        case 'keyToEx':\n          this.processEx(cm, vim, command);\n          break;\n      }\n    },\n    /**\n     * @arg {CodeMirrorV} cm\n     * @arg {vimState} vim\n     * @arg {import(\"./types\").motionCommand|import(\"./types\").operatorMotionCommand} command\n     */\n    processMotion: function(cm, vim, command) {\n      vim.inputState.motion = command.motion;\n      vim.inputState.motionArgs = /**@type {MotionArgs}*/(copyArgs(command.motionArgs));\n      this.evalInput(cm, vim);\n    },\n    /**\n     * @arg {CodeMirrorV} cm\n     * @arg {vimState} vim\n     * @arg {import(\"./types\").operatorCommand|import(\"./types\").operatorMotionCommand} command\n     */\n    processOperator: function(cm, vim, command) {\n      var inputState = vim.inputState;\n      if (inputState.operator) {\n        if (inputState.operator == command.operator) {\n          // Typing an operator twice like 'dd' makes the operator operate\n          // linewise\n          inputState.motion = 'expandToLine';\n          inputState.motionArgs = { linewise: true, repeat: 1 };\n          this.evalInput(cm, vim);\n          return;\n        } else {\n          // 2 different operators in a row doesn't make sense.\n          clearInputState(cm);\n        }\n      }\n      inputState.operator = command.operator;\n      inputState.operatorArgs = copyArgs(command.operatorArgs);\n      if (command.keys.length > 1) {\n        inputState.operatorShortcut = command.keys;\n      }\n      if (command.exitVisualBlock) {\n          vim.visualBlock = false;\n          updateCmSelection(cm);\n      }\n      if (vim.visualMode) {\n        // Operating on a selection in visual mode. We don't need a motion.\n        this.evalInput(cm, vim);\n      }\n    },\n    /**\n     * @arg {CodeMirrorV} cm\n     * @arg {vimState} vim\n     * @arg {import(\"./types\").operatorMotionCommand} command\n     */\n    processOperatorMotion: function(cm, vim, command) {\n      var visualMode = vim.visualMode;\n      var operatorMotionArgs = copyArgs(command.operatorMotionArgs);\n      if (operatorMotionArgs) {\n        // Operator motions may have special behavior in visual mode.\n        if (visualMode && operatorMotionArgs.visualLine) {\n          vim.visualLine = true;\n        }\n      }\n      this.processOperator(cm, vim, command);\n      if (!visualMode) {\n        this.processMotion(cm, vim, command);\n      }\n    },\n    /**\n     * @arg {CodeMirrorV} cm\n     * @arg {vimState} vim\n     * @arg {import(\"./types\").actionCommand} command\n     */\n    processAction: function(cm, vim, command) {\n      var inputState = vim.inputState;\n      var repeat = inputState.getRepeat();\n      var repeatIsExplicit = !!repeat;\n      var actionArgs = /**@type {ActionArgs}*/(copyArgs(command.actionArgs) || {repeat: 1});\n      if (inputState.selectedCharacter) {\n        actionArgs.selectedCharacter = inputState.selectedCharacter;\n      }\n      // Actions may or may not have motions and operators. Do these first.\n      if (command.operator) {\n        // @ts-ignore\n        this.processOperator(cm, vim, command);\n      }\n      if (command.motion) {\n        // @ts-ignore\n        this.processMotion(cm, vim, command);\n      }\n      if (command.motion || command.operator) {\n        this.evalInput(cm, vim);\n      }\n      actionArgs.repeat = repeat || 1;\n      actionArgs.repeatIsExplicit = repeatIsExplicit;\n      actionArgs.registerName = inputState.registerName;\n      clearInputState(cm);\n      vim.lastMotion = null;\n      if (command.isEdit) {\n        this.recordLastEdit(vim, inputState, command);\n      }\n      actions[command.action](cm, actionArgs, vim);\n    },\n    /** @arg {CodeMirrorV} cm @arg {vimState} vim @arg {import(\"./types\").searchCommand} command*/\n    processSearch: function(cm, vim, command) {\n      if (!cm.getSearchCursor) {\n        // Search depends on SearchCursor.\n        return;\n      }\n      var forward = command.searchArgs.forward;\n      var wholeWordOnly = command.searchArgs.wholeWordOnly;\n      getSearchState(cm).setReversed(!forward);\n      var promptPrefix = (forward) ? '/' : '?';\n      var originalQuery = getSearchState(cm).getQuery();\n      var originalScrollPos = cm.getScrollInfo();\n      var lastQuery = \"\";\n      /** @arg {string} query  @arg {boolean} ignoreCase  @arg {boolean} smartCase */\n      function handleQuery(query, ignoreCase, smartCase) {\n        vimGlobalState.searchHistoryController.pushInput(query);\n        vimGlobalState.searchHistoryController.reset();\n        try {\n          updateSearchQuery(cm, query, ignoreCase, smartCase);\n        } catch (e) {\n          showConfirm(cm, 'Invalid regex: ' + query);\n          clearInputState(cm);\n          return;\n        }\n        commandDispatcher.processMotion(cm, vim, {\n          keys: '',\n          type: 'motion',\n          motion: 'findNext',\n          motionArgs: { forward: true, toJumplist: command.searchArgs.toJumplist }\n        });\n      }\n      /** @arg {string} query */\n      function onPromptClose(query) {\n        cm.scrollTo(originalScrollPos.left, originalScrollPos.top);\n        handleQuery(query, true /** ignoreCase */, true /** smartCase */);\n        var macroModeState = vimGlobalState.macroModeState;\n        if (macroModeState.isRecording) {\n          logSearchQuery(macroModeState, query);\n        }\n      }\n      function pcreLabel() {\n        return getOption('pcre') ? '(JavaScript regexp: set pcre)' : '(Vim regexp: set nopcre)'\n      }\n      /** \n       * @arg {KeyboardEvent&{target:HTMLInputElement}} e \n       * @arg {any} query \n       * @arg {(arg0: any) => void} close \n       */\n      function onPromptKeyUp(e, query, close) {\n        var keyName = vimKeyFromEvent(e), up, offset;\n        if (keyName == '<Up>' || keyName == '<Down>') {\n          up = keyName == '<Up>' ? true : false;\n          offset = e.target ? e.target.selectionEnd : 0;\n          query = vimGlobalState.searchHistoryController.nextMatch(query, up) || '';\n          close(query);\n          if (offset && e.target) e.target.selectionEnd = e.target.selectionStart = Math.min(offset, e.target.value.length);\n        } else if (keyName && keyName != '<Left>' && keyName != '<Right>') {\n          vimGlobalState.searchHistoryController.reset();\n        }\n        lastQuery = query;\n        onChange();\n      }\n      function onChange() {\n        var parsedQuery;\n        try {\n          parsedQuery = updateSearchQuery(cm, lastQuery,\n              true /** ignoreCase */, true /** smartCase */);\n        } catch (e) {\n          // Swallow bad regexes for incremental search.\n        }\n        if (parsedQuery) {\n          cm.scrollIntoView(findNext(cm, !forward, parsedQuery), 30);\n        } else {\n          clearSearchHighlight(cm);\n          cm.scrollTo(originalScrollPos.left, originalScrollPos.top);\n        }\n      }\n      /** @arg {KeyboardEvent} e  @arg {string} query  @arg {(arg0?: string) => void} close */\n      function onPromptKeyDown(e, query, close) {\n        var keyName = vimKeyFromEvent(e);\n        if (keyName == '<Esc>' || keyName == '<C-c>' || keyName == '<C-[>' ||\n            (keyName == '<BS>' && query == '')) {\n          vimGlobalState.searchHistoryController.pushInput(query);\n          vimGlobalState.searchHistoryController.reset();\n          updateSearchQuery(cm, originalQuery?.source || \"\");\n          clearSearchHighlight(cm);\n          cm.scrollTo(originalScrollPos.left, originalScrollPos.top);\n          CM.e_stop(e);\n          clearInputState(cm);\n          close();\n          cm.focus();\n        } else if (keyName == '<Up>' || keyName == '<Down>') {\n          CM.e_stop(e);\n        } else if (keyName == '<C-u>') {\n          // Ctrl-U clears input.\n          CM.e_stop(e);\n          close('');\n        }\n      }\n      switch (command.searchArgs.querySrc) {\n        case 'prompt':\n          var macroModeState = vimGlobalState.macroModeState;\n          if (macroModeState.isPlaying) {\n            let query = macroModeState.replaySearchQueries.shift();\n            handleQuery(query || '', true /** ignoreCase */, false /** smartCase */);\n          } else {\n            showPrompt(cm, {\n                onClose: onPromptClose,\n                prefix: promptPrefix,\n                desc: dom(\n                  'span',\n                  {\n                    $cursor: 'pointer', \n                    onmousedown: function(/** @type {MouseEvent} */ e) {\n                      e.preventDefault();\n                      setOption('pcre', !getOption('pcre'));\n                      this.textContent = pcreLabel();\n                      onChange();\n                    }\n                  },\n                  pcreLabel()\n                ),  \n                onKeyUp: onPromptKeyUp,\n                onKeyDown: onPromptKeyDown\n            });\n          }\n          break;\n        case 'wordUnderCursor':\n          var word = expandWordUnderCursor(cm, {noSymbol: true});\n          var isKeyword = true;\n          if (!word) {\n            word = expandWordUnderCursor(cm, {noSymbol: false});\n            isKeyword = false;\n          }\n          if (!word) {\n            showConfirm(cm, 'No word under cursor');\n            clearInputState(cm);\n            return;\n          }\n          let query = cm.getLine(word.start.line).substring(word.start.ch,\n              word.end.ch);\n          if (isKeyword && wholeWordOnly) {\n              query = '\\\\b' + query + '\\\\b';\n          } else {\n            query = escapeRegex(query);\n          }\n\n          // cachedCursor is used to save the old position of the cursor\n          // when * or # causes vim to seek for the nearest word and shift\n          // the cursor before entering the motion.\n          vimGlobalState.jumpList.cachedCursor = cm.getCursor();\n          cm.setCursor(word.start);\n\n          handleQuery(query, true /** ignoreCase */, false /** smartCase */);\n          break;\n      }\n    },\n    /**\n     * @arg {CodeMirrorV} cm\n     * @arg {vimState} vim\n     * @arg {import(\"./types\").exCommand | import(\"./types\").keyToExCommand} command\n     */\n    processEx: function(cm, vim, command) {\n      /**@arg {string} input*/\n      function onPromptClose(input) {\n        // Give the prompt some time to close so that if processCommand shows\n        // an error, the elements don't overlap.\n        vimGlobalState.exCommandHistoryController.pushInput(input);\n        vimGlobalState.exCommandHistoryController.reset();\n        exCommandDispatcher.processCommand(cm, input);\n        if (cm.state.vim) clearInputState(cm);\n        clearSearchHighlight(cm);\n      }\n      /**\n       * @arg {KeyboardEvent&{target:HTMLInputElement}} e\n       * @arg {string} input\n       * @arg {(arg0?: string) => void} close\n       */\n      function onPromptKeyDown(e, input, close) {\n        var keyName = vimKeyFromEvent(e), up, offset;\n        if (keyName == '<Esc>' || keyName == '<C-c>' || keyName == '<C-[>' ||\n            (keyName == '<BS>' && input == '')) {\n          vimGlobalState.exCommandHistoryController.pushInput(input);\n          vimGlobalState.exCommandHistoryController.reset();\n          CM.e_stop(e);\n          clearInputState(cm);\n          clearSearchHighlight(cm);\n          close();\n          cm.focus();\n        }\n        if (keyName == '<Up>' || keyName == '<Down>') {\n          CM.e_stop(e);\n          up = keyName == '<Up>' ? true : false;\n          offset = e.target ? e.target.selectionEnd : 0;\n          input = vimGlobalState.exCommandHistoryController.nextMatch(input, up) || '';\n          close(input);\n          if (offset && e.target) e.target.selectionEnd = e.target.selectionStart = Math.min(offset, e.target.value.length);\n        } else if (keyName == '<C-u>') {\n          // Ctrl-U clears input.\n          CM.e_stop(e);\n          close('');\n        } else if (keyName && keyName != '<Left>' && keyName != '<Right>') {\n            vimGlobalState.exCommandHistoryController.reset();\n        }\n      }\n      /**\n       * @arg {KeyboardEvent&{target:HTMLInputElement}} e\n       * @arg {any} query\n       */\n      function onPromptKeyUp(e, query) {\n        var inputStream = new CM.StringStream(query);\n        var params = /**@type{import(\"./types\").exCommandArgs}*/({});\n        try {\n          exCommandDispatcher.parseInput_(cm, inputStream, params);\n          if (params.commandName != \"s\") {\n            clearSearchHighlight(cm);\n            return;\n          }\n          var command = exCommandDispatcher.matchCommand_(params.commandName);\n          if (!command) return;\n          exCommandDispatcher.parseCommandArgs_(inputStream, params, command);\n          if (!params.argString) return;\n          var regex = parseQuery(params.argString.slice(1), true, true);\n          if (regex) highlightSearchMatches(cm, regex);\n        } catch(e) {\n        }\n      }\n      if (command.type == 'keyToEx') {\n        // Handle user defined Ex to Ex mappings\n        exCommandDispatcher.processCommand(cm, command.exArgs.input);\n      } else {\n        /**@type{import(\"./types\").PromptOptions} */\n        var promptOptions = {\n          onClose: onPromptClose,\n          onKeyDown: onPromptKeyDown,\n          onKeyUp: onPromptKeyUp,\n          prefix: ':',\n        };\n        if (vim.visualMode) {\n          promptOptions.value = '\\'<,\\'>';\n          promptOptions.selectValueOnOpen = false;\n        }\n        showPrompt(cm, promptOptions);\n      }\n    },\n    /**@arg {CodeMirrorV} cm   @arg {vimState} vim */\n    evalInput: function(cm, vim) {\n      // If the motion command is set, execute both the operator and motion.\n      // Otherwise return.\n      var inputState = vim.inputState;\n      var motion = inputState.motion;\n      /** @type {MotionArgs}*/\n      var motionArgs = inputState.motionArgs || { repeat: 1};\n      var operator = inputState.operator;\n      /** @type {OperatorArgs}*/\n      var operatorArgs = inputState.operatorArgs || {};\n      var registerName = inputState.registerName;\n      var sel = vim.sel;\n      // TODO: Make sure cm and vim selections are identical outside visual mode.\n      var origHead = copyCursor(vim.visualMode ? clipCursorToContent(cm, sel.head): cm.getCursor('head'));\n      var origAnchor = copyCursor(vim.visualMode ? clipCursorToContent(cm, sel.anchor) : cm.getCursor('anchor'));\n      var oldHead = copyCursor(origHead);\n      var oldAnchor = copyCursor(origAnchor);\n      var newHead, newAnchor;\n      var repeat;\n      if (operator) {\n        this.recordLastEdit(vim, inputState);\n      }\n      if (inputState.repeatOverride !== undefined) {\n        // If repeatOverride is specified, that takes precedence over the\n        // input state's repeat. Used by Ex mode and can be user defined.\n        repeat = inputState.repeatOverride;\n      } else {\n        repeat = inputState.getRepeat();\n      }\n      if (repeat > 0 && motionArgs.explicitRepeat) {\n        motionArgs.repeatIsExplicit = true;\n      } else if (motionArgs.noRepeat ||\n          (!motionArgs.explicitRepeat && repeat === 0)) {\n        repeat = 1;\n        motionArgs.repeatIsExplicit = false;\n      }\n      if (inputState.selectedCharacter) {\n        // If there is a character input, stick it in all of the arg arrays.\n        motionArgs.selectedCharacter = operatorArgs.selectedCharacter =\n            inputState.selectedCharacter;\n      }\n      motionArgs.repeat = repeat;\n      clearInputState(cm);\n      if (motion) {\n        var motionResult = motions[motion](cm, origHead, motionArgs, vim, inputState);\n        vim.lastMotion = motions[motion];\n        if (!motionResult) {\n          return;\n        }\n        if (motionArgs.toJumplist) {\n          var jumpList = vimGlobalState.jumpList;\n          // if the current motion is # or *, use cachedCursor\n          var cachedCursor = jumpList.cachedCursor;\n          if (cachedCursor) {\n            // @ts-ignore\n            recordJumpPosition(cm, cachedCursor, motionResult);\n            delete jumpList.cachedCursor;\n          } else {\n            // @ts-ignore\n            recordJumpPosition(cm, origHead, motionResult);\n          }\n        }\n        if (motionResult instanceof Array) {\n          newAnchor = motionResult[0];\n          newHead = motionResult[1];\n        } else {\n          newHead = motionResult;\n        }\n        // TODO: Handle null returns from motion commands better.\n        if (!newHead) {\n          newHead = copyCursor(origHead);\n        }\n        if (vim.visualMode) {\n          if (!(vim.visualBlock && newHead.ch === Infinity)) {\n            newHead = clipCursorToContent(cm, newHead, oldHead);\n          }\n          if (newAnchor) {\n            newAnchor = clipCursorToContent(cm, newAnchor);\n          }\n          newAnchor = newAnchor || oldAnchor;\n          sel.anchor = newAnchor;\n          sel.head = newHead;\n          updateCmSelection(cm);\n          updateMark(cm, vim, '<',\n              cursorIsBefore(newAnchor, newHead) ? newAnchor\n                  : newHead);\n          updateMark(cm, vim, '>',\n              cursorIsBefore(newAnchor, newHead) ? newHead\n                  : newAnchor);\n        } else if (!operator) {\n          newHead = clipCursorToContent(cm, newHead, oldHead);\n          cm.setCursor(newHead.line, newHead.ch);\n        }\n      }\n      if (operator) {\n        if (operatorArgs.lastSel) {\n          // Replaying a visual mode operation\n          newAnchor = oldAnchor;\n          var lastSel = operatorArgs.lastSel;\n          var lineOffset = Math.abs(lastSel.head.line - lastSel.anchor.line);\n          var chOffset = Math.abs(lastSel.head.ch - lastSel.anchor.ch);\n          if (lastSel.visualLine) {\n            // Linewise Visual mode: The same number of lines.\n            newHead = new Pos(oldAnchor.line + lineOffset, oldAnchor.ch);\n          } else if (lastSel.visualBlock) {\n            // Blockwise Visual mode: The same number of lines and columns.\n            newHead = new Pos(oldAnchor.line + lineOffset, oldAnchor.ch + chOffset);\n          } else if (lastSel.head.line == lastSel.anchor.line) {\n            // Normal Visual mode within one line: The same number of characters.\n            newHead = new Pos(oldAnchor.line, oldAnchor.ch + chOffset);\n          } else {\n            // Normal Visual mode with several lines: The same number of lines, in the\n            // last line the same number of characters as in the last line the last time.\n            newHead = new Pos(oldAnchor.line + lineOffset, oldAnchor.ch);\n          }\n          vim.visualMode = true;\n          vim.visualLine = lastSel.visualLine;\n          vim.visualBlock = lastSel.visualBlock;\n          sel = vim.sel = {\n            anchor: newAnchor,\n            head: newHead\n          };\n          updateCmSelection(cm);\n        } else if (vim.visualMode) {\n          operatorArgs.lastSel = {\n            anchor: copyCursor(sel.anchor),\n            head: copyCursor(sel.head),\n            visualBlock: vim.visualBlock,\n            visualLine: vim.visualLine\n          };\n        }\n        var curStart, curEnd, linewise;\n        /** @type {'block'|'line'|'char'}*/ var mode;\n        var cmSel;\n        if (vim.visualMode) {\n          // Init visual op\n          curStart = cursorMin(sel.head, sel.anchor);\n          curEnd = cursorMax(sel.head, sel.anchor);\n          linewise = vim.visualLine || operatorArgs.linewise;\n          mode = vim.visualBlock ? 'block' :\n                  linewise ? 'line' :\n                  'char';\n          var newPositions = updateSelectionForSurrogateCharacters(cm, curStart, curEnd);\n          cmSel = makeCmSelection(cm, {\n            anchor: newPositions.start,\n            head: newPositions.end\n          }, mode);\n          if (linewise) {\n            var ranges = cmSel.ranges;\n            if (mode == 'block') {\n              // Linewise operators in visual block mode extend to end of line\n              for (var i = 0; i < ranges.length; i++) {\n                ranges[i].head.ch = lineLength(cm, ranges[i].head.line);\n              }\n            } else if (mode == 'line') {\n              ranges[0].head = new Pos(ranges[0].head.line + 1, 0);\n            }\n          }\n        } else {\n          // Init motion op\n          curStart = copyCursor(newAnchor || oldAnchor);\n          curEnd = copyCursor(newHead || oldHead);\n          if (cursorIsBefore(curEnd, curStart)) {\n            var tmp = curStart;\n            curStart = curEnd;\n            curEnd = tmp;\n          }\n          linewise = motionArgs.linewise || operatorArgs.linewise;\n          if (linewise) {\n            // Expand selection to entire line.\n            expandSelectionToLine(cm, curStart, curEnd);\n          } else if (motionArgs.forward) {\n            // Clip to trailing newlines only if the motion goes forward.\n            clipToLine(cm, curStart, curEnd);\n          }\n          mode = 'char';\n          var exclusive = !motionArgs.inclusive || linewise;\n          var newPositions = updateSelectionForSurrogateCharacters(cm, curStart, curEnd);\n          cmSel = makeCmSelection(cm, {\n            anchor: newPositions.start,\n            head: newPositions.end\n          }, mode, exclusive);\n        }\n        cm.setSelections(cmSel.ranges, cmSel.primary);\n        vim.lastMotion = null;\n        operatorArgs.repeat = repeat; // For indent in visual mode.\n        operatorArgs.registerName = registerName;\n        // Keep track of linewise as it affects how paste and change behave.\n        operatorArgs.linewise = linewise;\n        var operatorMoveTo = operators[operator](\n          cm, operatorArgs, cmSel.ranges, oldAnchor, newHead);\n        if (vim.visualMode) {\n          exitVisualMode(cm, operatorMoveTo != null);\n        }\n        if (operatorMoveTo) {\n          cm.setCursor(operatorMoveTo);\n        }\n      }\n    },\n    /**@arg {vimState} vim  @arg {InputStateInterface} inputState, @arg {import(\"./types\").actionCommand} [actionCommand] */\n    recordLastEdit: function(vim, inputState, actionCommand) {\n      var macroModeState = vimGlobalState.macroModeState;\n      if (macroModeState.isPlaying) { return; }\n      vim.lastEditInputState = inputState;\n      vim.lastEditActionCommand = actionCommand;\n      macroModeState.lastInsertModeChanges.changes = [];\n      macroModeState.lastInsertModeChanges.expectCursorActivityForChange = false;\n      macroModeState.lastInsertModeChanges.visualBlock = vim.visualBlock ? vim.sel.head.line - vim.sel.anchor.line : 0;\n    }\n  };\n\n  /**\n   * All of the functions below return Cursor objects.\n   * @type {import(\"./types\").vimMotions}}\n   */\n  var motions = {\n    moveToTopLine: function(cm, _head, motionArgs) {\n      var line = getUserVisibleLines(cm).top + motionArgs.repeat -1;\n      return new Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));\n    },\n    moveToMiddleLine: function(cm) {\n      var range = getUserVisibleLines(cm);\n      var line = Math.floor((range.top + range.bottom) * 0.5);\n      return new Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));\n    },\n    moveToBottomLine: function(cm, _head, motionArgs) {\n      var line = getUserVisibleLines(cm).bottom - motionArgs.repeat +1;\n      return new Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));\n    },\n    expandToLine: function(_cm, head, motionArgs) {\n      // Expands forward to end of line, and then to next line if repeat is\n      // >1. Does not handle backward motion!\n      var cur = head;\n      return new Pos(cur.line + motionArgs.repeat - 1, Infinity);\n    },\n    findNext: function(cm, _head, motionArgs) {\n      var state = getSearchState(cm);\n      var query = state.getQuery();\n      if (!query) {\n        return;\n      }\n      var prev = !motionArgs.forward;\n      // If search is initiated with ? instead of /, negate direction.\n      prev = (state.isReversed()) ? !prev : prev;\n      highlightSearchMatches(cm, query);\n      var result = findNext(cm, prev/** prev */, query, motionArgs.repeat);\n      if (!result) {\n        showConfirm(cm, 'No match found ' + query +\n          (getOption('pcre') ? ' (set nopcre to use Vim regexps)' : ''));\n      }\n      return result; \n    },\n    /**\n     * Find and select the next occurrence of the search query. If the cursor is currently\n     * within a match, then find and select the current match. Otherwise, find the next occurrence in the\n     * appropriate direction.\n     *\n     * This differs from `findNext` in the following ways:\n     *\n     * 1. Instead of only returning the \"from\", this returns a \"from\", \"to\" range.\n     * 2. If the cursor is currently inside a search match, this selects the current match\n     *    instead of the next match.\n     * 3. If there is no associated operator, this will turn on visual mode.\n     */\n    findAndSelectNextInclusive: function(cm, _head, motionArgs, vim, prevInputState) {\n      var state = getSearchState(cm);\n      var query = state.getQuery();\n\n      if (!query) {\n        return;\n      }\n\n      var prev = !motionArgs.forward;\n      prev = (state.isReversed()) ? !prev : prev;\n\n      // next: [from, to] | null\n      var next = findNextFromAndToInclusive(cm, prev, query, motionArgs.repeat, vim);\n\n      // No matches.\n      if (!next) {\n        return;\n      }\n\n      // If there's an operator that will be executed, return the selection.\n      if (prevInputState.operator) {\n        return next;\n      }\n\n      // At this point, we know that there is no accompanying operator -- let's\n      // deal with visual mode in order to select an appropriate match.\n\n      var from = next[0];\n      // For whatever reason, when we use the \"to\" as returned by searchcursor.js directly,\n      // the resulting selection is extended by 1 char. Let's shrink it so that only the\n      // match is selected.\n      var to = new Pos(next[1].line, next[1].ch - 1);\n\n      if (vim.visualMode) {\n        // If we were in visualLine or visualBlock mode, get out of it.\n        if (vim.visualLine || vim.visualBlock) {\n          vim.visualLine = false;\n          vim.visualBlock = false;\n          CM.signal(cm, \"vim-mode-change\", {mode: \"visual\", subMode: \"\"});\n        }\n\n        // If we're currently in visual mode, we should extend the selection to include\n        // the search result.\n        var anchor = vim.sel.anchor;\n        if (anchor) {\n          if (state.isReversed()) {\n            if (motionArgs.forward) {\n              return [anchor, from];\n            }\n\n            return [anchor, to];\n          } else {\n            if (motionArgs.forward) {\n              return [anchor, to];\n            }\n\n            return [anchor, from];\n          }\n        }\n      } else {\n        // Let's turn visual mode on.\n        vim.visualMode = true;\n        vim.visualLine = false;\n        vim.visualBlock = false;\n        CM.signal(cm, \"vim-mode-change\", {mode: \"visual\", subMode: \"\"});\n      }\n\n      return prev ? [to, from] : [from, to];\n    },\n    goToMark: function(cm, _head, motionArgs, vim) {\n      var pos = getMarkPos(cm, vim, motionArgs.selectedCharacter || \"\");\n      if (pos) {\n        return motionArgs.linewise ? { line: pos.line, ch: findFirstNonWhiteSpaceCharacter(cm.getLine(pos.line)) } : pos;\n      }\n      return null;\n    },\n    moveToOtherHighlightedEnd: function(cm, _head, motionArgs, vim) {\n      var sel = vim.sel;\n      if (vim.visualBlock && motionArgs.sameLine) {\n        return [\n          clipCursorToContent(cm, new Pos(sel.anchor.line, sel.head.ch)),\n          clipCursorToContent(cm, new Pos(sel.head.line, sel.anchor.ch))\n        ];\n      } else {\n        return ([sel.head, sel.anchor]);\n      }\n    },\n    jumpToMark: function(cm, head, motionArgs, vim) {\n      var best = head;\n      for (var i = 0; i < motionArgs.repeat; i++) {\n        var cursor = best;\n        for (var key in vim.marks) {\n          if (!isLowerCase(key)) {\n            continue;\n          }\n          var mark = vim.marks[key].find();\n          var isWrongDirection = (motionArgs.forward) ?\n            // @ts-ignore\n            cursorIsBefore(mark, cursor) : cursorIsBefore(cursor, mark);\n\n          if (isWrongDirection) {\n            continue;\n          }\n          // @ts-ignore\n          if (motionArgs.linewise && (mark.line == cursor.line)) {\n            continue;\n          }\n\n          var equal = cursorEqual(cursor, best);\n          var between = (motionArgs.forward) ?\n            // @ts-ignore\n            cursorIsBetween(cursor, mark, best) :\n            // @ts-ignore\n            cursorIsBetween(best, mark, cursor);\n\n          if (equal || between) {\n            // @ts-ignore\n            best = mark;\n          }\n        }\n      }\n\n      if (motionArgs.linewise) {\n        // Vim places the cursor on the first non-whitespace character of\n        // the line if there is one, else it places the cursor at the end\n        // of the line, regardless of whether a mark was found.\n        best = new Pos(best.line, findFirstNonWhiteSpaceCharacter(cm.getLine(best.line)));\n      }\n      return best;\n    },\n    moveByCharacters: function(_cm, head, motionArgs) {\n      var cur = head;\n      var repeat = motionArgs.repeat;\n      var ch = motionArgs.forward ? cur.ch + repeat : cur.ch - repeat;\n      return new Pos(cur.line, ch);\n    },\n    moveByLines: function(cm, head, motionArgs, vim) {\n      var cur = head;\n      var endCh = cur.ch;\n      // Depending what our last motion was, we may want to do different\n      // things. If our last motion was moving vertically, we want to\n      // preserve the HPos from our last horizontal move.  If our last motion\n      // was going to the end of a line, moving vertically we should go to\n      // the end of the line, etc.\n      switch (vim.lastMotion) {\n        case this.moveByLines:\n        case this.moveByDisplayLines:\n        case this.moveByScroll:\n        case this.moveToColumn:\n        case this.moveToEol:\n          endCh = vim.lastHPos;\n          break;\n        default:\n          vim.lastHPos = endCh;\n      }\n      var repeat = motionArgs.repeat+(motionArgs.repeatOffset||0);\n      var line = motionArgs.forward ? cur.line + repeat : cur.line - repeat;\n      var first = cm.firstLine();\n      var last = cm.lastLine();\n      var posV = cm.findPosV(cur, (motionArgs.forward ? repeat : -repeat), 'line', vim.lastHSPos);\n      var hasMarkedText = motionArgs.forward ? posV.line > line : posV.line < line;\n      if (hasMarkedText) {\n        line = posV.line;\n        endCh = posV.ch;\n      }\n      // Vim go to line begin or line end when cursor at first/last line and\n      // move to previous/next line is triggered.\n      if (line < first && cur.line == first){\n        return this.moveToStartOfLine(cm, head, motionArgs, vim);\n      } else if (line > last && cur.line == last){\n          return moveToEol(cm, head, motionArgs, vim, true);\n      }\n      if (motionArgs.toFirstChar){\n        endCh=findFirstNonWhiteSpaceCharacter(cm.getLine(line));\n        vim.lastHPos = endCh;\n      }\n      vim.lastHSPos = cm.charCoords(new Pos(line, endCh),'div').left;\n      return new Pos(line, endCh);\n    },\n    moveByDisplayLines: function(cm, head, motionArgs, vim) {\n      var cur = head;\n      switch (vim.lastMotion) {\n        case this.moveByDisplayLines:\n        case this.moveByScroll:\n        case this.moveByLines:\n        case this.moveToColumn:\n        case this.moveToEol:\n          break;\n        default:\n          vim.lastHSPos = cm.charCoords(cur,'div').left;\n      }\n      var repeat = motionArgs.repeat;\n      var res=cm.findPosV(cur,(motionArgs.forward ? repeat : -repeat),'line',vim.lastHSPos);\n      if (res.hitSide) {\n        if (motionArgs.forward) {\n          var lastCharCoords = cm.charCoords(res, 'div');\n          var goalCoords = { top: lastCharCoords.top + 8, left: vim.lastHSPos };\n          res = cm.coordsChar(goalCoords, 'div');\n        } else {\n          var resCoords = cm.charCoords(new Pos(cm.firstLine(), 0), 'div');\n          resCoords.left = vim.lastHSPos;\n          res = cm.coordsChar(resCoords, 'div');\n        }\n      }\n      vim.lastHPos = res.ch;\n      return res;\n    },\n    moveByPage: function(cm, head, motionArgs) {\n      // CodeMirror only exposes functions that move the cursor page down, so\n      // doing this bad hack to move the cursor and move it back. evalInput\n      // will move the cursor to where it should be in the end.\n      var curStart = head;\n      var repeat = motionArgs.repeat;\n      return cm.findPosV(curStart, (motionArgs.forward ? repeat : -repeat), 'page');\n    },\n    moveByParagraph: function(cm, head, motionArgs) {\n      var dir = motionArgs.forward ? 1 : -1;\n      return findParagraph(cm, head, motionArgs.repeat, dir).start;\n    },\n    moveBySentence: function(cm, head, motionArgs) {\n      var dir = motionArgs.forward ? 1 : -1;\n      return findSentence(cm, head, motionArgs.repeat, dir);\n    },\n    moveByScroll: function(cm, head, motionArgs, vim) {\n      var scrollbox = cm.getScrollInfo();\n      var curEnd = null;\n      var repeat = motionArgs.repeat;\n      if (!repeat) {\n        repeat = scrollbox.clientHeight / (2 * cm.defaultTextHeight());\n      }\n      var orig = cm.charCoords(head, 'local');\n      motionArgs.repeat = repeat;\n      curEnd = motions.moveByDisplayLines(cm, head, motionArgs, vim);\n      if (!curEnd) {\n        return null;\n      }\n      var dest = cm.charCoords(curEnd, 'local');\n      cm.scrollTo(null, scrollbox.top + dest.top - orig.top);\n      return curEnd;\n    },\n    moveByWords: function(cm, head, motionArgs) {\n      return moveToWord(cm, head, motionArgs.repeat, !!motionArgs.forward,\n          !!motionArgs.wordEnd, !!motionArgs.bigWord);\n    },\n    moveTillCharacter: function(cm, head, motionArgs) {\n      var repeat = motionArgs.repeat;\n      var curEnd = moveToCharacter(cm, repeat, motionArgs.forward,\n          motionArgs.selectedCharacter, head);\n      var increment = motionArgs.forward ? -1 : 1;\n      recordLastCharacterSearch(increment, motionArgs);\n      if (!curEnd) return null;\n      curEnd.ch += increment;\n      return curEnd;\n    },\n    moveToCharacter: function(cm, head, motionArgs) {\n      var repeat = motionArgs.repeat;\n      recordLastCharacterSearch(0, motionArgs);\n      return moveToCharacter(cm, repeat, motionArgs.forward,\n          motionArgs.selectedCharacter, head) || head;\n    },\n    moveToSymbol: function(cm, head, motionArgs) {\n      var repeat = motionArgs.repeat;\n      return motionArgs.selectedCharacter\n       && findSymbol(cm, repeat, motionArgs.forward,\n          motionArgs.selectedCharacter) || head;\n    },\n    moveToColumn: function(cm, head, motionArgs, vim) {\n      var repeat = motionArgs.repeat;\n      // repeat is equivalent to which column we want to move to!\n      vim.lastHPos = repeat - 1;\n      vim.lastHSPos = cm.charCoords(head,'div').left;\n      return moveToColumn(cm, repeat);\n    },\n    moveToEol: function(cm, head, motionArgs, vim) {\n      return moveToEol(cm, head, motionArgs, vim, false);\n    },\n    moveToFirstNonWhiteSpaceCharacter: function(cm, head) {\n      // Go to the start of the line where the text begins, or the end for\n      // whitespace-only lines\n      var cursor = head;\n      return new Pos(cursor.line,\n                  findFirstNonWhiteSpaceCharacter(cm.getLine(cursor.line)));\n    },\n    moveToMatchedSymbol: function(cm, head) {\n      var cursor = head;\n      var line = cursor.line;\n      var ch = cursor.ch;\n      var lineText = cm.getLine(line);\n      var symbol;\n      for (; ch < lineText.length; ch++) {\n        symbol = lineText.charAt(ch);\n        if (symbol && isMatchableSymbol(symbol)) {\n          var style = cm.getTokenTypeAt(new Pos(line, ch + 1));\n          if (style !== \"string\" && style !== \"comment\") {\n            break;\n          }\n        }\n      }\n      if (ch < lineText.length) {\n        // Only include angle brackets in analysis if they are being matched.\n        var re = (symbol === '<' || symbol === '>') ? /[(){}[\\]<>]/ : /[(){}[\\]]/;\n        var matched = cm.findMatchingBracket(new Pos(line, ch), {bracketRegex: re});\n        return matched.to;\n      } else {\n        return cursor;\n      }\n    },\n    moveToStartOfLine: function(_cm, head) {\n      return new Pos(head.line, 0);\n    },\n    moveToLineOrEdgeOfDocument: function(cm, _head, motionArgs) {\n      var lineNum = motionArgs.forward ? cm.lastLine() : cm.firstLine();\n      if (motionArgs.repeatIsExplicit) {\n        lineNum = motionArgs.repeat - cm.getOption('firstLineNumber');\n      }\n      return new Pos(lineNum,\n                  findFirstNonWhiteSpaceCharacter(cm.getLine(lineNum)));\n    },\n    moveToStartOfDisplayLine: function(cm) {\n      cm.execCommand(\"goLineLeft\");\n      return cm.getCursor();\n    },\n    moveToEndOfDisplayLine: function(cm) {\n      cm.execCommand(\"goLineRight\");\n      var head = cm.getCursor();\n      if (head.sticky == \"before\") head.ch--;\n      return head;\n    },\n    textObjectManipulation: function(cm, head, motionArgs, vim) {\n      // TODO: lots of possible exceptions that can be thrown here. Try da(\n      //     outside of a () block.\n      /** @type{Object<string, string>} */\n      var mirroredPairs = {'(': ')', ')': '(',\n                            '{': '}', '}': '{',\n                            '[': ']', ']': '[',\n                            '<': '>', '>': '<'};\n      /** @type{Object<string, boolean>} */\n      var selfPaired = {'\\'': true, '\"': true, '`': true};\n\n      var character = motionArgs.selectedCharacter || \"\";\n      // 'b' refers to  '()' block.\n      // 'B' refers to  '{}' block.\n      if (character == 'b') {\n        character = '(';\n      } else if (character == 'B') {\n        character = '{';\n      }\n\n      // Inclusive is the difference between a and i\n      // TODO: Instead of using the additional text object map to perform text\n      //     object operations, merge the map into the defaultKeyMap and use\n      //     motionArgs to define behavior. Define separate entries for 'aw',\n      //     'iw', 'a[', 'i[', etc.\n      var inclusive = !motionArgs.textObjectInner;\n\n      var tmp, move;\n      if (mirroredPairs[character]) {\n        move = true;\n        tmp = selectCompanionObject(cm, head, character, inclusive);\n        if (!tmp) {\n          var sc = cm.getSearchCursor(new RegExp(\"\\\\\" + character, \"g\"), head);\n          if (sc.find()) {\n            // @ts-ignore\n            tmp = selectCompanionObject(cm, sc.from(), character, inclusive);\n          }\n        }\n      } else if (selfPaired[character]) {\n        move = true;\n        tmp = findBeginningAndEnd(cm, head, character, inclusive);\n      } else if (character === 'W' || character === 'w') {\n        var repeat = motionArgs.repeat || 1;\n        while (repeat-- > 0) {\n          var repeated = expandWordUnderCursor(cm, {\n            inclusive,\n            innerWord: !inclusive,\n            bigWord: character === 'W',\n            noSymbol: character === 'W',\n            multiline: true\n          }, tmp && tmp.end);\n          if (repeated) {\n            if (!tmp) tmp = repeated;\n            tmp.end = repeated.end;\n          }\n        }\n      } else if (character === 'p') {\n        tmp = findParagraph(cm, head, motionArgs.repeat, 0, inclusive);\n        motionArgs.linewise = true;\n        if (vim.visualMode) {\n          if (!vim.visualLine) { vim.visualLine = true; }\n        } else {\n          var operatorArgs = vim.inputState.operatorArgs;\n          if (operatorArgs) { operatorArgs.linewise = true; }\n          tmp.end.line--;\n        }\n      } else if (character === 't') {\n        tmp = expandTagUnderCursor(cm, head, inclusive);\n      } else if (character === 's') {\n        // account for cursor on end of sentence symbol\n        var content = cm.getLine(head.line);\n        if (head.ch > 0 && isEndOfSentenceSymbol(content[head.ch])) {\n          head.ch -= 1;\n        }\n        var end = getSentence(cm, head, motionArgs.repeat, 1, inclusive);\n        var start = getSentence(cm, head, motionArgs.repeat, -1, inclusive);\n        // closer vim behaviour, 'a' only takes the space after the sentence if there is one before and after\n        if (isWhiteSpaceString(cm.getLine(start.line)[start.ch])\n            && isWhiteSpaceString(cm.getLine(end.line)[end.ch -1])) {\n          start = {line: start.line, ch: start.ch + 1};\n        }\n        tmp = {start: start, end: end};\n      }\n\n      if (!tmp) {\n        // No valid text object, don't move.\n        return null;\n      }\n\n      if (!cm.state.vim.visualMode) {\n        return [tmp.start, tmp.end];\n      } else {\n        return expandSelection(cm, tmp.start, tmp.end, move);\n      }\n    },\n\n    repeatLastCharacterSearch: function(cm, head, motionArgs) {\n      var lastSearch = vimGlobalState.lastCharacterSearch;\n      var repeat = motionArgs.repeat;\n      var forward = motionArgs.forward === lastSearch.forward;\n      var increment = (lastSearch.increment ? 1 : 0) * (forward ? -1 : 1);\n      cm.moveH(-increment, 'char');\n      motionArgs.inclusive = forward ? true : false;\n      var curEnd = moveToCharacter(cm, repeat, forward, lastSearch.selectedCharacter);\n      if (!curEnd) {\n        cm.moveH(increment, 'char');\n        return head;\n      }\n      curEnd.ch += increment;\n      return curEnd;\n    }\n  };\n\n  /** @arg {string} name  @arg {import(\"./types\").MotionFn} fn */\n  function defineMotion(name, fn) {\n    motions[name] = fn;\n  }\n\n  /** @arg {string} val @arg {number} times */\n  function fillArray(val, times) {\n    var arr = [];\n    for (var i = 0; i < times; i++) {\n      arr.push(val);\n    }\n    return arr;\n  }\n  /**\n   * An operator acts on a text selection. It receives the list of selections\n   * as input. The corresponding CodeMirror selection is guaranteed to\n   * match the input selection.\n   */\n  /** @type {import(\"./types\").vimOperators} */\n  var operators = {\n    change: function(cm, args, ranges) {\n      var finalHead, text;\n      var vim = cm.state.vim;\n      var anchor = ranges[0].anchor,\n          head = ranges[0].head;\n      if (!vim.visualMode) {\n        text = cm.getRange(anchor, head);\n        var lastState = vim.lastEditInputState;\n        if (lastState?.motion == \"moveByWords\" && !isWhiteSpaceString(text)) {\n          // Exclude trailing whitespace if the range is not all whitespace.\n          var match = (/\\s+$/).exec(text);\n          if (match && lastState.motionArgs && lastState.motionArgs.forward) {\n            head = offsetCursor(head, 0, - match[0].length);\n            text = text.slice(0, - match[0].length);\n          }\n        }\n        if (args.linewise) {\n          anchor = new Pos(anchor.line, findFirstNonWhiteSpaceCharacter(cm.getLine(anchor.line)));\n          if (head.line > anchor.line) {\n            head = new Pos(head.line - 1, Number.MAX_VALUE);\n          }\n        }\n        cm.replaceRange('', anchor, head);\n        finalHead = anchor;\n      } else if (args.fullLine) {\n          head.ch = Number.MAX_VALUE;\n          head.line--;\n          cm.setSelection(anchor, head);\n          text = cm.getSelection();\n          cm.replaceSelection(\"\");\n          finalHead = anchor;\n      } else {\n        text = cm.getSelection();\n        var replacement = fillArray('', ranges.length);\n        cm.replaceSelections(replacement);\n        finalHead = cursorMin(ranges[0].head, ranges[0].anchor);\n      }\n      vimGlobalState.registerController.pushText(\n          args.registerName, 'change', text,\n          args.linewise, ranges.length > 1);\n      actions.enterInsertMode(cm, {head: finalHead}, cm.state.vim);\n    },\n    delete: function(cm, args, ranges) {\n      var finalHead, text;\n      var vim = cm.state.vim;\n      if (!vim.visualBlock) {\n        var anchor = ranges[0].anchor,\n            head = ranges[0].head;\n        if (args.linewise &&\n            head.line != cm.firstLine() &&\n            anchor.line == cm.lastLine() &&\n            anchor.line == head.line - 1) {\n          // Special case for dd on last line (and first line).\n          if (anchor.line == cm.firstLine()) {\n            anchor.ch = 0;\n          } else {\n            anchor = new Pos(anchor.line - 1, lineLength(cm, anchor.line - 1));\n          }\n        }\n        text = cm.getRange(anchor, head);\n        cm.replaceRange('', anchor, head);\n        finalHead = anchor;\n        if (args.linewise) {\n          finalHead = motions.moveToFirstNonWhiteSpaceCharacter(cm, anchor);\n        }\n      } else {\n        text = cm.getSelection();\n        var replacement = fillArray('', ranges.length);\n        cm.replaceSelections(replacement);\n        finalHead = cursorMin(ranges[0].head, ranges[0].anchor);\n      }\n      vimGlobalState.registerController.pushText(\n          args.registerName, 'delete', text,\n          args.linewise, vim.visualBlock);\n      return clipCursorToContent(cm, finalHead);\n    },\n    indent: function(cm, args, ranges) {\n      var vim = cm.state.vim;\n      // In visual mode, n> shifts the selection right n times, instead of\n      // shifting n lines right once.\n      var repeat = vim.visualMode ? args.repeat || 1 : 1;\n      if (vim.visualBlock) {\n        var tabSize = cm.getOption('tabSize');\n        var indent = cm.getOption('indentWithTabs') ? '\\t' : ' '.repeat(tabSize);\n        var cursor;\n        for (var i = ranges.length - 1; i >= 0; i--) {\n          cursor = cursorMin(ranges[i].anchor, ranges[i].head);\n          if (args.indentRight) {\n            cm.replaceRange(indent.repeat(repeat), cursor, cursor);\n          } else {\n            var text = cm.getLine(cursor.line);\n            var end = 0;\n            for (var j = 0; j < repeat; j++) {\n              var ch = text[cursor.ch + end];\n              if (ch == '\\t') {\n                end++;\n              } else if (ch == ' ') {\n                end++;\n                for (var k = 1; k < indent.length; k++) {\n                  ch = text[cursor.ch + end];\n                  if (ch !== ' ') break;\n                  end++;\n                }\n              } else {\n                break\n              }\n            }\n            cm.replaceRange('', cursor, offsetCursor(cursor, 0, end));\n          }\n        }\n        return cursor;\n      } else if (cm.indentMore) {\n        for (var j = 0; j < repeat; j++) {\n          if (args.indentRight) cm.indentMore();\n          else cm.indentLess();\n        }\n      } else {\n        var startLine = ranges[0].anchor.line;\n        var endLine = vim.visualBlock ?\n          ranges[ranges.length - 1].anchor.line :\n          ranges[0].head.line;\n        if (args.linewise) {\n          // The only way to delete a newline is to delete until the start of\n          // the next line, so in linewise mode evalInput will include the next\n          // line. We don't want this in indent, so we go back a line.\n          endLine--;\n        }\n        for (var i = startLine; i <= endLine; i++) {\n          for (var j = 0; j < repeat; j++) {\n            cm.indentLine(i, args.indentRight);\n          }\n        }\n      }\n      return motions.moveToFirstNonWhiteSpaceCharacter(cm, ranges[0].anchor);\n    },\n    indentAuto: function(cm, _args, ranges) {\n      cm.execCommand(\"indentAuto\");\n      return motions.moveToFirstNonWhiteSpaceCharacter(cm, ranges[0].anchor);\n    },\n    hardWrap: function(cm, operatorArgs, ranges, oldAnchor) {\n      if (!cm.hardWrap) return;\n      var from = ranges[0].anchor.line;\n      var to = ranges[0].head.line;\n      if (operatorArgs.linewise) to--;\n      var endRow = cm.hardWrap({from: from, to: to});\n      if (endRow > from && operatorArgs.linewise) endRow--;\n      return operatorArgs.keepCursor ? oldAnchor : new Pos(endRow, 0);\n    },\n    changeCase: function(cm, args, ranges, oldAnchor, newHead) {\n      var selections = cm.getSelections();\n      var swapped = [];\n      var toLower = args.toLower;\n      for (var j = 0; j < selections.length; j++) {\n        var toSwap = selections[j];\n        var text = '';\n        if (toLower === true) {\n          text = toSwap.toLowerCase();\n        } else if (toLower === false) {\n          text = toSwap.toUpperCase();\n        } else {\n          for (var i = 0; i < toSwap.length; i++) {\n            var character = toSwap.charAt(i);\n            text += isUpperCase(character) ? character.toLowerCase() :\n                character.toUpperCase();\n          }\n        }\n        swapped.push(text);\n      }\n      cm.replaceSelections(swapped);\n      if (args.shouldMoveCursor){\n        return newHead;\n      } else if (!cm.state.vim.visualMode && args.linewise && ranges[0].anchor.line + 1 == ranges[0].head.line) {\n        return motions.moveToFirstNonWhiteSpaceCharacter(cm, oldAnchor);\n      } else if (args.linewise){\n        return oldAnchor;\n      } else {\n        return cursorMin(ranges[0].anchor, ranges[0].head);\n      }\n    },\n    yank: function(cm, args, ranges, oldAnchor) {\n      var vim = cm.state.vim;\n      var text = cm.getSelection();\n      var endPos = vim.visualMode\n        ? cursorMin(vim.sel.anchor, vim.sel.head, ranges[0].head, ranges[0].anchor)\n        : oldAnchor;\n      vimGlobalState.registerController.pushText(\n          args.registerName, 'yank',\n          text, args.linewise, vim.visualBlock);\n      return endPos;\n    },\n    rot13: function(cm, args, ranges, oldAnchor, newHead) {\n      var selections = cm.getSelections();\n      var swapped = [];\n      for (var j = 0; j < selections.length; j++) {\n        const replacement = selections[j]\n          .split('')\n          .map(x => {\n            const code = x.charCodeAt(0);\n            if (code >= 65 && code <= 90) { // Uppercase\n              return String.fromCharCode(65 + ((code - 65 + 13) % 26))\n            } else if (code >= 97 && code <= 122) { // Lowercase\n              return String.fromCharCode(97 + ((code - 97 + 13) % 26))\n            } else { // Not a letter\n              return x;\n            }\n          })\n          .join('');\n        swapped.push(replacement);\n      }\n      cm.replaceSelections(swapped);\n      if (args.shouldMoveCursor){\n        return newHead;\n      } else if (!cm.state.vim.visualMode && args.linewise && ranges[0].anchor.line + 1 == ranges[0].head.line) {\n        return motions.moveToFirstNonWhiteSpaceCharacter(cm, oldAnchor);\n      } else if (args.linewise){\n        return oldAnchor;\n      } else {\n        return cursorMin(ranges[0].anchor, ranges[0].head);\n      }\n    },\n  };\n\n  /** @arg {string} name  @arg {import(\"./types\").OperatorFn} fn */\n  function defineOperator(name, fn) {\n    operators[name] = fn;\n  }\n\n  /** @type {import(\"./types\").vimActions} */\n  var actions = {\n    jumpListWalk: function(cm, actionArgs, vim) {\n      if (vim.visualMode) {\n        return;\n      }\n      var repeat = actionArgs.repeat || 1;\n      var forward = actionArgs.forward;\n      var jumpList = vimGlobalState.jumpList;\n\n      var mark = jumpList.move(cm, forward ? repeat : -repeat);\n      var markPos = mark ? mark.find() : undefined;\n      markPos = markPos ? markPos : cm.getCursor();\n      cm.setCursor(markPos);\n    },\n    scroll: function(cm, actionArgs, vim) {\n      if (vim.visualMode) {\n        return;\n      }\n      var repeat = actionArgs.repeat || 1;\n      var lineHeight = cm.defaultTextHeight();\n      var top = cm.getScrollInfo().top;\n      var delta = lineHeight * repeat;\n      var newPos = actionArgs.forward ? top + delta : top - delta;\n      var cursor = copyCursor(cm.getCursor());\n      var cursorCoords = cm.charCoords(cursor, 'local');\n      if (actionArgs.forward) {\n        if (newPos > cursorCoords.top) {\n            cursor.line += (newPos - cursorCoords.top) / lineHeight;\n            cursor.line = Math.ceil(cursor.line);\n            cm.setCursor(cursor);\n            cursorCoords = cm.charCoords(cursor, 'local');\n            cm.scrollTo(null, cursorCoords.top);\n        } else {\n            // Cursor stays within bounds.  Just reposition the scroll window.\n            cm.scrollTo(null, newPos);\n        }\n      } else {\n        var newBottom = newPos + cm.getScrollInfo().clientHeight;\n        if (newBottom < cursorCoords.bottom) {\n            cursor.line -= (cursorCoords.bottom - newBottom) / lineHeight;\n            cursor.line = Math.floor(cursor.line);\n            cm.setCursor(cursor);\n            cursorCoords = cm.charCoords(cursor, 'local');\n            cm.scrollTo(\n                null, cursorCoords.bottom - cm.getScrollInfo().clientHeight);\n        } else {\n            // Cursor stays within bounds.  Just reposition the scroll window.\n            cm.scrollTo(null, newPos);\n        }\n      }\n    },\n    scrollToCursor: function(cm, actionArgs) {\n      var lineNum = cm.getCursor().line;\n      var charCoords = cm.charCoords(new Pos(lineNum, 0), 'local');\n      var height = cm.getScrollInfo().clientHeight;\n      var y = charCoords.top;\n      switch (actionArgs.position) {\n        case 'center': y = charCoords.bottom - height / 2;\n          break;\n        case 'bottom':\n          var lineLastCharPos = new Pos(lineNum, cm.getLine(lineNum).length - 1);\n          var lineLastCharCoords = cm.charCoords(lineLastCharPos, 'local');\n          var lineHeight = lineLastCharCoords.bottom - y;\n          y = y - height + lineHeight;\n          break;\n      }\n      cm.scrollTo(null, y);\n    },\n    replayMacro: function(cm, actionArgs, vim) {\n      var registerName = actionArgs.selectedCharacter || \"\";\n      var repeat = actionArgs.repeat || 1;\n      var macroModeState = vimGlobalState.macroModeState;\n      if (registerName == '@') {\n        registerName = macroModeState.latestRegister || \"\";\n      } else {\n        macroModeState.latestRegister = registerName;\n      }\n      while(repeat--){\n        executeMacroRegister(cm, vim, macroModeState, registerName);\n      }\n    },\n    enterMacroRecordMode: function(cm, actionArgs) {\n      var macroModeState = vimGlobalState.macroModeState;\n      var registerName = actionArgs.selectedCharacter;\n      if (vimGlobalState.registerController.isValidRegister(registerName)) {\n        macroModeState.enterMacroRecordMode(cm, registerName);\n      }\n    },\n    toggleOverwrite: function(cm) {\n      if (!cm.state.overwrite) {\n        cm.toggleOverwrite(true);\n        cm.setOption('keyMap', 'vim-replace');\n        CM.signal(cm, \"vim-mode-change\", {mode: \"replace\"});\n      } else {\n        cm.toggleOverwrite(false);\n        cm.setOption('keyMap', 'vim-insert');\n        CM.signal(cm, \"vim-mode-change\", {mode: \"insert\"});\n      }\n    },\n    enterInsertMode: function(cm, actionArgs, vim) {\n      if (cm.getOption('readOnly')) { return; }\n      vim.insertMode = true;\n      vim.insertModeRepeat = actionArgs && actionArgs.repeat || 1;\n      var insertAt = (actionArgs) ? actionArgs.insertAt : null;\n      var sel = vim.sel;\n      var head = actionArgs.head || cm.getCursor('head');\n      var height = cm.listSelections().length;\n      if (insertAt == 'eol') {\n        head = new Pos(head.line, lineLength(cm, head.line));\n      } else if (insertAt == 'bol') {\n        head = new Pos(head.line, 0);\n      } else if (insertAt == 'charAfter') {\n        var newPosition = updateSelectionForSurrogateCharacters(cm, head, offsetCursor(head, 0, 1));\n        head = newPosition.end;\n      } else if (insertAt == 'firstNonBlank') {\n        var newPosition = updateSelectionForSurrogateCharacters(cm, head, motions.moveToFirstNonWhiteSpaceCharacter(cm, head));\n        head = newPosition.end;\n      } else if (insertAt == 'startOfSelectedArea') {\n        if (!vim.visualMode)\n            return;\n        if (!vim.visualBlock) {\n          if (sel.head.line < sel.anchor.line) {\n            head = sel.head;\n          } else {\n            head = new Pos(sel.anchor.line, 0);\n          }\n        } else {\n          head = new Pos(\n              Math.min(sel.head.line, sel.anchor.line),\n              Math.min(sel.head.ch, sel.anchor.ch));\n          height = Math.abs(sel.head.line - sel.anchor.line) + 1;\n        }\n      } else if (insertAt == 'endOfSelectedArea') {\n          if (!vim.visualMode)\n            return;\n        if (!vim.visualBlock) {\n          if (sel.head.line >= sel.anchor.line) {\n            head = offsetCursor(sel.head, 0, 1);\n          } else {\n            head = new Pos(sel.anchor.line, 0);\n          }\n        } else {\n          head = new Pos(\n              Math.min(sel.head.line, sel.anchor.line),\n              Math.max(sel.head.ch, sel.anchor.ch) + 1);\n          height = Math.abs(sel.head.line - sel.anchor.line) + 1;\n        }\n      } else if (insertAt == 'inplace') {\n        if (vim.visualMode){\n          return;\n        }\n      } else if (insertAt == 'lastEdit') {\n        head = getLastEditPos(cm) || head;\n      }\n      cm.setOption('disableInput', false);\n      if (actionArgs && actionArgs.replace) {\n        // Handle Replace-mode as a special case of insert mode.\n        cm.toggleOverwrite(true);\n        cm.setOption('keyMap', 'vim-replace');\n        CM.signal(cm, \"vim-mode-change\", {mode: \"replace\"});\n      } else {\n        cm.toggleOverwrite(false);\n        cm.setOption('keyMap', 'vim-insert');\n        CM.signal(cm, \"vim-mode-change\", {mode: \"insert\"});\n      }\n      if (!vimGlobalState.macroModeState.isPlaying) {\n        // Only record if not replaying.\n        cm.on('change', onChange);\n        if (vim.insertEnd) vim.insertEnd.clear();\n        vim.insertEnd = cm.setBookmark(head, {insertLeft: true});\n        CM.on(cm.getInputField(), 'keydown', onKeyEventTargetKeyDown);\n      }\n      if (vim.visualMode) {\n        exitVisualMode(cm);\n      }\n      selectForInsert(cm, head, height);\n    },\n    toggleVisualMode: function(cm, actionArgs, vim) {\n      var repeat = actionArgs.repeat;\n      var anchor = cm.getCursor();\n      var head;\n      // TODO: The repeat should actually select number of characters/lines\n      //     equal to the repeat times the size of the previous visual\n      //     operation.\n      if (!vim.visualMode) {\n        // Entering visual mode\n        vim.visualMode = true;\n        vim.visualLine = !!actionArgs.linewise;\n        vim.visualBlock = !!actionArgs.blockwise;\n        head = clipCursorToContent(\n            cm, new Pos(anchor.line, anchor.ch + repeat - 1));\n        var newPosition = updateSelectionForSurrogateCharacters(cm, anchor, head);\n        vim.sel = {\n          anchor: newPosition.start,\n          head: newPosition.end\n        };\n        CM.signal(cm, \"vim-mode-change\", {mode: \"visual\", subMode: vim.visualLine ? \"linewise\" : vim.visualBlock ? \"blockwise\" : \"\"});\n        updateCmSelection(cm);\n        updateMark(cm, vim, '<', cursorMin(anchor, head));\n        updateMark(cm, vim, '>', cursorMax(anchor, head));\n      } else if (vim.visualLine != !!actionArgs.linewise ||\n          vim.visualBlock != !!actionArgs.blockwise) {\n        // Toggling between modes\n        vim.visualLine = !!actionArgs.linewise;\n        vim.visualBlock = !!actionArgs.blockwise;\n        CM.signal(cm, \"vim-mode-change\", {mode: \"visual\", subMode: vim.visualLine ? \"linewise\" : vim.visualBlock ? \"blockwise\" : \"\"});\n        updateCmSelection(cm);\n      } else {\n        exitVisualMode(cm);\n      }\n    },\n    reselectLastSelection: function(cm, _actionArgs, vim) {\n      var lastSelection = vim.lastSelection;\n      if (vim.visualMode) {\n        updateLastSelection(cm, vim);\n      }\n      if (lastSelection) {\n        var anchor = lastSelection.anchorMark.find();\n        var head = lastSelection.headMark.find();\n        if (!anchor || !head) {\n          // If the marks have been destroyed due to edits, do nothing.\n          return;\n        }\n        vim.sel = {\n          anchor: anchor,\n          head: head\n        };\n        vim.visualMode = true;\n        vim.visualLine = lastSelection.visualLine;\n        vim.visualBlock = lastSelection.visualBlock;\n        updateCmSelection(cm);\n        updateMark(cm, vim, '<', cursorMin(anchor, head));\n        updateMark(cm, vim, '>', cursorMax(anchor, head));\n        CM.signal(cm, 'vim-mode-change', {\n          mode: 'visual',\n          subMode: vim.visualLine ? 'linewise' :\n                    vim.visualBlock ? 'blockwise' : ''});\n      }\n    },\n    joinLines: function(cm, actionArgs, vim) {\n      var curStart, curEnd;\n      if (vim.visualMode) {\n        curStart = cm.getCursor('anchor');\n        curEnd = cm.getCursor('head');\n        if (cursorIsBefore(curEnd, curStart)) {\n          var tmp = curEnd;\n          curEnd = curStart;\n          curStart = tmp;\n        }\n        curEnd.ch = lineLength(cm, curEnd.line) - 1;\n      } else {\n        // Repeat is the number of lines to join. Minimum 2 lines.\n        var repeat = Math.max(actionArgs.repeat, 2);\n        curStart = cm.getCursor();\n        curEnd = clipCursorToContent(cm, new Pos(curStart.line + repeat - 1,\n                                              Infinity));\n      }\n      var finalCh = 0;\n      for (var i = curStart.line; i < curEnd.line; i++) {\n        finalCh = lineLength(cm, curStart.line);\n        var text = '';\n        var nextStartCh = 0;\n        if (!actionArgs.keepSpaces) {\n          var nextLine = cm.getLine(curStart.line + 1);\n          nextStartCh = nextLine.search(/\\S/);\n          if (nextStartCh == -1) {\n            nextStartCh = nextLine.length;\n          } else {\n            text = \" \";\n          }\n        }\n        cm.replaceRange(text, \n          new Pos(curStart.line, finalCh),\n          new Pos(curStart.line + 1, nextStartCh));\n      }\n      var curFinalPos = clipCursorToContent(cm, new Pos(curStart.line, finalCh));\n      if (vim.visualMode) {\n        exitVisualMode(cm, false);\n      }\n      cm.setCursor(curFinalPos);\n    },\n    newLineAndEnterInsertMode: function(cm, actionArgs, vim) {\n      vim.insertMode = true;\n      var insertAt = copyCursor(cm.getCursor());\n      if (insertAt.line === cm.firstLine() && !actionArgs.after) {\n        // Special case for inserting newline before start of document.\n        cm.replaceRange('\\n', new Pos(cm.firstLine(), 0));\n        cm.setCursor(cm.firstLine(), 0);\n      } else {\n        insertAt.line = (actionArgs.after) ? insertAt.line :\n            insertAt.line - 1;\n        insertAt.ch = lineLength(cm, insertAt.line);\n        cm.setCursor(insertAt);\n        var newlineFn = CM.commands.newlineAndIndentContinueComment ||\n            CM.commands.newlineAndIndent;\n        newlineFn(cm);\n      }\n      this.enterInsertMode(cm, { repeat: actionArgs.repeat }, vim);\n    },\n    paste: function(cm, actionArgs, vim) {\n      var register = vimGlobalState.registerController.getRegister(\n          actionArgs.registerName);\n      if (actionArgs.registerName === '+') {\n        navigator.clipboard.readText().then((value) => {\n          this.continuePaste(cm, actionArgs, vim, value, register);\n        });\n      } else {\n        var text = register.toString();\n        this.continuePaste(cm, actionArgs, vim, text, register);\n      }\n    },\n    continuePaste: function(cm, actionArgs, vim, text, register) {\n      var cur = copyCursor(cm.getCursor());\n      if (!text) {\n        return;\n      }\n      if (actionArgs.matchIndent) {\n        var tabSize = cm.getOption(\"tabSize\");\n        // length that considers tabs and tabSize\n        var whitespaceLength = function(/** @type {string} */ str) {\n          var tabs = (str.split(\"\\t\").length - 1);\n          var spaces = (str.split(\" \").length - 1);\n          return tabs * tabSize + spaces * 1;\n        };\n        var currentLine = cm.getLine(cm.getCursor().line);\n        // @ts-ignore\n        var indent = whitespaceLength(currentLine.match(/^\\s*/)[0]);\n        // chomp last newline b/c don't want it to match /^\\s*/gm\n        var chompedText = text.replace(/\\n$/, '');\n        var wasChomped = text !== chompedText;\n        // @ts-ignore\n        var firstIndent = whitespaceLength(text.match(/^\\s*/)[0]);\n        var text = chompedText.replace(/^\\s*/gm, function(wspace) {\n          var newIndent = indent + (whitespaceLength(wspace) - firstIndent);\n          if (newIndent < 0) {\n            return \"\";\n          }\n          else if (cm.getOption(\"indentWithTabs\")) {\n            var quotient = Math.floor(newIndent / tabSize);\n            return Array(quotient + 1).join('\\t');\n          }\n          else {\n            return Array(newIndent + 1).join(' ');\n          }\n        });\n        text += wasChomped ? \"\\n\" : \"\";\n      }\n      if (actionArgs.repeat > 1) {\n        text = Array(actionArgs.repeat + 1).join(text);\n      }\n      var linewise = register.linewise;\n      var blockwise = register.blockwise;\n      var textLines = blockwise ? text.split('\\n') : undefined;\n      if (textLines) {\n        if (linewise) {\n          textLines.pop();\n        }\n        for (var i = 0; i < textLines.length; i++) {\n          textLines[i] = (textLines[i] == '') ? ' ' : textLines[i];\n        }\n        cur.ch += actionArgs.after ? 1 : 0;\n        cur.ch = Math.min(lineLength(cm, cur.line), cur.ch);\n      } else if (linewise) {\n        if (vim.visualMode) {\n          text = vim.visualLine ? text.slice(0, -1) : '\\n' + text.slice(0, text.length - 1) + '\\n';\n        } else if (actionArgs.after) {\n          // Move the newline at the end to the start instead, and paste just\n          // before the newline character of the line we are on right now.\n          text = '\\n' + text.slice(0, text.length - 1);\n          cur.ch = lineLength(cm, cur.line);\n        } else {\n          cur.ch = 0;\n        }\n      } else {\n        cur.ch += actionArgs.after ? 1 : 0;\n      }\n      var curPosFinal;\n      if (vim.visualMode) {\n        //  save the pasted text for reselection if the need arises\n        vim.lastPastedText = text;\n        var lastSelectionCurEnd;\n        var selectedArea = getSelectedAreaRange(cm);\n        var selectionStart = selectedArea[0];\n        var selectionEnd = selectedArea[1];\n        var selectedText = cm.getSelection();\n        var selections = cm.listSelections();\n        var emptyStrings = new Array(selections.length).join('1').split('1');\n        // save the curEnd marker before it get cleared due to cm.replaceRange.\n        if (vim.lastSelection) {\n          lastSelectionCurEnd = vim.lastSelection.headMark.find();\n        }\n        // push the previously selected text to unnamed register\n        vimGlobalState.registerController.unnamedRegister.setText(selectedText);\n        if (blockwise) {\n          // first delete the selected text\n          cm.replaceSelections(emptyStrings);\n          // Set new selections as per the block length of the yanked text\n          selectionEnd = new Pos(selectionStart.line + text.length-1, selectionStart.ch);\n          cm.setCursor(selectionStart);\n          selectBlock(cm, selectionEnd);\n          // @ts-ignore\n          cm.replaceSelections(text);\n          curPosFinal = selectionStart;\n        } else if (vim.visualBlock) {\n          cm.replaceSelections(emptyStrings);\n          cm.setCursor(selectionStart);\n          cm.replaceRange(text, selectionStart, selectionStart);\n          curPosFinal = selectionStart;\n        } else {\n          cm.replaceRange(text, selectionStart, selectionEnd);\n          curPosFinal = cm.posFromIndex(cm.indexFromPos(selectionStart) + text.length - 1);\n        }\n        // restore the curEnd marker\n        if(lastSelectionCurEnd) {\n          vim.lastSelection.headMark = cm.setBookmark(lastSelectionCurEnd);\n        }\n        if (linewise) {\n          curPosFinal.ch=0;\n        }\n      } else {\n        if (blockwise && textLines) {\n          cm.setCursor(cur);\n          for (var i = 0; i < textLines.length; i++) {\n            var line = cur.line+i;\n            if (line > cm.lastLine()) {\n              cm.replaceRange('\\n',  new Pos(line, 0));\n            }\n            var lastCh = lineLength(cm, line);\n            if (lastCh < cur.ch) {\n              extendLineToColumn(cm, line, cur.ch);\n            }\n          }\n          cm.setCursor(cur);\n          selectBlock(cm, new Pos(cur.line + textLines.length-1, cur.ch));\n          cm.replaceSelections(textLines);\n          curPosFinal = cur;\n        } else {\n          cm.replaceRange(text, cur);\n          // Now fine tune the cursor to where we want it.\n          if (linewise) {\n            var line = actionArgs.after ? cur.line + 1 : cur.line;\n            curPosFinal = new Pos(line, findFirstNonWhiteSpaceCharacter(cm.getLine(line)));\n          } else {\n            curPosFinal = copyCursor(cur);\n            if (!/\\n/.test(text)) {\n              curPosFinal.ch += text.length - (actionArgs.after ? 1 : 0);\n            }\n          }\n        }\n      }\n      if (vim.visualMode) {\n        exitVisualMode(cm, false);\n      }\n      cm.setCursor(curPosFinal);\n    },\n    undo: function(cm, actionArgs) {\n      cm.operation(function() {\n        repeatFn(cm, CM.commands.undo, actionArgs.repeat)();\n        cm.setCursor(clipCursorToContent(cm, cm.getCursor('start')));\n      });\n    },\n    redo: function(cm, actionArgs) {\n      repeatFn(cm, CM.commands.redo, actionArgs.repeat)();\n    },\n    setRegister: function(_cm, actionArgs, vim) {\n      vim.inputState.registerName = actionArgs.selectedCharacter;\n    },\n    insertRegister: function(cm, actionArgs, vim) {\n      var registerName = actionArgs.selectedCharacter;\n      var register = vimGlobalState.registerController.getRegister(registerName);\n      var text = register && register.toString();\n      if (text) {\n        cm.replaceSelection(text);\n      }\n    },\n    oneNormalCommand: function(cm, actionArgs, vim) {\n      exitInsertMode(cm, true);\n      vim.insertModeReturn = true;\n      CM.on(cm, 'vim-command-done', function handler() {\n        if (vim.visualMode) return;\n        if (vim.insertModeReturn) {\n          vim.insertModeReturn = false;\n          if (!vim.insertMode) {\n            actions.enterInsertMode(cm, {}, vim);\n          }\n        }\n        CM.off(cm, 'vim-command-done', handler);\n      });\n    },\n    setMark: function(cm, actionArgs, vim) {\n      var markName = actionArgs.selectedCharacter;\n      if (markName) updateMark(cm, vim, markName, cm.getCursor());\n    },\n    replace: function(cm, actionArgs, vim) {\n      var replaceWith = actionArgs.selectedCharacter || \"\";\n      var curStart = cm.getCursor();\n      var replaceTo;\n      var curEnd;\n      var selections = cm.listSelections();\n      if (vim.visualMode) {\n        curStart = cm.getCursor('start');\n        curEnd = cm.getCursor('end');\n      } else {\n        var line = cm.getLine(curStart.line);\n        replaceTo = curStart.ch + actionArgs.repeat;\n        if (replaceTo > line.length) {\n          replaceTo=line.length;\n        }\n        curEnd = new Pos(curStart.line, replaceTo);\n      }\n\n      var newPositions = updateSelectionForSurrogateCharacters(cm, curStart, curEnd);\n      curStart = newPositions.start;\n      curEnd = newPositions.end;\n      if (replaceWith=='\\n') {\n        if (!vim.visualMode) cm.replaceRange('', curStart, curEnd);\n        // special case, where vim help says to replace by just one line-break\n        (CM.commands.newlineAndIndentContinueComment || CM.commands.newlineAndIndent)(cm);\n      } else {\n        var replaceWithStr = cm.getRange(curStart, curEnd);\n        // replace all surrogate characters with selected character\n        replaceWithStr = replaceWithStr.replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, replaceWith);\n        //replace all characters in range by selected, but keep linebreaks\n        replaceWithStr = replaceWithStr.replace(/[^\\n]/g, replaceWith);\n        if (vim.visualBlock) {\n          // Tabs are split in visua block before replacing\n          var spaces = new Array(cm.getOption(\"tabSize\")+1).join(' ');\n          replaceWithStr = cm.getSelection();\n          replaceWithStr = replaceWithStr.replace(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, replaceWith);\n          var replaceWithStrings = replaceWithStr.replace(/\\t/g, spaces).replace(/[^\\n]/g, replaceWith).split('\\n');\n          cm.replaceSelections(replaceWithStrings);\n        } else {\n          cm.replaceRange(replaceWithStr, curStart, curEnd);\n        }\n        if (vim.visualMode) {\n          curStart = cursorIsBefore(selections[0].anchor, selections[0].head) ?\n                        selections[0].anchor : selections[0].head;\n          cm.setCursor(curStart);\n          exitVisualMode(cm, false);\n        } else {\n          cm.setCursor(offsetCursor(curEnd, 0, -1));\n        }\n      }\n    },\n    incrementNumberToken: function(cm, actionArgs) {\n      var cur = cm.getCursor();\n      var lineStr = cm.getLine(cur.line);\n      var re = /(-?)(?:(0x)([\\da-f]+)|(0b|0|)(\\d+))/gi;\n      var match;\n      var start;\n      var end;\n      var numberStr;\n      while ((match = re.exec(lineStr)) !== null) {\n        start = match.index;\n        end = start + match[0].length;\n        if (cur.ch < end)break;\n      }\n      // @ts-ignore\n      if (!actionArgs.backtrack && (end <= cur.ch))return;\n      if (match) {\n        var baseStr = match[2] || match[4];\n        var digits = match[3] || match[5];\n        var increment = actionArgs.increase ? 1 : -1;\n        var base = {'0b': 2, '0': 8, '': 10, '0x': 16}[baseStr.toLowerCase()];\n        var number = parseInt(match[1] + digits, base) + (increment * actionArgs.repeat);\n        numberStr = number.toString(base);\n        var zeroPadding = baseStr ? new Array(digits.length - numberStr.length + 1 + match[1].length).join('0') : '';\n        if (numberStr.charAt(0) === '-') {\n          numberStr = '-' + baseStr + zeroPadding + numberStr.substr(1);\n        } else {\n          numberStr = baseStr + zeroPadding + numberStr;\n        }\n        // @ts-ignore\n        var from = new Pos(cur.line, start);\n        // @ts-ignore\n        var to = new Pos(cur.line, end);\n        cm.replaceRange(numberStr, from, to);\n      } else {\n        return;\n      }\n      // @ts-ignore\n      cm.setCursor(new Pos(cur.line, start + numberStr.length - 1));\n    },\n    repeatLastEdit: function(cm, actionArgs, vim) {\n      var lastEditInputState = vim.lastEditInputState;\n      if (!lastEditInputState) { return; }\n      var repeat = actionArgs.repeat;\n      if (repeat && actionArgs.repeatIsExplicit) {\n        lastEditInputState.repeatOverride = repeat;\n      } else {\n        repeat = lastEditInputState.repeatOverride || repeat;\n      }\n      repeatLastEdit(cm, vim, repeat, false /** repeatForInsert */);\n    },\n    indent: function(cm, actionArgs) {\n      cm.indentLine(cm.getCursor().line, actionArgs.indentRight);\n    },\n    exitInsertMode: function(cm, actionArgs) {\n      exitInsertMode(cm);\n    }\n  };\n\n  /** @arg {string } name  @arg {import(\"./types\").ActionFn} fn */\n  function defineAction(name, fn) {\n    actions[name] = fn;\n  }\n\n  /*\n   * Below are miscellaneous utility functions used by vim.js\n   */\n\n  /**\n   * Clips cursor to ensure that line is within the buffer's range\n   * and is not inside surrogate pair\n   * If includeLineBreak is true, then allow cur.ch == lineLength.\n   * @arg {CodeMirrorV} cm \n   * @arg {Pos} cur \n   * @arg {Pos} [oldCur]\n   * @return {Pos}\n   */\n  function clipCursorToContent(cm, cur, oldCur) {\n    var vim = cm.state.vim;\n    var includeLineBreak = vim.insertMode || vim.visualMode;\n    var line = Math.min(Math.max(cm.firstLine(), cur.line), cm.lastLine() );\n    var text = cm.getLine(line);\n    var maxCh = text.length - 1 + Number(!!includeLineBreak);\n    var ch = Math.min(Math.max(0, cur.ch), maxCh);\n    // prevent cursor from entering surrogate pair\n    var charCode = text.charCodeAt(ch);\n    if (0xDC00 <= charCode && charCode <= 0xDFFF) {\n      var direction = 1;\n      if (oldCur && oldCur.line == line && oldCur.ch > ch) {\n        direction = -1;\n      }\n      ch +=direction;\n      if (ch > maxCh) ch -=2;\n    }\n    return new Pos(line, ch);\n  }\n  /**@type <T>(args: T)=>T */\n  function copyArgs(args) {\n    var ret = /**@type{typeof args}*/({});\n    for (var prop in args) {\n      if (Object.prototype.hasOwnProperty.call(args, prop)) {\n        ret[prop] = args[prop];\n      }\n    }\n    return  /**@type{typeof args}*/(ret);\n  }\n  /**\n   * @param {Pos} cur\n   * @param {number|Pos} offsetLine\n   * @param {number} offsetCh\n   */\n  function offsetCursor(cur, offsetLine, offsetCh) {\n    if (typeof offsetLine === 'object') {\n      offsetCh = offsetLine.ch;\n      offsetLine = offsetLine.line;\n    }\n    return new Pos(cur.line + offsetLine, cur.ch + offsetCh);\n  }\n  /**\n   * @param {string} keys\n   * @param {vimKey[]} keyMap\n   * @param {string} context\n   * @param {InputStateInterface} inputState\n   */\n  function commandMatches(keys, keyMap, context, inputState) {\n    // Partial matches are not applied. They inform the key handler\n    // that the current key sequence is a subsequence of a valid key\n    // sequence, so that the key buffer is not cleared.\n    if (inputState.operator) context = \"operatorPending\";\n    var match, partial = [], full = [];\n    // if currently expanded key comes from a noremap, searcg only in default keys\n    var startIndex = noremap ? keyMap.length - defaultKeymapLength : 0;\n    for (var i = startIndex; i < keyMap.length; i++) {\n      var command = keyMap[i];\n      if (context == 'insert' && command.context != 'insert' ||\n          (command.context && command.context != context) ||\n          inputState.operator && command.type == 'action' ||\n          !(match = commandMatch(keys, command.keys))) { continue; }\n      if (match == 'partial') { partial.push(command); }\n      if (match == 'full') { full.push(command); }\n    }\n    return {\n      partial: partial,\n      full: full\n    };\n  }\n  /** @arg {string} pressed  @arg {string} mapped  @return {'full'|'partial'|false}*/\n  function commandMatch(pressed, mapped) {\n    const isLastCharacter = mapped.slice(-11) == '<character>';\n    const isLastRegister = mapped.slice(-10) == '<register>';\n    if (isLastCharacter || isLastRegister) {\n      // Last character matches anything.\n      var prefixLen = mapped.length - (isLastCharacter ? 11 : 10);\n      var pressedPrefix = pressed.slice(0, prefixLen);\n      var mappedPrefix = mapped.slice(0, prefixLen);\n      return pressedPrefix == mappedPrefix && pressed.length > prefixLen ? 'full' :\n              mappedPrefix.indexOf(pressedPrefix) == 0 ? 'partial' : false;\n    } else {\n      return pressed == mapped ? 'full' :\n              mapped.indexOf(pressed) == 0 ? 'partial' : false;\n    }\n  }\n  /** @arg {string} keys */\n  function lastChar(keys) {\n    var match = /^.*(<[^>]+>)$/.exec(keys);\n    var selectedCharacter = match ? match[1] : keys.slice(-1);\n    if (selectedCharacter.length > 1){\n      switch(selectedCharacter){\n        case '<CR>':\n        case '<S-CR>':\n          selectedCharacter='\\n';\n          break;\n        case '<Space>':\n        case '<S-Space>':\n          selectedCharacter=' ';\n          break;\n        default:\n          selectedCharacter='';\n          break;\n      }\n    }\n    return selectedCharacter;\n  }\n  /** @arg {CodeMirror} cm   @arg {{ (cm: CodeMirror): void }} fn   @arg {number} repeat */\n  function repeatFn(cm, fn, repeat) {\n    return function() {\n      for (var i = 0; i < repeat; i++) {\n        fn(cm);\n      }\n    };\n  }\n  /** @arg {Pos} cur   @return {Pos}*/\n  function copyCursor(cur) {\n    return new Pos(cur.line, cur.ch);\n  }\n  /** @arg {Pos} cur1 @arg {Pos} cur2  @return {boolean} */\n  function cursorEqual(cur1, cur2) {\n    return cur1.ch == cur2.ch && cur1.line == cur2.line;\n  }\n  /** @arg {Pos} cur1  @arg {Pos} cur2 @return {boolean}*/\n  function cursorIsBefore(cur1, cur2) {\n    if (cur1.line < cur2.line) {\n      return true;\n    }\n    if (cur1.line == cur2.line && cur1.ch < cur2.ch) {\n      return true;\n    }\n    return false;\n  }\n  /** @arg {Pos} cur1 @arg {Pos} cur2  @return {Pos}*/\n  function cursorMin(cur1, cur2) {\n    if (arguments.length > 2) {\n      // @ts-ignore\n      cur2 = cursorMin.apply(undefined, Array.prototype.slice.call(arguments, 1));\n    }\n    return cursorIsBefore(cur1, cur2) ? cur1 : cur2;\n  }\n  /** @arg {Pos} cur1  @arg {Pos} cur2  @return {Pos} */\n  function cursorMax(cur1, cur2) {\n    if (arguments.length > 2) {\n      // @ts-ignore\n      cur2 = cursorMax.apply(undefined, Array.prototype.slice.call(arguments, 1));\n    }\n    return cursorIsBefore(cur1, cur2) ? cur2 : cur1;\n  }\n  /** @arg {Pos} cur1   @arg {Pos} cur2  @arg {Pos} cur3  @return {boolean}*/ \n  function cursorIsBetween(cur1, cur2, cur3) {\n    // returns true if cur2 is between cur1 and cur3.\n    var cur1before2 = cursorIsBefore(cur1, cur2);\n    var cur2before3 = cursorIsBefore(cur2, cur3);\n    return cur1before2 && cur2before3;\n  }\n  /** @arg {CodeMirror} cm  @arg {number} lineNum */\n  function lineLength(cm, lineNum) {\n    return cm.getLine(lineNum).length;\n  }\n  /** @arg {string} s */\n  function trim(s) {\n    if (s.trim) {\n      return s.trim();\n    }\n    return s.replace(/^\\s+|\\s+$/g, '');\n  }\n  /** @arg {string} s */\n  function escapeRegex(s) {\n    return s.replace(/([.?*+$\\[\\]\\/\\\\(){}|\\-])/g, '\\\\$1');\n  }\n  /** @arg {CodeMirror} cm  @arg {number} lineNum  @arg {number} column */\n  function extendLineToColumn(cm, lineNum, column) {\n    var endCh = lineLength(cm, lineNum);\n    var spaces = new Array(column-endCh+1).join(' ');\n    cm.setCursor(new Pos(lineNum, endCh));\n    cm.replaceRange(spaces, cm.getCursor());\n  }\n  // This functions selects a rectangular block\n  // of text with selectionEnd as any of its corner\n  // Height of block:\n  // Difference in selectionEnd.line and first/last selection.line\n  // Width of the block:\n  // Distance between selectionEnd.ch and any(first considered here) selection.ch\n  /** @arg {CodeMirror} cm  @arg {Pos} selectionEnd */\n  function selectBlock(cm, selectionEnd) {\n    var selections = [], ranges = cm.listSelections();\n    var head = copyCursor(cm.clipPos(selectionEnd));\n    var isClipped = !cursorEqual(selectionEnd, head);\n    var curHead = cm.getCursor('head');\n    var primIndex = getIndex(ranges, curHead);\n    var wasClipped = cursorEqual(ranges[primIndex].head, ranges[primIndex].anchor);\n    var max = ranges.length - 1;\n    var index = max - primIndex > primIndex ? max : 0;\n    var base = ranges[index].anchor;\n\n    var firstLine = Math.min(base.line, head.line);\n    var lastLine = Math.max(base.line, head.line);\n    var baseCh = base.ch, headCh = head.ch;\n\n    var dir = ranges[index].head.ch - baseCh;\n    var newDir = headCh - baseCh;\n    if (dir > 0 && newDir <= 0) {\n      baseCh++;\n      if (!isClipped) { headCh--; }\n    } else if (dir < 0 && newDir >= 0) {\n      baseCh--;\n      if (!wasClipped) { headCh++; }\n    } else if (dir < 0 && newDir == -1) {\n      baseCh--;\n      headCh++;\n    }\n    for (var line = firstLine; line <= lastLine; line++) {\n      var range = {anchor: new Pos(line, baseCh), head: new Pos(line, headCh)};\n      selections.push(range);\n    }\n    cm.setSelections(selections);\n    selectionEnd.ch = headCh;\n    base.ch = baseCh;\n    return base;\n  }\n  /** @arg {CodeMirror} cm  @arg {any} head  @arg {number} height */\n  function selectForInsert(cm, head, height) {\n    var sel = [];\n    for (var i = 0; i < height; i++) {\n      var lineHead = offsetCursor(head, i, 0);\n      sel.push({anchor: lineHead, head: lineHead});\n    }\n    cm.setSelections(sel, 0);\n  }\n  // getIndex returns the index of the cursor in the selections.\n  /** @arg {vimState[\"sel\"][]} ranges  @arg {Pos} cursor  @arg {string | undefined} [end] */\n  function getIndex(ranges, cursor, end) {\n    for (var i = 0; i < ranges.length; i++) {\n      var atAnchor = cursorEqual(ranges[i].anchor, cursor);\n      var atHead = cursorEqual(ranges[i].head, cursor);\n      if (atAnchor || atHead) {\n        return i;\n      }\n    }\n    return -1;\n  }\n  /** @arg {CodeMirror} cm  @arg {vimState} vim  @return {[Pos,Pos]}*/\n  function getSelectedAreaRange(cm, vim) {\n    var selections = cm.listSelections();\n    var start =  selections[0];\n    var end = selections[selections.length-1];\n    var selectionStart = cursorIsBefore(start.anchor, start.head) ? start.anchor : start.head;\n    var selectionEnd = cursorIsBefore(end.anchor, end.head) ? end.head : end.anchor;\n    return [selectionStart, selectionEnd];\n  }\n  // Updates the previous selection with the current selection's values. This\n  // should only be called in visual mode.\n  /** @arg {CodeMirror} cm @arg {vimState} vim */\n  function updateLastSelection(cm, vim) {\n    var anchor = vim.sel.anchor;\n    var head = vim.sel.head;\n    // To accommodate the effect of lastPastedText in the last selection\n    if (vim.lastPastedText) {\n      head = cm.posFromIndex(cm.indexFromPos(anchor) + vim.lastPastedText.length);\n      vim.lastPastedText = undefined;\n    }\n    vim.lastSelection = {'anchorMark': cm.setBookmark(anchor),\n                          'headMark': cm.setBookmark(head),\n                          'anchor': copyCursor(anchor),\n                          'head': copyCursor(head),\n                          'visualMode': vim.visualMode,\n                          'visualLine': vim.visualLine,\n                          'visualBlock': vim.visualBlock};\n  }\n  /** @arg {CodeMirrorV} cm @arg {Pos} start @arg {Pos} end @arg {Boolean} [move] @returns {[Pos, Pos]} */\n  function expandSelection(cm, start, end, move) {\n    var sel = cm.state.vim.sel;\n    var head = move ? start: sel.head;\n    var anchor = move ? start: sel.anchor;\n    var tmp;\n    if (cursorIsBefore(end, start)) {\n      tmp = end;\n      end = start;\n      start = tmp;\n    }\n    if (cursorIsBefore(head, anchor)) {\n      head = cursorMin(start, head);\n      anchor = cursorMax(anchor, end);\n    } else {\n      anchor = cursorMin(start, anchor);\n      head = cursorMax(head, end);\n      head = offsetCursor(head, 0, -1);\n      if (head.ch == -1 && head.line != cm.firstLine()) {\n        head = new Pos(head.line - 1, lineLength(cm, head.line - 1));\n      }\n    }\n    return [anchor, head];\n  }\n  /**\n   * Updates the CodeMirror selection to match the provided vim selection.\n   * If no arguments are given, it uses the current vim selection state.\n   * @arg {CodeMirrorV} cm \n   * @arg {vimState[\"sel\"]} [sel] \n   * @arg {\"char\"|\"line\"|\"block\" | undefined} [mode]\n   */\n  function updateCmSelection(cm, sel, mode) {\n    var vim = cm.state.vim;\n    sel = sel || vim.sel;\n    if (!mode) {\n      mode = vim.visualLine ? 'line' : vim.visualBlock ? 'block' : 'char';\n    }\n    var cmSel = makeCmSelection(cm, sel, mode);\n    cm.setSelections(cmSel.ranges, cmSel.primary);\n  }\n  /**\n   * @arg {CodeMirror} cm \n   * @arg {import(\"./types\").CM5RangeInterface} sel\n   * @arg {\"char\"|\"line\"|\"block\"} mode \n   * @arg {boolean|undefined} [exclusive] \n   */\n  function makeCmSelection(cm, sel, mode, exclusive) {\n    var head = copyCursor(sel.head);\n    var anchor = copyCursor(sel.anchor);\n    if (mode == 'char') {\n      var headOffset = !exclusive && !cursorIsBefore(sel.head, sel.anchor) ? 1 : 0;\n      var anchorOffset = cursorIsBefore(sel.head, sel.anchor) ? 1 : 0;\n      head = offsetCursor(sel.head, 0, headOffset);\n      anchor = offsetCursor(sel.anchor, 0, anchorOffset);\n      return {\n        ranges: [{anchor: anchor, head: head}],\n        primary: 0\n      };\n    } else if (mode == 'line') {\n      if (!cursorIsBefore(sel.head, sel.anchor)) {\n        anchor.ch = 0;\n\n        var lastLine = cm.lastLine();\n        if (head.line > lastLine) {\n          head.line = lastLine;\n        }\n        head.ch = lineLength(cm, head.line);\n      } else {\n        head.ch = 0;\n        anchor.ch = lineLength(cm, anchor.line);\n      }\n      return {\n        ranges: [{anchor: anchor, head: head}],\n        primary: 0\n      };\n    } else if (mode == 'block') {\n      var top = Math.min(anchor.line, head.line),\n          fromCh = anchor.ch,\n          bottom = Math.max(anchor.line, head.line),\n          toCh = head.ch;\n      if (fromCh < toCh) { toCh += 1; }\n      else { fromCh += 1; }      var height = bottom - top + 1;\n      var primary = head.line == top ? 0 : height - 1;\n      var ranges = [];\n      for (var i = 0; i < height; i++) {\n        ranges.push({\n          anchor: new Pos(top + i, fromCh),\n          head: new Pos(top + i, toCh)\n        });\n      }\n      return {\n        ranges: ranges,\n        primary: primary\n      };\n    }\n    throw \"never happens\";\n  }\n  /** @arg {CodeMirror} cm */\n  function getHead(cm) {\n    var cur = cm.getCursor('head');\n    if (cm.getSelection().length == 1) {\n      // Small corner case when only 1 character is selected. The \"real\"\n      // head is the left of head and anchor.\n      cur = cursorMin(cur, cm.getCursor('anchor'));\n    }\n    return cur;\n  }\n\n  /**\n   * If moveHead is set to false, the CodeMirror selection will not be\n   * touched. The caller assumes the responsibility of putting the cursor\n   * in the right place.\n   * @arg {CodeMirrorV} cm \n   * @arg {boolean} [moveHead]\n   */\n  function exitVisualMode(cm, moveHead) {\n    var vim = cm.state.vim;\n    if (moveHead !== false) {\n      cm.setCursor(clipCursorToContent(cm, vim.sel.head));\n    }\n    updateLastSelection(cm, vim);\n    vim.visualMode = false;\n    vim.visualLine = false;\n    vim.visualBlock = false;\n    if (!vim.insertMode) CM.signal(cm, \"vim-mode-change\", {mode: \"normal\"});\n  }\n\n  /** \n   * Remove any trailing newlines from the selection. For\n   * example, with the caret at the start of the last word on the line,\n   * 'dw' should word, but not the newline, while 'w' should advance the\n   * caret to the first character of the next line.\n   * @arg {CodeMirror} cm\n   * @arg {Pos} curStart\n   * @arg {Pos} curEnd\n   */\n  function clipToLine(cm, curStart, curEnd) {\n    var selection = cm.getRange(curStart, curEnd);\n    // Only clip if the selection ends with trailing newline + whitespace\n    if (/\\n\\s*$/.test(selection)) {\n      var lines = selection.split('\\n');\n      // We know this is all whitespace.\n      lines.pop();\n\n      // Cases:\n      // 1. Last word is an empty line - do not clip the trailing '\\n'\n      // 2. Last word is not an empty line - clip the trailing '\\n'\n      // Find the line containing the last word, and clip all whitespace up\n      // to it.\n      for (var line = lines.pop(); lines.length > 0 && line && isWhiteSpaceString(line); line = lines.pop()) {\n        curEnd.line--;\n        curEnd.ch = 0;\n      }\n      // If the last word is not an empty line, clip an additional newline\n      if (line) {\n        curEnd.line--;\n        curEnd.ch = lineLength(cm, curEnd.line);\n      } else {\n        curEnd.ch = 0;\n      }\n    }\n  }\n\n  // Expand the selection to line ends.\n  /** @arg {CodeMirror} _cm  @arg {Pos} curStart  @arg {Pos} curEnd */\n  function expandSelectionToLine(_cm, curStart, curEnd) {\n    curStart.ch = 0;\n    curEnd.ch = 0;\n    curEnd.line++;\n  }\n\n  /** @arg {string} [text] */\n  function findFirstNonWhiteSpaceCharacter(text) {\n    if (!text) {\n      return 0;\n    }\n    var firstNonWS = text.search(/\\S/);\n    return firstNonWS == -1 ? text.length : firstNonWS;\n  }\n\n  /** \n   * @arg {CodeMirror} cm \n   * @arg {{inclusive?: boolean, innerWord?: boolean, bigWord?: boolean, noSymbol?: boolean, multiline?: boolean}} options\n   * @arg {Pos} [cursor]\n   **/\n  function expandWordUnderCursor(cm, {inclusive, innerWord, bigWord, noSymbol, multiline}, cursor) {\n    var cur = cursor || getHead(cm);\n    var line = cm.getLine(cur.line);\n    var endLine = line;\n    var startLineNumber = cur.line;\n    var endLineNumber = startLineNumber;\n    var idx = cur.ch;\n\n    var wordOnNextLine;\n    // Seek to first word or non-whitespace character, depending on if\n    // noSymbol is true.\n    var test = noSymbol ? wordCharTest[0] : bigWordCharTest [0];\n    if (innerWord && /\\s/.test(line.charAt(idx))) {\n      test = function(/** @type {string} */ ch) { return /\\s/.test(ch); };\n    } else {\n      while (!test(line.charAt(idx))) {\n        idx++;\n        if (idx >= line.length) {\n          if (!multiline) return null;\n          idx--;\n          wordOnNextLine = findWord(cm, cur, true, bigWord, true);\n          break\n        }\n      }\n\n      if (bigWord) {\n        test = bigWordCharTest[0];\n      } else {\n        test = wordCharTest[0];\n        if (!test(line.charAt(idx))) {\n          test = wordCharTest[1];\n        }\n      }\n    }\n\n    var end = idx, start = idx;\n    while (test(line.charAt(start)) && start >= 0) { start--; }\n    start++;\n    if (wordOnNextLine) {\n      end = wordOnNextLine.to;\n      endLineNumber = wordOnNextLine.line;\n      endLine = cm.getLine(endLineNumber);\n      if (!endLine && end == 0) end++;\n    } else {\n      while (test(line.charAt(end)) && end < line.length) { end++; }\n    }\n\n    if (inclusive) {\n      // If present, include all whitespace after word.\n      // Otherwise, include all whitespace before word, except indentation.\n      var wordEnd = end;\n      var startsWithSpace = cur.ch <= start && /\\s/.test(line.charAt(cur.ch));\n      if (!startsWithSpace) {\n        while (/\\s/.test(endLine.charAt(end)) && end < endLine.length) { end++; }\n      }\n      if (wordEnd == end || startsWithSpace) {\n        var wordStart = start;\n        while (/\\s/.test(line.charAt(start - 1)) && start > 0) { start--; }\n        if (!start && !startsWithSpace) { start = wordStart; }\n      }\n    }\n\n    return { start: new Pos(startLineNumber, start), end: new Pos(endLineNumber, end) };\n  }\n\n  /**\n   * Depends on the following:\n   *\n   * - editor mode should be htmlmixedmode / xml\n   * - mode/xml/xml.js should be loaded\n   * - addon/fold/xml-fold.js should be loaded\n   *\n   * If any of the above requirements are not true, this function noops.\n   *\n   * This is _NOT_ a 100% accurate implementation of vim tag text objects.\n   * The following caveats apply (based off cursory testing, I'm sure there\n   * are other discrepancies):\n   *\n   * - Does not work inside comments:\n   *   ```\n   *   <!-- <div>broken</div> -->\n   *   ```\n   * - Does not work when tags have different cases:\n   *   ```\n   *   <div>broken</DIV>\n   *   ```\n   * - Does not work when cursor is inside a broken tag:\n   *   ```\n   *   <div><brok><en></div>\n   *   ```\n   * @arg {CodeMirror} cm \n   * @arg {Pos} head \n   * @arg {boolean} [inclusive]\n   */\n  function expandTagUnderCursor(cm, head, inclusive) {\n    var cur = head;\n    if (!CM.findMatchingTag || !CM.findEnclosingTag) {\n      return { start: cur, end: cur };\n    }\n\n    var tags = CM.findMatchingTag(cm, head) || CM.findEnclosingTag(cm, head);\n    if (!tags || !tags.open || !tags.close) {\n      return { start: cur, end: cur };\n    }\n\n    if (inclusive) {\n      return { start: tags.open.from, end: tags.close.to };\n    }\n    return { start: tags.open.to, end: tags.close.from };\n  }\n\n  /** @arg {CodeMirror} cm @arg {Pos} oldCur @arg {Pos} newCur */\n  function recordJumpPosition(cm, oldCur, newCur) {\n    if (!cursorEqual(oldCur, newCur)) {\n      vimGlobalState.jumpList.add(cm, oldCur, newCur);\n    }\n  }\n\n  /** @arg {number} increment  @arg {{ forward?: any; selectedCharacter?: any; }} args */\n  function recordLastCharacterSearch(increment, args) {\n      vimGlobalState.lastCharacterSearch.increment = increment;\n      vimGlobalState.lastCharacterSearch.forward = args.forward;\n      vimGlobalState.lastCharacterSearch.selectedCharacter = args.selectedCharacter;\n  }\n\n  /**@type{Record<string, keyof findSymbolModes>} */\n  var symbolToMode = {\n      '(': 'bracket', ')': 'bracket', '{': 'bracket', '}': 'bracket',\n      '[': 'section', ']': 'section',\n      '*': 'comment', '/': 'comment',\n      'm': 'method', 'M': 'method',\n      '#': 'preprocess'\n  };\n\n  /** \n    @typedef { {\n    lineText: string,\n    nextCh: string,\n    lastCh: string|null,\n    index: number,\n    symb: string,\n    reverseSymb: any,\n    forward?: boolean,\n    depth: number,\n    curMoveThrough: boolean\n  } } findSymbolState */\n  /** \n   * @type {Record<string, { \n   *  isComplete(state: findSymbolState): boolean,\n   *  init?(state: findSymbolState): void \n   * }>} */\n  var findSymbolModes = {\n    bracket: {\n      isComplete: function(state) {\n        if (state.nextCh === state.symb) {\n          state.depth++;\n          if (state.depth >= 1)return true;\n        } else if (state.nextCh === state.reverseSymb) {\n          state.depth--;\n        }\n        return false;\n      }\n    },\n    section: {\n      init: function(state) {\n        state.curMoveThrough = true;\n        state.symb = (state.forward ? ']' : '[') === state.symb ? '{' : '}';\n      },\n      isComplete: function(state) {\n        return state.index === 0 && state.nextCh === state.symb;\n      }\n    },\n    comment: {\n      isComplete: function(state) {\n        var found = state.lastCh === '*' && state.nextCh === '/';\n        state.lastCh = state.nextCh;\n        return found;\n      }\n    },\n    // TODO: The original Vim implementation only operates on level 1 and 2.\n    // The current implementation doesn't check for code block level and\n    // therefore it operates on any levels.\n    method: {\n      init: function(state) {\n        state.symb = (state.symb === 'm' ? '{' : '}');\n        state.reverseSymb = state.symb === '{' ? '}' : '{';\n      },\n      isComplete: function(state) {\n        if (state.nextCh === state.symb)return true;\n        return false;\n      }\n    },\n    preprocess: {\n      init: function(state) {\n        state.index = 0;\n      },\n      isComplete: function(state) {\n        if (state.nextCh === '#') {\n          var token = state.lineText.match(/^#(\\w+)/)?.[1];\n          if (token === 'endif') {\n            if (state.forward && state.depth === 0) {\n              return true;\n            }\n            state.depth++;\n          } else if (token === 'if') {\n            if (!state.forward && state.depth === 0) {\n              return true;\n            }\n            state.depth--;\n          }\n          if (token === 'else' && state.depth === 0)return true;\n        }\n        return false;\n      }\n    }      \n  };\n  /** @arg {CodeMirrorV} cm  @arg {number} repeat  @arg {boolean|undefined} forward  @arg {string} symb */\n  function findSymbol(cm, repeat, forward, symb) {\n    var cur = copyCursor(cm.getCursor());\n    var increment = forward ? 1 : -1;\n    var endLine = forward ? cm.lineCount() : -1;\n    var curCh = cur.ch;\n    var line = cur.line;\n    var lineText = cm.getLine(line);\n    var state = {\n      lineText: lineText,\n      nextCh: lineText.charAt(curCh),\n      lastCh: null,\n      index: curCh,\n      symb: symb,\n      reverseSymb: (forward ?  { ')': '(', '}': '{' } : { '(': ')', '{': '}' })[symb],\n      forward: forward,\n      depth: 0,\n      curMoveThrough: false\n    };\n    var mode = symbolToMode[symb];\n    if (!mode)return cur;\n    var init = findSymbolModes[mode].init;\n    var isComplete = findSymbolModes[mode].isComplete;\n    if (init) { init(state); }\n    while (line !== endLine && repeat) {\n      state.index += increment;\n      state.nextCh = state.lineText.charAt(state.index);\n      if (!state.nextCh) {\n        line += increment;\n        state.lineText = cm.getLine(line) || '';\n        if (increment > 0) {\n          state.index = 0;\n        } else {\n          var lineLen = state.lineText.length;\n          state.index = (lineLen > 0) ? (lineLen-1) : 0;\n        }\n        state.nextCh = state.lineText.charAt(state.index);\n      }\n      if (isComplete(state)) {\n        cur.line = line;\n        cur.ch = state.index;\n        repeat--;\n      }\n    }\n    if (state.nextCh || state.curMoveThrough) {\n      return new Pos(line, state.index);\n    }\n    return cur;\n  }\n\n  /**\n   * Returns the boundaries of the next word. If the cursor in the middle of\n   * the word, then returns the boundaries of the current word, starting at\n   * the cursor. If the cursor is at the start/end of a word, and we are going\n   * forward/backward, respectively, find the boundaries of the next word.\n   *\n   * @arg {CodeMirror} cm CodeMirror object.\n   * @arg {Pos} cur The cursor position.\n   * @arg {boolean} forward True to search forward. False to search\n   *     backward.\n   * @arg {boolean|undefined} bigWord True if punctuation count as part of the word.\n   *     False if only [a-zA-Z0-9] characters count as part of the word.\n   * @arg {boolean|undefined} emptyLineIsWord True if empty lines should be treated\n   *     as words.\n   * @return {{from:number, to:number, line: number}|null} The boundaries of\n   *     the word, or null if there are no more words.\n   */\n  function findWord(cm, cur, forward, bigWord, emptyLineIsWord) {\n    var lineNum = cur.line;\n    var pos = cur.ch;\n    var line = cm.getLine(lineNum);\n    var dir = forward ? 1 : -1;\n    var charTests = bigWord ? bigWordCharTest: wordCharTest;\n\n    if (emptyLineIsWord && line == '') {\n      lineNum += dir;\n      line = cm.getLine(lineNum);\n      if (!isLine(cm, lineNum)) {\n        return null;\n      }\n      pos = (forward) ? 0 : line.length;\n    }\n\n    while (true) {\n      if (emptyLineIsWord && line == '') {\n        return { from: 0, to: 0, line: lineNum };\n      }\n      var stop = (dir > 0) ? line.length : -1;\n      var wordStart = stop, wordEnd = stop;\n      // Find bounds of next word.\n      while (pos != stop) {\n        var foundWord = false;\n        for (var i = 0; i < charTests.length && !foundWord; ++i) {\n          if (charTests[i](line.charAt(pos))) {\n            wordStart = pos;\n            // Advance to end of word.\n            while (pos != stop && charTests[i](line.charAt(pos))) {\n              pos += dir;\n            }\n            wordEnd = pos;\n            foundWord = wordStart != wordEnd;\n            if (wordStart == cur.ch && lineNum == cur.line &&\n                wordEnd == wordStart + dir) {\n              // We started at the end of a word. Find the next one.\n              continue;\n            } else {\n              return {\n                from: Math.min(wordStart, wordEnd + 1),\n                to: Math.max(wordStart, wordEnd),\n                line: lineNum };\n            }\n          }\n        }\n        if (!foundWord) {\n          pos += dir;\n        }\n      }\n      // Advance to next/prev line.\n      lineNum += dir;\n      if (!isLine(cm, lineNum)) {\n        return null;\n      }\n      line = cm.getLine(lineNum);\n      pos = (dir > 0) ? 0 : line.length;\n    }\n  }\n\n  /**\n   * @arg {CodeMirror} cm CodeMirror object.\n   * @arg {Pos} cur The position to start from.\n   * @arg {number} repeat Number of words to move past.\n   * @arg {boolean} forward True to search forward. False to search\n   *     backward.\n   * @arg {boolean} wordEnd True to move to end of word. False to move to\n   *     beginning of word.\n   * @arg {boolean} bigWord True if punctuation count as part of the word.\n   *     False if only alphabet characters count as part of the word.\n   * @return {Pos|undefined} The position the cursor should move to.\n   */\n  function moveToWord(cm, cur, repeat, forward, wordEnd, bigWord) {\n    var curStart = copyCursor(cur);\n    var words = [];\n    if (forward && !wordEnd || !forward && wordEnd) {\n      repeat++;\n    }\n    // For 'e', empty lines are not considered words, go figure.\n    var emptyLineIsWord = !(forward && wordEnd);\n    for (var i = 0; i < repeat; i++) {\n      var word = findWord(cm, cur, forward, bigWord, emptyLineIsWord);\n      if (!word) {\n        var eodCh = lineLength(cm, cm.lastLine());\n        words.push(forward\n            ? {line: cm.lastLine(), from: eodCh, to: eodCh}\n            : {line: 0, from: 0, to: 0});\n        break;\n      }\n      words.push(word);\n      cur = new Pos(word.line, forward ? (word.to - 1) : word.from);\n    }\n    var shortCircuit = words.length != repeat;\n    var firstWord = words[0];\n    var lastWord = words.pop();\n    if (forward && !wordEnd) {\n      // w\n      if (!shortCircuit && (firstWord.from != curStart.ch || firstWord.line != curStart.line)) {\n        // We did not start in the middle of a word. Discard the extra word at the end.\n        lastWord = words.pop();\n      }\n      return lastWord && new Pos(lastWord.line, lastWord.from);\n    } else if (forward && wordEnd) {\n      return lastWord && new Pos(lastWord.line, lastWord.to - 1);\n    } else if (!forward && wordEnd) {\n      // ge\n      if (!shortCircuit && (firstWord.to != curStart.ch || firstWord.line != curStart.line)) {\n        // We did not start in the middle of a word. Discard the extra word at the end.\n        lastWord = words.pop();\n      }\n      return lastWord && new Pos(lastWord.line, lastWord.to);\n    } else {\n      // b\n      return lastWord && new Pos(lastWord.line, lastWord.from);\n    }\n  }\n\n  /**\n   * @arg {CodeMirror} cm \n   * @arg {Pos} head \n   * @arg {MotionArgs} motionArgs \n   * @arg {vimState} vim \n   * @arg {boolean} keepHPos */\n  function moveToEol(cm, head, motionArgs, vim, keepHPos) {\n    var cur = head;\n    var retval= new Pos(cur.line + motionArgs.repeat - 1, Infinity);\n    var end=cm.clipPos(retval);\n    end.ch--;\n    if (!keepHPos) {\n      vim.lastHPos = Infinity;\n      vim.lastHSPos = cm.charCoords(end,'div').left;\n    }\n    return retval;\n  }\n\n  /** \n   * @arg {CodeMirror} cm \n   * @arg {number} repeat \n   * @arg {boolean} [forward]\n   * @arg {string} [character]\n   * @arg {Pos} [head]\n   */\n  function moveToCharacter(cm, repeat, forward, character, head) {\n    if (!character) return;\n    var cur = head || cm.getCursor();\n    var start = cur.ch;\n    var idx;\n    for (var i = 0; i < repeat; i ++) {\n      var line = cm.getLine(cur.line);\n      idx = charIdxInLine(start, line, character, forward);\n      if (idx == -1) {\n        return undefined;\n      }\n      start = idx;\n    }\n    if (idx != undefined)\n      return new Pos(cm.getCursor().line, idx);\n  }\n\n  /** @arg {CodeMirrorV} cm @arg {number} repeat */\n  function moveToColumn(cm, repeat) {\n    // repeat is always >= 1, so repeat - 1 always corresponds\n    // to the column we want to go to.\n    var line = cm.getCursor().line;\n    return clipCursorToContent(cm, new Pos(line, repeat - 1));\n  }\n\n  /**\n   * @arg {CodeMirror} cm \n   * @arg {vimState} vim \n   * @arg {string} markName \n   * @arg {Pos} pos */\n  function updateMark(cm, vim, markName, pos) {\n    if (!inArray(markName, validMarks) && !latinCharRegex.test(markName)) {\n      return;\n    }\n    if (vim.marks[markName]) {\n      vim.marks[markName].clear();\n    }\n    vim.marks[markName] = cm.setBookmark(pos);\n  }\n\n  /**\n   * @arg {number} start \n   * @arg {string | any[]} line \n   * @arg {any} character \n   * @arg {boolean} [forward] \n   * @arg {boolean} [includeChar] */\n  function charIdxInLine(start, line, character, forward, includeChar) {\n    // Search for char in line.\n    // motion_options: {forward, includeChar}\n    // If includeChar = true, include it too.\n    // If forward = true, search forward, else search backwards.\n    // If char is not found on this line, do nothing\n    var idx;\n    if (forward) {\n      idx = line.indexOf(character, start + 1);\n    } else {\n      idx = line.lastIndexOf(character, start - 1);\n    }\n    return idx;\n  }\n\n  /** @arg {CodeMirrorV} cm \n   * @arg {Pos} head \n   * @arg {number} repeat \n   * @arg {number} dir \n   * @arg {boolean} [inclusive] */\n  function findParagraph(cm, head, repeat, dir, inclusive) {\n    var line = head.line;\n    var min = cm.firstLine();\n    var max = cm.lastLine();\n    var start, end, i = line;\n    /** @arg {number} i */\n    function isEmpty(i) { return !cm.getLine(i); }\n    /** @arg {number} i @arg {number} dir @arg {boolean} [any] */\n    function isBoundary(i, dir, any) {\n      if (any) { return isEmpty(i) != isEmpty(i + dir); }\n      return !isEmpty(i) && isEmpty(i + dir);\n    }\n    if (dir) {\n      while (min <= i && i <= max && repeat > 0) {\n        if (isBoundary(i, dir)) { repeat--; }\n        i += dir;\n      }\n      return {start: new Pos(i, 0), end: head};\n    }\n\n    var vim = cm.state.vim;\n    if (vim.visualLine && isBoundary(line, 1, true)) {\n      var anchor = vim.sel.anchor;\n      if (isBoundary(anchor.line, -1, true)) {\n        if (!inclusive || anchor.line != line) {\n          line += 1;\n        }\n      }\n    }\n    var startState = isEmpty(line);\n    for (i = line; i <= max && repeat; i++) {\n      if (isBoundary(i, 1, true)) {\n        if (!inclusive || isEmpty(i) != startState) {\n          repeat--;\n        }\n      }\n    }\n    end = new Pos(i, 0);\n    // select boundary before paragraph for the last one\n    if (i > max && !startState) { startState = true; }\n    else { inclusive = false; }\n    for (i = line; i > min; i--) {\n      if (!inclusive || isEmpty(i) == startState || i == line) {\n        if (isBoundary(i, -1, true)) { break; }\n      }\n    }\n    start = new Pos(i, 0);\n    return { start: start, end: end };\n  }\n\n  /**\n   * Based on {@link findSentence}. The internal functions have the same names,\n   * but their behaviour is different. findSentence() crosses line breaks and \n   * is used for jumping to sentence beginnings before or after the current cursor position, \n   * whereas getSentence() is for getting the beginning or end of the sentence \n   * at the current cursor position, either including (a) or excluding (i) whitespace.\n   * @arg {CodeMirror} cm\n   * @arg {Pos} cur\n   * @arg {number} repeat\n   * @arg {1|-1} dir\n   * @arg {boolean} inclusive\n   */\n  function getSentence(cm, cur, repeat, dir, inclusive /*includes whitespace*/) {\n\n    /**\n      Takes an index object\n      @arg {{\n        line: string|null,\n        ln:  number,\n        pos: number,\n        dir: -1|1\n      }} curr\n      and modifies the pos member to represent the\n      next valid position or sets the line to null if there are\n      no more valid positions.\n      */\n    function nextChar(curr) {\n      if (curr.line === null) return;\n      if (curr.pos + curr.dir < 0 || curr.pos + curr.dir >= curr.line.length) {\n        curr.line = null;\n      }\n      else {\n        curr.pos += curr.dir;\n      }\n    }\n    /**\n     * Performs one iteration of traversal in forward direction\n     * Returns an index object of the sentence end\n     * @arg {CodeMirror} cm\n     * @arg {number} ln\n     * @arg {number} pos\n     * @arg {1|-1} dir\n     */\n    function forward(cm, ln, pos, dir) {\n      var line = cm.getLine(ln);\n\n      var curr = {\n        line: line,\n        ln: ln,\n        pos: pos,\n        dir: dir,\n      };\n\n      if (curr.line === \"\") {\n        return { ln: curr.ln, pos: curr.pos };\n      }\n\n      var lastSentencePos = curr.pos;\n\n      // Move one step to skip character we start on\n      nextChar(curr);\n\n      while (curr.line !== null) {\n        lastSentencePos = curr.pos;\n        if (isEndOfSentenceSymbol(curr.line[curr.pos])) {\n          if (!inclusive) {\n            return { ln: curr.ln, pos: curr.pos + 1 };\n          } \n          else {\n            nextChar(curr);\n            while (curr.line !== null ) {\n              if (isWhiteSpaceString(curr.line[curr.pos])) {\n                lastSentencePos = curr.pos;\n                nextChar(curr);\n              } \n              else {\n                break;\n              }\n            }\n            return { ln: curr.ln, pos: lastSentencePos + 1 };\n          }\n        }\n        nextChar(curr);\n      }\n      return { ln: curr.ln, pos: lastSentencePos + 1 };\n    }\n\n    /** \n     * Performs one iteration of traversal in reverse direction\n     * Returns an index object of the sentence start\n     * @arg {CodeMirror} cm  \n     * @arg {number} ln  \n     * @arg {number} pos  \n     * @arg {1|-1} dir\n     */\n    function reverse(cm, ln, pos, dir) {\n      var line = cm.getLine(ln);\n\n      var curr = {\n        line: line,\n        ln: ln,\n        pos: pos,\n        dir: dir,\n      };\n\n      if (curr.line === \"\") {\n        return { ln: curr.ln, pos: curr.pos };\n      }\n\n      var lastSentencePos = curr.pos;\n\n      // Move one step to skip character we start on\n      nextChar(curr);\n\n      while (curr.line !== null) {\n        if (!isWhiteSpaceString(curr.line[curr.pos]) && !isEndOfSentenceSymbol(curr.line[curr.pos])) {\n          lastSentencePos = curr.pos;\n        }\n\n        else if (isEndOfSentenceSymbol(curr.line[curr.pos]) ) {\n          if (!inclusive) {\n            return { ln: curr.ln, pos: lastSentencePos };\n          } \n          else {\n            if (isWhiteSpaceString(curr.line[curr.pos + 1])) {\n              return { ln: curr.ln, pos: curr.pos + 1 };\n            } \n            else {\n              return { ln: curr.ln, pos: lastSentencePos };\n            }\n          }\n        }\n\n        nextChar(curr);\n      }\n      curr.line = line;\n      if (inclusive && isWhiteSpaceString(curr.line[curr.pos])) {\n        return { ln: curr.ln, pos: curr.pos };\n      } \n      else {\n        return { ln: curr.ln, pos: lastSentencePos };\n      }\n\n    }\n\n    var curr_index = {\n      ln: cur.line,\n      pos: cur.ch,\n    };\n\n    while (repeat > 0) {\n      if (dir < 0) {\n        curr_index = reverse(cm, curr_index.ln, curr_index.pos, dir);\n      }\n      else {\n        curr_index = forward(cm, curr_index.ln, curr_index.pos, dir);\n      }\n      repeat--;\n    }\n\n    return new Pos(curr_index.ln, curr_index.pos);\n  }\n  /**\n   * @arg {CodeMirror} cm\n   * @arg {Pos} cur\n   * @arg {number} repeat\n   * @arg {number} dir\n   */\n  function findSentence(cm, cur, repeat, dir) {\n\n      /**\n       * @arg {CodeMirror} cm\n        Takes an index object\n        @arg { {\n          line: string|null,\n          ln: number, // line number\n          pos: number, // index in line,\n          dir: number // direction of traversal (-1 or 1)\n        }} idx\n        and modifies the line, ln, and pos members to represent the\n        next valid position or sets them to null if there are\n        no more valid positions.\n      */\n    function nextChar(cm, idx) {\n      if (idx.line === null) return;\n      if (idx.pos + idx.dir < 0 || idx.pos + idx.dir >= idx.line.length) {\n        idx.ln += idx.dir;\n        if (!isLine(cm, idx.ln)) {\n          idx.line = null;\n          return;\n        }\n        idx.line = cm.getLine(idx.ln);\n        idx.pos = (idx.dir > 0) ? 0 : idx.line.length - 1;\n      }\n      else {\n        idx.pos += idx.dir;\n      }\n    }\n\n    /*\n      Performs one iteration of traversal in forward direction\n      Returns an index object of the new location\n      */\n    /** @arg {CodeMirror} cm @arg {number} ln  @arg {number} pos  @arg {number} dir */\n    function forward(cm, ln, pos, dir) {\n      var line = cm.getLine(ln);\n      var stop = (line === \"\");\n\n      var curr = {\n        line: line,\n        ln: ln,\n        pos: pos,\n        dir: dir,\n      };\n\n      var last_valid = {\n        ln: curr.ln,\n        pos: curr.pos,\n      };\n\n      var skip_empty_lines = (curr.line === \"\");\n\n      // Move one step to skip character we start on\n      nextChar(cm, curr);\n\n      while (curr.line !== null) {\n        last_valid.ln = curr.ln;\n        last_valid.pos = curr.pos;\n\n        if (curr.line === \"\" && !skip_empty_lines) {\n          return { ln: curr.ln, pos: curr.pos, };\n        }\n        else if (stop && curr.line !== \"\" && !isWhiteSpaceString(curr.line[curr.pos])) {\n          return { ln: curr.ln, pos: curr.pos, };\n        }\n        else if (isEndOfSentenceSymbol(curr.line[curr.pos])\n          && !stop\n          && (curr.pos === curr.line.length - 1\n            || isWhiteSpaceString(curr.line[curr.pos + 1]))) {\n          stop = true;\n        }\n\n        nextChar(cm, curr);\n      }\n\n      /*\n        Set the position to the last non whitespace character on the last\n        valid line in the case that we reach the end of the document.\n      */\n      var line = cm.getLine(last_valid.ln);\n      last_valid.pos = 0;\n      for(var i = line.length - 1; i >= 0; --i) {\n        if (!isWhiteSpaceString(line[i])) {\n          last_valid.pos = i;\n          break;\n        }\n      }\n\n      return last_valid;\n\n    }\n\n    /**\n     * Performs one iteration of traversal in reverse direction\n     * Returns an index object of the new location\n     * @arg {CodeMirror} cm  @arg {number} ln  @arg {number} pos  @arg {number} dir\n     */\n    function reverse(cm, ln, pos, dir) {\n      var line = cm.getLine(ln);\n\n      var curr = {\n        line: line,\n        ln: ln,\n        pos: pos,\n        dir: dir,\n      };\n\n      var last_valid_ln = curr.ln;\n      /**@type{number|null}*/var last_valid_pos = null;\n\n      var skip_empty_lines = (curr.line === \"\");\n\n      // Move one step to skip character we start on\n      nextChar(cm, curr);\n\n      while (curr.line !== null) {\n\n        if (curr.line === \"\" && !skip_empty_lines) {\n          if (last_valid_pos !== null) {\n            return { ln: last_valid_ln, pos: last_valid_pos };\n          }\n          else {\n            return { ln: curr.ln, pos: curr.pos };\n          }\n        }\n        else if (isEndOfSentenceSymbol(curr.line[curr.pos])\n            && last_valid_pos !== null\n            && !(curr.ln === last_valid_ln && curr.pos + 1 === last_valid_pos)) {\n          return { ln: last_valid_ln, pos: last_valid_pos  };\n        }\n        else if (curr.line !== \"\" && !isWhiteSpaceString(curr.line[curr.pos])) {\n          skip_empty_lines = false;\n          last_valid_ln = curr.ln;\n          last_valid_pos = curr.pos;\n        }\n\n        nextChar(cm, curr);\n      }\n\n      /*\n        Set the position to the first non whitespace character on the last\n        valid line in the case that we reach the beginning of the document.\n      */\n      var line = cm.getLine(last_valid_ln);\n      last_valid_pos = 0;\n      for(var i = 0; i < line.length; ++i) {\n        if (!isWhiteSpaceString(line[i])) {\n          last_valid_pos = i;\n          break;\n        }\n      }\n      return { ln: last_valid_ln, pos: last_valid_pos };\n    }\n\n    var curr_index = {\n      ln: cur.line,\n      pos: cur.ch,\n    };\n\n    while (repeat > 0) {\n      if (dir < 0) {\n        curr_index = reverse(cm, curr_index.ln, curr_index.pos, dir);\n      }\n      else {\n        curr_index = forward(cm, curr_index.ln, curr_index.pos, dir);\n      }\n      repeat--;\n    }\n\n    return new Pos(curr_index.ln, curr_index.pos);\n  }\n\n  // TODO: perhaps this finagling of start and end positions belongs\n  // in codemirror/replaceRange?\n  /** @arg {CodeMirror} cm  @arg {Pos} head @arg {string | number} symb @arg {boolean} inclusive */\n  function selectCompanionObject(cm, head, symb, inclusive) {\n    var cur = head;\n\n    var bracketRegexp = ({\n      '(': /[()]/, ')': /[()]/,\n      '[': /[[\\]]/, ']': /[[\\]]/,\n      '{': /[{}]/, '}': /[{}]/,\n      '<': /[<>]/, '>': /[<>]/})[symb];\n    var openSym = ({\n      '(': '(', ')': '(',\n      '[': '[', ']': '[',\n      '{': '{', '}': '{',\n      '<': '<', '>': '<'})[symb];\n    var curChar = cm.getLine(cur.line).charAt(cur.ch);\n    // Due to the behavior of scanForBracket, we need to add an offset if the\n    // cursor is on a matching open bracket.\n    var offset = curChar === openSym ? 1 : 0;\n\n    var startBracket = cm.scanForBracket(new Pos(cur.line, cur.ch + offset), -1, undefined, {'bracketRegex': bracketRegexp});\n    var endBracket = cm.scanForBracket(new Pos(cur.line, cur.ch + offset), 1, undefined, {'bracketRegex': bracketRegexp});\n\n    if (!startBracket || !endBracket) return null;\n\n    var start = startBracket.pos; \n    var end = endBracket.pos;\n\n    if ((start.line == end.line && start.ch > end.ch)\n        || (start.line > end.line)) {\n      var tmp = start;\n      start = end;\n      end = tmp;\n    }\n\n    if (inclusive) {\n      end.ch += 1;\n    } else {\n      start.ch += 1;\n    }\n\n    return { start: start, end: end };\n  }\n\n  // Takes in a symbol and a cursor and tries to simulate text objects that\n  // have identical opening and closing symbols\n  // TODO support across multiple lines\n  /** @arg {CodeMirror} cm  @arg {Pos} head  @arg {string} symb @arg {boolean} inclusive */\n  function findBeginningAndEnd(cm, head, symb, inclusive) {\n    var cur = copyCursor(head);\n    var line = cm.getLine(cur.line);\n    var chars = line.split('');\n    var start, end, i, len;\n    var firstIndex = chars.indexOf(symb);\n\n    // the decision tree is to always look backwards for the beginning first,\n    // but if the cursor is in front of the first instance of the symb,\n    // then move the cursor forward\n    if (cur.ch < firstIndex) {\n      cur.ch = firstIndex;\n    }\n    // otherwise if the cursor is currently on the closing symbol\n    else if (firstIndex < cur.ch && chars[cur.ch] == symb) {\n      var stringAfter = /string/.test(cm.getTokenTypeAt(offsetCursor(head, 0, 1)));\n      var stringBefore = /string/.test(cm.getTokenTypeAt(head));\n      var isStringStart = stringAfter && !stringBefore;\n      if (!isStringStart) {\n        end = cur.ch; // assign end to the current cursor\n        --cur.ch; // make sure to look backwards\n      }\n    }\n\n    // if we're currently on the symbol, we've got a start\n    if (chars[cur.ch] == symb && !end) {\n      start = cur.ch + 1; // assign start to ahead of the cursor\n    } else {\n      // go backwards to find the start\n      for (i = cur.ch; i > -1 && !start; i--) {\n        if (chars[i] == symb) {\n          start = i + 1;\n        }\n      }\n    }\n\n    // look forwards for the end symbol\n    if (start && !end) {\n      for (i = start, len = chars.length; i < len && !end; i++) {\n        if (chars[i] == symb) {\n          end = i;\n        }\n      }\n    }\n\n    // nothing found\n    if (!start || !end) {\n      return { start: cur, end: cur };\n    }\n\n    // include the symbols\n    if (inclusive) {\n      --start; ++end;\n    }\n\n    return {\n      start: new Pos(cur.line, start),\n      end: new Pos(cur.line, end)\n    };\n  }\n\n  // Search functions\n  defineOption('pcre', true, 'boolean');\n  \n  /**@type {SearchStateInterface} */\n  class SearchState {\n    constructor() {\n      /**@type{number|undefined} */\n      this.highlightTimeout;\n    }\n    getQuery() {\n      return vimGlobalState.query;\n    };\n    setQuery(query) {\n      vimGlobalState.query = query;\n    };\n    getOverlay() {\n      return this.searchOverlay;\n    };\n    setOverlay(overlay) {\n      this.searchOverlay = overlay;\n    };\n    isReversed() {\n      return vimGlobalState.isReversed;\n    };\n    setReversed(reversed) {\n      vimGlobalState.isReversed = reversed;\n    };\n    getScrollbarAnnotate() {\n      return this.annotate;\n    };\n    setScrollbarAnnotate(annotate) {\n      this.annotate = annotate;\n    };\n  }  /** @arg {CodeMirrorV} cm @returns {SearchStateInterface} */\n  function getSearchState(cm) {\n    var vim = cm.state.vim;\n    return vim.searchState_ || (vim.searchState_ = new SearchState());\n  }\n  /** @arg {string} argString */\n  function splitBySlash(argString) {\n    return splitBySeparator(argString, '/');\n  }\n\n  /** @arg {string} argString */\n  function findUnescapedSlashes(argString) {\n    return findUnescapedSeparators(argString, '/');\n  }\n\n  /** @arg {string} argString  @arg {string} separator */\n  function splitBySeparator(argString, separator) {\n    var slashes = findUnescapedSeparators(argString, separator) || [];\n    if (!slashes.length) return [];\n    var tokens = [];\n    // in case of strings like foo/bar\n    if (slashes[0] !== 0) return;\n    for (var i = 0; i < slashes.length; i++) {\n      if (typeof slashes[i] == 'number')\n        tokens.push(argString.substring(slashes[i] + 1, slashes[i+1]));\n    }\n    return tokens;\n  }\n\n  /** @arg {string} str  @arg {string} separator */\n  function findUnescapedSeparators(str, separator) {\n    if (!separator)\n      separator = '/';\n\n    var escapeNextChar = false;\n    var slashes = [];\n    for (var i = 0; i < str.length; i++) {\n      var c = str.charAt(i);\n      if (!escapeNextChar && c == separator) {\n        slashes.push(i);\n      }\n      escapeNextChar = !escapeNextChar && (c == '\\\\');\n    }\n    return slashes;\n  }\n\n  // Translates a search string from ex (vim) syntax into javascript form.\n  /** @arg {string} str */\n  function translateRegex(str) {\n    // When these match, add a '\\' if unescaped or remove one if escaped.\n    var modes = {\n      V: '|(){+?*.[$^', // verynomagic\n      M: '|(){+?*.[', // nomagic\n      m: '|(){+?', // magic\n      v: '<>', // verymagic\n    };\n    var escapes = {\n      '>': '(?<=[\\\\w])(?=[^\\\\w]|$)',\n      '<': '(?<=[^\\\\w]|^)(?=[\\\\w])',\n    };\n    var specials = modes.m;\n    var regex = str.replace(/\\\\.|[\\[|(){+*?.$^<>]/g, function(match) {\n      if (match[0] === '\\\\') {\n        var nextChar = match[1];\n        if (nextChar === '}' || specials.indexOf(nextChar) != -1) {\n          return nextChar;\n        }\n        if (nextChar in modes) {\n           specials = modes[nextChar];\n           return '';\n        }\n        if (nextChar in escapes) {\n          return escapes[nextChar];\n        }\n        return match;\n      } else {\n        if (specials.indexOf(match) != -1) {\n          return escapes[match] || '\\\\' + match; \n        }\n        return match;\n      }\n    });\n\n    var i = regex.indexOf('\\\\zs');\n    if (i != -1) {\n      regex = '(?<=' + regex.slice(0, i) + ')' + regex.slice(i + 3);\n    }\n    i = regex.indexOf('\\\\ze');\n    if (i != -1) {\n      regex = regex.slice(0, i) +  '(?=' + regex.slice(i + 3) + ')';\n    }\n\n    return regex;\n  }\n\n  // Translates the replace part of a search and replace from ex (vim) syntax into\n  // javascript form.  Similar to translateRegex, but additionally fixes back references\n  // (translates '\\[0..9]' to '$[0..9]') and follows different rules for escaping '$'.\n  /** @type{Object<string, string>} */\n  var charUnescapes = {'\\\\n': '\\n', '\\\\r': '\\r', '\\\\t': '\\t'};\n  /** @arg {string} str */\n  function translateRegexReplace(str) {\n    var escapeNextChar = false;\n    var out = [];\n    for (var i = -1; i < str.length; i++) {\n      var c = str.charAt(i) || '';\n      var n = str.charAt(i+1) || '';\n      if (charUnescapes[c + n]) {\n        out.push(charUnescapes[c+n]);\n        i++;\n      } else if (escapeNextChar) {\n        // At any point in the loop, escapeNextChar is true if the previous\n        // character was a '\\' and was not escaped.\n        out.push(c);\n        escapeNextChar = false;\n      } else {\n        if (c === '\\\\') {\n          escapeNextChar = true;\n          if ((isNumber(n) || n === '$')) {\n            out.push('$');\n          } else if (n !== '/' && n !== '\\\\') {\n            out.push('\\\\');\n          }\n        } else {\n          if (c === '$') {\n            out.push('$');\n          }\n          out.push(c);\n          if (n === '/') {\n            out.push('\\\\');\n          }\n        }\n      }\n    }\n    return out.join('');\n  }\n\n  // Unescape \\ and / in the replace part, for PCRE mode.\n  /** @type{Record<string, string>} */\n  var unescapes = {'\\\\/': '/', '\\\\\\\\': '\\\\', '\\\\n': '\\n', '\\\\r': '\\r', '\\\\t': '\\t', '\\\\&':'&'};\n  /** @arg {string} str */\n  function unescapeRegexReplace(str) {\n    var stream = new CM.StringStream(str);\n    var output = [];\n    while (!stream.eol()) {\n      // Search for \\.\n      while (stream.peek() && stream.peek() != '\\\\') {\n        output.push(stream.next());\n      }\n      var matched = false;\n      for (var matcher in unescapes) {\n        if (stream.match(matcher, true)) {\n          matched = true;\n          output.push(unescapes[matcher]);\n          break;\n        }\n      }\n      if (!matched) {\n        // Don't change anything\n        output.push(stream.next());\n      }\n    }\n    return output.join('');\n  }\n\n  /**\n   * Extract the regular expression from the query and return a Regexp object.\n   * Returns null if the query is blank.\n   * If ignoreCase is passed in, the Regexp object will have the 'i' flag set.\n   * If smartCase is passed in, and the query contains upper case letters,\n   *   then ignoreCase is overridden, and the 'i' flag will not be set.\n   * If the query contains the /i in the flag part of the regular expression,\n   *   then both ignoreCase and smartCase are ignored, and 'i' will be passed\n   *   through to the Regex object.\n   * @arg {string} query\n   * @arg {boolean} ignoreCase\n   * @arg {boolean} smartCase\n   */\n  function parseQuery(query, ignoreCase, smartCase) {\n    // First update the last search register\n    var lastSearchRegister = vimGlobalState.registerController.getRegister('/');\n    lastSearchRegister.setText(query);\n    // First try to extract regex + flags from the input. If no flags found,\n    // extract just the regex. IE does not accept flags directly defined in\n    // the regex string in the form /regex/flags\n    var slashes = findUnescapedSlashes(query);\n    var regexPart;\n    var forceIgnoreCase;\n    if (!slashes.length) {\n      // Query looks like 'regexp'\n      regexPart = query;\n    } else {\n      // Query looks like 'regexp/...'\n      regexPart = query.substring(0, slashes[0]);\n      var flagsPart = query.substring(slashes[0]);\n      forceIgnoreCase = (flagsPart.indexOf('i') != -1);\n    }\n    if (!regexPart) {\n      return null;\n    }\n    if (!getOption('pcre')) {\n      regexPart = translateRegex(regexPart);\n    }\n    if (smartCase) {\n      ignoreCase = (/^[^A-Z]*$/).test(regexPart);\n    }\n    var regexp = new RegExp(regexPart,\n        (ignoreCase || forceIgnoreCase) ? 'im' : 'm');\n    return regexp;\n  }\n\n  /**\n   * dom - Document Object Manipulator\n   * Usage:\n   *   dom('<tag>'|<node>[, ...{<attributes>|<$styles>}|<child-node>|'<text>'])\n   * Examples:\n   *   dom('div', {id:'xyz'}, dom('p', 'CM rocks!', {$color:'red'}))\n   *   dom(document.head, dom('script', 'alert(\"hello!\")'))\n   * Not supported:\n   *   dom('p', ['arrays are objects'], Error('objects specify attributes'))\n   * @arg {string | HTMLElement } n\n   */\n  function dom(n) {\n    if (typeof n === 'string') n = document.createElement(n);\n    for (var i = 1; i < arguments.length; i++) {\n      var a = arguments[i];\n      if (!a) continue;\n      if (typeof a !== 'object') a = document.createTextNode(a);\n      if (a.nodeType) n.appendChild(a);\n      else for (var key in a) {\n        if (!Object.prototype.hasOwnProperty.call(a, key)) continue;\n        if (key[0] === '$') n.style[key.slice(1)] = a[key];\n        else if (typeof a[key] == \"function\") n[key] = a[key];\n        else n.setAttribute(key, a[key]);\n      }\n    }\n    return n;\n  }\n\n  /** @arg {CodeMirror} cm  @arg {any} template  @arg {boolean} [long]*/\n  function showConfirm(cm, template, long) {\n    var pre = dom('div', {$color: 'red', $whiteSpace: 'pre', class: 'cm-vim-message'}, template);\n    if (cm.openNotification) {\n      if (long) {\n        pre = dom('div', {}, pre, dom('div', {}, 'Press ENTER or type command to continue'));\n        if (cm.state.closeVimNotification) {\n          cm.state.closeVimNotification();\n        }\n        cm.state.closeVimNotification = cm.openNotification(pre, {bottom: true, duration: 0});\n      } else {\n        cm.openNotification(pre, {bottom: true, duration: 15000});\n      }\n    } else {\n      alert(pre.innerText);\n    }\n  }\n  /** @arg {string|HTMLElement} prefix  @arg {string|HTMLElement} [desc] */\n  function makePrompt(prefix, desc) {\n    return dom('div', {$display: 'flex', $flex: 1},\n              dom('span', {$fontFamily: 'monospace', $whiteSpace: 'pre', $flex: 1, $display: 'flex'},\n                prefix,\n                dom('input', {type: 'text', autocorrect: 'off',\n                              autocapitalize: 'off', spellcheck: 'false', $flex: 1})),\n              desc && dom('span', {$color: '#888'}, desc));\n  }\n  /**\n   * @arg {CodeMirror} cm \n   * @arg {import(\"./types\").PromptOptions} options \n   */\n  function showPrompt(cm, options) {\n    if (keyToKeyStack.length) {\n      if (!options.value) options.value = '';\n      virtualPrompt = options;\n      return;\n    }\n    var template = makePrompt(options.prefix, options.desc);\n    if (cm.openDialog) {\n      cm.openDialog(template, options.onClose, {\n        onKeyDown: options.onKeyDown, onKeyUp: options.onKeyUp,\n        bottom: true, selectValueOnOpen: false, value: options.value\n      });\n    }\n    else {\n      var shortText = '';\n      if (typeof options.prefix != \"string\" && options.prefix) shortText += options.prefix.textContent;\n      if (options.desc) shortText += \" \" + options.desc;\n      options.onClose?.(prompt(shortText, ''));\n    }\n  }\n\n  /** @arg {RegExp|unknown} r1  @arg {RegExp|unknown} r2 */\n  function regexEqual(r1, r2) {\n    if (r1 instanceof RegExp && r2 instanceof RegExp) {\n      return r1.flags == r2.flags && r1.source == r2.source;\n    }\n    return false;\n  }\n  // Returns true if the query is valid.\n  /**\n   * @arg {CodeMirrorV} cm \n   * @arg {string } rawQuery \n   * @arg {boolean | undefined} [ignoreCase] \n   * @arg {boolean | undefined} [smartCase]\n  */\n  function updateSearchQuery(cm, rawQuery, ignoreCase, smartCase) {\n    if (!rawQuery) {\n      return;\n    }\n    var state = getSearchState(cm);\n    var query = parseQuery(rawQuery, !!ignoreCase, !!smartCase);\n    if (!query) {\n      return;\n    }\n    highlightSearchMatches(cm, query);\n    if (regexEqual(query, state.getQuery())) {\n      return query;\n    }\n    state.setQuery(query);\n    return query;\n  }\n  /** @arg {RegExp} query */\n  function searchOverlay(query) {\n    if (query.source.charAt(0) == '^') {\n      var matchSol = true;\n    }\n    return {\n      token: function(stream) {\n        if (matchSol && !stream.sol()) {\n          stream.skipToEnd();\n          return;\n        }\n        var match = stream.match(query, false);\n        if (match) {\n          if (match[0].length == 0) {\n            // Matched empty string, skip to next.\n            stream.next();\n            return 'searching';\n          }\n          if (!stream.sol()) {\n            // Backtrack 1 to match \\b\n            stream.backUp(1);\n            if (!query.exec(stream.next() + match[0])) {\n              stream.next();\n              return null;\n            }\n          }\n          stream.match(query);\n          return 'searching';\n        }\n        while (!stream.eol()) {\n          stream.next();\n          if (stream.match(query, false)) break;\n        }\n      },\n      query: query\n    };\n  }\n  var highlightTimeout = 0;\n  /** @arg {CodeMirrorV} cm  @arg {RegExp} query */\n  function highlightSearchMatches(cm, query) {\n    clearTimeout(highlightTimeout);\n    var searchState = getSearchState(cm);\n    searchState.highlightTimeout = highlightTimeout;\n    highlightTimeout = setTimeout(function() {\n      if (!cm.state.vim) return;\n      var searchState = getSearchState(cm);\n      searchState.highlightTimeout = undefined;\n      var overlay = searchState.getOverlay();\n      if (!overlay || query != overlay.query) {\n        if (overlay) {\n          cm.removeOverlay(overlay);\n        }\n        overlay = searchOverlay(query);\n        cm.addOverlay(overlay);\n        if (cm.showMatchesOnScrollbar) {\n          if (searchState.getScrollbarAnnotate()) {\n            searchState.getScrollbarAnnotate().clear();\n          }\n          searchState.setScrollbarAnnotate(cm.showMatchesOnScrollbar(query));\n        }\n        searchState.setOverlay(overlay);\n      }\n    }, 50);\n  }\n  /** @arg {CodeMirror} cm @arg {boolean} prev @arg {RegExp} query @arg {number | undefined} [repeat] */\n  function findNext(cm, prev, query, repeat) {\n    return cm.operation(function() {\n      if (repeat === undefined) { repeat = 1; }\n      var pos = cm.getCursor();\n      var cursor = cm.getSearchCursor(query, pos);\n      for (var i = 0; i < repeat; i++) {\n        var found = cursor.find(prev);\n        // @ts-ignore\n        if (i == 0 && found && cursorEqual(cursor.from(), pos)) {\n          var lastEndPos = prev ? cursor.from() : cursor.to();\n          found = cursor.find(prev);\n          // @ts-ignore\n          if (found && !found[0] && cursorEqual(cursor.from(), lastEndPos)) {\n            // @ts-ignore\n            if (cm.getLine(lastEndPos.line).length == lastEndPos.ch)\n              found = cursor.find(prev);\n          }\n        }\n        if (!found) {\n          // SearchCursor may have returned null because it hit EOF, wrap\n          // around and try again.\n          cursor = cm.getSearchCursor(query,\n              // @ts-ignore\n              (prev) ? new Pos(cm.lastLine()) : new Pos(cm.firstLine(), 0) );\n          if (!cursor.find(prev)) {\n            return;\n          }\n        }\n      }\n      return cursor.from();\n    });\n  }\n  /**\n   * Pretty much the same as `findNext`, except for the following differences:\n   *\n   * 1. Before starting the search, move to the previous search. This way if our cursor is\n   * already inside a match, we should return the current match.\n   * 2. Rather than only returning the cursor's from, we return the cursor's from and to as a tuple.\n   * @arg {CodeMirror} cm\n   * @arg {boolean} prev\n   * @arg {RegExp} query\n   * @arg {number | undefined} repeat\n   * @arg {vimState} vim\n   * @returns {[Pos, Pos] | undefined}\n   */\n  function findNextFromAndToInclusive(cm, prev, query, repeat, vim) {\n    return cm.operation(function() {\n      if (repeat === undefined) { repeat = 1; }\n      var pos = cm.getCursor();\n      var cursor = cm.getSearchCursor(query, pos);\n\n      // Go back one result to ensure that if the cursor is currently a match, we keep it.\n      var found = cursor.find(!prev);\n\n      // If we haven't moved, go back one more (similar to if i==0 logic in findNext).\n      // @ts-ignore\n      if (!vim.visualMode && found && cursorEqual(cursor.from(), pos)) {\n        cursor.find(!prev);\n      }\n\n      for (var i = 0; i < repeat; i++) {\n        found = cursor.find(prev);\n        if (!found) {\n          // SearchCursor may have returned null because it hit EOF, wrap\n          // around and try again.\n          cursor = cm.getSearchCursor(query,\n              // @ts-ignore\n              (prev) ? new Pos(cm.lastLine()) : new Pos(cm.firstLine(), 0) );\n          if (!cursor.find(prev)) {\n            return;\n          }\n        }\n      }\n      var from = cursor.from();\n      var to = cursor.to();\n      return from && to && [from, to];\n    });\n  }\n  /** @arg {CodeMirrorV} cm */\n  function clearSearchHighlight(cm) {\n    var state = getSearchState(cm);\n    if (state.highlightTimeout) {\n      clearTimeout(state.highlightTimeout);\n      state.highlightTimeout = undefined;\n    }\n    cm.removeOverlay(getSearchState(cm).getOverlay());\n    state.setOverlay(null);\n    if (state.getScrollbarAnnotate()) {\n      state.getScrollbarAnnotate().clear();\n      state.setScrollbarAnnotate(null);\n    }\n  }\n  /**\n   * Check if pos is in the specified range, INCLUSIVE.\n   * Range can be specified with 1 or 2 arguments.\n   * If the first range argument is an array, treat it as an array of line\n   * numbers. Match pos against any of the lines.\n   * If the first range argument is a number,\n   *   if there is only 1 range argument, check if pos has the same line\n   *       number\n   *   if there are 2 range arguments, then check if pos is in between the two\n   *       range arguments.\n   * @arg {number|Pos} pos\n   * @arg {number|number[]} start\n   * @arg {number} end\n   */\n  function isInRange(pos, start, end) {\n    if (typeof pos != 'number') {\n      // Assume it is a cursor position. Get the line number.\n      pos = pos.line;\n    }\n    if (start instanceof Array) {\n      return inArray(pos, start);\n    } else {\n      if (typeof end == 'number') {\n        return (pos >= start && pos <= end);\n      } else {\n        return pos == start;\n      }\n    }\n  }\n  /** @arg {CodeMirror} cm */\n  function getUserVisibleLines(cm) {\n    var scrollInfo = cm.getScrollInfo();\n    var occludeToleranceTop = 6;\n    var occludeToleranceBottom = 10;\n    var from = cm.coordsChar({left:0, top: occludeToleranceTop + scrollInfo.top}, 'local');\n    var bottomY = scrollInfo.clientHeight - occludeToleranceBottom + scrollInfo.top;\n    var to = cm.coordsChar({left:0, top: bottomY}, 'local');\n    return {top: from.line, bottom: to.line};\n  }\n\n  /** @arg {CodeMirror} cm @arg {vimState} vim  @arg {string} markName */\n  function getMarkPos(cm, vim, markName) {\n    if (markName == '\\'' || markName == '`') {\n      return vimGlobalState.jumpList.find(cm, -1) || new Pos(0, 0);\n    } else if (markName == '.') {\n      return getLastEditPos(cm);\n    }\n\n    var mark = vim.marks[markName];\n    return mark && mark.find();\n  }\n\n  /** @arg {CodeMirror} cm */\n  function getLastEditPos(cm) {\n    if (cm.getLastEditEnd) {\n      return cm.getLastEditEnd();\n    }\n    // for old cm\n    var done = /**@type{any}*/(cm).doc.history.done;\n    for (var i = done.length; i--;) {\n      if (done[i].changes) {\n        return copyCursor(done[i].changes[0].to);\n      }\n    }\n  }\n\n  class ExCommandDispatcher {\n    constructor() {\n      /**@type {Record<string, import(\"./types\").exCommandDefinition>} */\n      this.commandMap_;\n      this.buildCommandMap_();\n    }\n    /**\n     * @arg {CodeMirrorV} cm\n     * @arg {string} input\n     * @arg {{ callback: () => void; } | undefined} [opt_params]\n     */\n    processCommand(cm, input, opt_params) {\n      var that = this;\n      cm.operation(function () {\n        if (cm.curOp) cm.curOp.isVimOp = true;\n        that._processCommand(cm, input, opt_params);\n      });\n    }\n    /**\n     * @arg {CodeMirrorV} cm\n     * @arg {string} input\n     * @arg {{ callback?: () => void; input?: string, line?: string, commandName?: string  } } [opt_params]\n     */\n    _processCommand(cm, input, opt_params) {\n      var vim = cm.state.vim;\n      var commandHistoryRegister = vimGlobalState.registerController.getRegister(':');\n      var previousCommand = commandHistoryRegister.toString();\n      var inputStream = new CM.StringStream(input);\n      // update \": with the latest command whether valid or invalid\n      commandHistoryRegister.setText(input);\n      var params = opt_params || {};\n      params.input = input;\n      try {\n        this.parseInput_(cm, inputStream, params);\n      } catch(e) {\n        showConfirm(cm, e + \"\");\n        throw e;\n      }\n\n      if (vim.visualMode) {\n        exitVisualMode(cm);\n      }\n\n      var command;\n      var commandName;\n      if (!params.commandName) {\n        // If only a line range is defined, move to the line.\n        if (params.line !== undefined) {\n          commandName = 'move';\n        }\n      } else {\n        command = this.matchCommand_(params.commandName);\n        if (command) {\n          commandName = command.name;\n          if (command.excludeFromCommandHistory) {\n            commandHistoryRegister.setText(previousCommand);\n          }\n          this.parseCommandArgs_(inputStream, params, command);\n          if (command.type == 'exToKey') {\n            // Handle Ex to Key mapping.\n            doKeyToKey(cm, command.toKeys || '', command);\n            return;\n          } else if (command.type == 'exToEx') {\n            // Handle Ex to Ex mapping.\n            this.processCommand(cm, command.toInput || '');\n            return;\n          }\n        }\n      }\n      if (!commandName) {\n        showConfirm(cm, 'Not an editor command \":' + input + '\"');\n        return;\n      }\n      try {\n        exCommands[commandName](cm, params);\n        // Possibly asynchronous commands (e.g. substitute, which might have a\n        // user confirmation), are responsible for calling the callback when\n        // done. All others have it taken care of for them here.\n        if ((!command || !command.possiblyAsync) && params.callback) {\n          params.callback();\n        }\n      } catch(e) {\n        showConfirm(cm, e + \"\");\n        throw e;\n      }\n    }\n    /**\n     * @param {CodeMirrorV} cm\n     * @param {import(\"@codemirror/language\").StringStream} inputStream\n     * @param {{ callback?: (() => void) | undefined; input?: string | undefined; line?: any; commandName?: any; lineEnd?: any; selectionLine?: any; selectionLineEnd?: any; }} result\n     */\n    parseInput_(cm, inputStream, result) {\n      inputStream.eatWhile(':');\n      // Parse range.\n      if (inputStream.eat('%')) {\n        result.line = cm.firstLine();\n        result.lineEnd = cm.lastLine();\n      } else {\n        result.line = this.parseLineSpec_(cm, inputStream);\n        if (result.line !== undefined && inputStream.eat(',')) {\n          result.lineEnd = this.parseLineSpec_(cm, inputStream);\n        }\n      }\n\n      if (result.line == undefined) {\n        if (cm.state.vim.visualMode) {\n          result.selectionLine = getMarkPos(cm, cm.state.vim, '<')?.line;\n          result.selectionLineEnd = getMarkPos(cm, cm.state.vim, '>')?.line;\n        } else {\n          result.selectionLine = cm.getCursor().line;\n        }\n      } else {\n        result.selectionLine = result.line;\n        result.selectionLineEnd = result.lineEnd;\n      }\n\n      // Parse command name.\n      var commandMatch = inputStream.match(/^(\\w+|!!|@@|[!#&*<=>@~])/);\n      if (commandMatch) {\n        result.commandName = commandMatch[1];\n      } else {\n        result.commandName = (inputStream.match(/.*/) || [\"\"])[0];\n      }\n\n      return result;\n    }\n    /**\n     * @param {CodeMirrorV} cm\n     * @param {import(\"@codemirror/language\").StringStream} inputStream\n     */\n    parseLineSpec_(cm, inputStream) {\n      var numberMatch = inputStream.match(/^(\\d+)/);\n      if (numberMatch) {\n        // Absolute line number plus offset (N+M or N-M) is probably a typo,\n        // not something the user actually wanted. (NB: vim does allow this.)\n        return parseInt(numberMatch[1], 10) - 1;\n      }\n      switch (inputStream.next()) {\n        case '.':\n          return this.parseLineSpecOffset_(inputStream, cm.getCursor().line);\n        case '$':\n          return this.parseLineSpecOffset_(inputStream, cm.lastLine());\n        case '\\'':\n          var markName = inputStream.next() || \"\";\n          var markPos = getMarkPos(cm, cm.state.vim, markName);\n          if (!markPos) throw new Error('Mark not set');\n          return this.parseLineSpecOffset_(inputStream, markPos.line);\n        case '-':\n        case '+':\n          inputStream.backUp(1);\n          // Offset is relative to current line if not otherwise specified.\n          return this.parseLineSpecOffset_(inputStream, cm.getCursor().line);\n        default:\n          inputStream.backUp(1);\n          return undefined;\n      }\n    }\n    /**\n     * @param {string | import(\"@codemirror/language\").StringStream} inputStream\n     * @param {number} line\n     */\n    parseLineSpecOffset_(inputStream, line) {\n      var offsetMatch = inputStream.match(/^([+-])?(\\d+)/);\n      if (offsetMatch) {\n        var offset = parseInt(offsetMatch[2], 10);\n        if (offsetMatch[1] == \"-\") {\n          line -= offset;\n        } else {\n          line += offset;\n        }\n      }\n      return line;\n    }\n    /**\n     * @param {import(\"@codemirror/language\").StringStream} inputStream\n     * @param {import(\"./types\").exCommandArgs} params\n     * @param {import(\"./types\").exCommandDefinition} command\n     */\n    parseCommandArgs_(inputStream, params, command) {\n      if (inputStream.eol()) {\n        return;\n      }\n      params.argString = inputStream.match(/.*/)?.[0];\n      // Parse command-line arguments\n      var delim = command.argDelimiter || /\\s+/;\n      var args = trim(params.argString || \"\").split(delim);\n      if (args.length && args[0]) {\n        params.args = args;\n      }\n    }\n    /**\n     * @arg {string} commandName\n     */\n    matchCommand_(commandName) {\n      // Return the command in the command map that matches the shortest\n      // prefix of the passed in command name. The match is guaranteed to be\n      // unambiguous if the defaultExCommandMap's shortNames are set up\n      // correctly. (see @code{defaultExCommandMap}).\n      for (var i = commandName.length; i > 0; i--) {\n        var prefix = commandName.substring(0, i);\n        if (this.commandMap_[prefix]) {\n          var command = this.commandMap_[prefix];\n          if (command.name.indexOf(commandName) === 0) {\n            return command;\n          }\n        }\n      }\n    }\n    buildCommandMap_() {\n      this.commandMap_ = {};\n      for (var i = 0; i < defaultExCommandMap.length; i++) {\n        var command = defaultExCommandMap[i];\n        var key = command.shortName || command.name;\n        this.commandMap_[key] = command;\n      }\n    }\n    /**@type {(lhs: string, rhs: string, ctx: string|void, noremap?: boolean) => void} */\n    map(lhs, rhs, ctx, noremap) {\n      if (lhs != ':' && lhs.charAt(0) == ':') {\n        if (ctx) { throw Error('Mode not supported for ex mappings'); }\n        var commandName = lhs.substring(1);\n        if (rhs != ':' && rhs.charAt(0) == ':') {\n          // Ex to Ex mapping\n          this.commandMap_[commandName] = {\n            name: commandName,\n            type: 'exToEx',\n            toInput: rhs.substring(1),\n            user: true\n          };\n        } else {\n          // Ex to key mapping\n          this.commandMap_[commandName] = {\n            name: commandName,\n            type: 'exToKey',\n            toKeys: rhs,\n            user: true\n          };\n        }\n      } else {\n        // Key to key or ex mapping\n        /**@type {vimKey} */\n        var mapping = {\n          keys: lhs,\n          type: 'keyToKey',\n          toKeys: rhs,\n          noremap: !!noremap\n        };\n        if (ctx) { mapping.context = ctx; }\n        _mapCommand(mapping);\n      }\n    }\n    /**@type {(lhs: string, ctx: string) => boolean|void} */\n    unmap(lhs, ctx) {\n      if (lhs != ':' && lhs.charAt(0) == ':') {\n        // Ex to Ex or Ex to key mapping\n        if (ctx) { throw Error('Mode not supported for ex mappings'); }\n        var commandName = lhs.substring(1);\n        if (this.commandMap_[commandName] && this.commandMap_[commandName].user) {\n          delete this.commandMap_[commandName];\n          return true;\n        }\n      } else {\n        // Key to Ex or key to key mapping\n        var keys = lhs;\n        for (var i = 0; i < defaultKeymap.length; i++) {\n          if (keys == defaultKeymap[i].keys\n              && defaultKeymap[i].context === ctx) {\n            defaultKeymap.splice(i, 1);\n            removeUsedKeys(keys);\n            return true;\n          }\n        }\n      }\n    }\n  }\n\n  /** @typedef { import(\"./types\").ExParams} ExParams */\n  var exCommands = {\n    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/\n    colorscheme: function(cm, params) {\n      if (!params.args || params.args.length < 1) {\n        showConfirm(cm, cm.getOption('theme'));\n        return;\n      }\n      cm.setOption('theme', params.args[0]);\n    },\n    /** @arg {CodeMirrorV} cm @arg {ExParams} params @arg {'insert'|'normal'|string} [ctx] @arg {boolean} [defaultOnly]*/\n    map: function(cm, params, ctx, defaultOnly) {\n      var mapArgs = params.args;\n      if (!mapArgs || mapArgs.length < 2) {\n        if (cm) {\n          showConfirm(cm, 'Invalid mapping: ' + params.input);\n        }\n        return;\n      }\n      exCommandDispatcher.map(mapArgs[0], mapArgs[1], ctx, defaultOnly);\n    },\n    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/\n    imap: function(cm, params) { this.map(cm, params, 'insert'); },\n    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/\n    nmap: function(cm, params) { this.map(cm, params, 'normal'); },\n    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/\n    vmap: function(cm, params) { this.map(cm, params, 'visual'); },\n    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/\n    omap: function(cm, params) { this.map(cm, params, 'operatorPending'); },\n    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/\n    noremap: function(cm, params) { this.map(cm, params, undefined, true); },\n    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/\n    inoremap: function(cm, params) { this.map(cm, params, 'insert', true); },\n    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/\n    nnoremap: function(cm, params) { this.map(cm, params, 'normal', true); },\n    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/\n    vnoremap: function(cm, params) { this.map(cm, params, 'visual', true); },\n    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/\n    onoremap: function(cm, params) { this.map(cm, params, 'operatorPending', true); },\n    /** @arg {CodeMirrorV} cm @arg {ExParams} params @arg {string} ctx*/\n    unmap: function(cm, params, ctx) {\n      var mapArgs = params.args;\n      if (!mapArgs || mapArgs.length < 1 || !exCommandDispatcher.unmap(mapArgs[0], ctx)) {\n        if (cm) {\n          showConfirm(cm, 'No such mapping: ' + params.input);\n        }\n      }\n    },\n    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/\n    mapclear: function(cm, params) { vimApi.mapclear(); },\n    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/\n    imapclear: function(cm, params) { vimApi.mapclear('insert'); },\n    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/\n    nmapclear: function(cm, params) { vimApi.mapclear('normal'); },\n    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/\n    vmapclear: function(cm, params) { vimApi.mapclear('visual'); },\n    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/\n    omapclear: function(cm, params) { vimApi.mapclear('operatorPending'); },\n    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/\n    move: function(cm, params) {\n      commandDispatcher.processCommand(cm, cm.state.vim, {\n        keys: \"\",\n        type: 'motion',\n        motion: 'moveToLineOrEdgeOfDocument',\n        motionArgs: { forward: false, explicitRepeat: true, linewise: true },\n        repeatOverride: params.line+1\n      });\n    },\n    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/\n    set: function(cm, params) {\n      var setArgs = params.args;\n      // Options passed through to the setOption/getOption calls. May be passed in by the\n      // local/global versions of the set command\n      var setCfg = params.setCfg || {};\n      if (!setArgs || setArgs.length < 1) {\n        if (cm) {\n          showConfirm(cm, 'Invalid mapping: ' + params.input);\n        }\n        return;\n      }\n      var expr = setArgs[0].split('=');\n      var optionName = expr.shift() || \"\";\n      /**@type {string|boolean|undefined} */\n      var value = expr.length > 0 ? expr.join('=') : undefined;\n      var forceGet = false;\n      var forceToggle = false;\n\n      if (optionName.charAt(optionName.length - 1) == '?') {\n        // If post-fixed with ?, then the set is actually a get.\n        if (value) { throw Error('Trailing characters: ' + params.argString); }\n        optionName = optionName.substring(0, optionName.length - 1);\n        forceGet = true;\n      } else if (optionName.charAt(optionName.length - 1) == '!') {\n        optionName = optionName.substring(0, optionName.length - 1);\n        forceToggle = true;\n      }\n      if (value === undefined && optionName.substring(0, 2) == 'no') {\n        // To set boolean options to false, the option name is prefixed with\n        // 'no'.\n        optionName = optionName.substring(2);\n        value = false;\n      }\n\n      var optionIsBoolean = options[optionName] && options[optionName].type == 'boolean';\n      if (optionIsBoolean) {\n        if (forceToggle) {\n          value = !getOption(optionName, cm, setCfg);\n        } else if (value == undefined) {\n          // Calling set with a boolean option sets it to true.\n          value = true;\n        }\n      }\n      // If no value is provided, then we assume this is a get.\n      if (!optionIsBoolean && value === undefined || forceGet) {\n        var oldValue = getOption(optionName, cm, setCfg);\n        if (oldValue instanceof Error) {\n          showConfirm(cm, oldValue.message);\n        } else if (oldValue === true || oldValue === false) {\n          showConfirm(cm, ' ' + (oldValue ? '' : 'no') + optionName);\n        } else {\n          showConfirm(cm, '  ' + optionName + '=' + oldValue);\n        }\n      } else {\n        var setOptionReturn = setOption(optionName, value, cm, setCfg);\n        if (setOptionReturn instanceof Error) {\n          showConfirm(cm, setOptionReturn.message);\n        }\n      }\n    },\n    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/\n    setlocal: function (cm, params) {\n      // setCfg is passed through to setOption\n      params.setCfg = {scope: 'local'};\n      this.set(cm, params);\n    },\n    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/\n    setglobal: function (cm, params) {\n      // setCfg is passed through to setOption\n      params.setCfg = {scope: 'global'};\n      this.set(cm, params);\n    },\n    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/\n    registers: function(cm, params) {\n      var regArgs = params.args;\n      var registers = vimGlobalState.registerController.registers;\n      var regInfo = '----------Registers----------\\n\\n';\n      if (!regArgs) {\n        for (var registerName in registers) {\n          var text = registers[registerName].toString();\n          if (text.length) {\n            regInfo += '\"' + registerName + '    ' + text + '\\n';\n          }\n        }\n      } else {\n        var registerNames = regArgs.join('');\n        for (var i = 0; i < registerNames.length; i++) {\n          var registerName = registerNames.charAt(i);\n          if (!vimGlobalState.registerController.isValidRegister(registerName)) {\n            continue;\n          }\n          var register = registers[registerName] || new Register();\n          regInfo += '\"' + registerName + '    ' + register.toString() + '\\n';\n        }\n      }\n      showConfirm(cm, regInfo, true);\n    },\n    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/\n    marks: function(cm, params) {\n      var filterArgs = params.args;\n      var marks = cm.state.vim.marks;\n      var regInfo = '-----------Marks-----------\\nmark\\tline\\tcol\\n\\n';\n      if (!filterArgs) {\n        for (var name in marks) {\n          var marker = marks[name] && marks[name].find();\n          if (marker) {\n            regInfo += name + '\\t' + marker.line + '\\t' + marker.ch +  '\\n';\n          }\n        }\n      } else {\n        var registerNames = filterArgs.join('');\n        for (var i = 0; i < registerNames.length; i++) {\n          var name = registerNames.charAt(i);\n          var marker = marks[name] && marks[name].find();\n          if (marker) {\n            regInfo += name + '\\t' + marker.line + '\\t' + marker.ch +  '\\n';\n          }\n        }\n      }\n      showConfirm(cm, regInfo, true);\n    },\n    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/\n    sort: function(cm, params) {\n      var reverse, ignoreCase, unique, number, pattern;\n      function parseArgs() {\n        if (params.argString) {\n          var args = new CM.StringStream(params.argString);\n          if (args.eat('!')) { reverse = true; }\n          if (args.eol()) { return; }\n          if (!args.eatSpace()) { return 'Invalid arguments'; }\n          var opts = args.match(/([dinuox]+)?\\s*(\\/.+\\/)?\\s*/);\n          if (!opts || !args.eol()) { return 'Invalid arguments'; }\n          if (opts[1]) {\n            ignoreCase = opts[1].indexOf('i') != -1;\n            unique = opts[1].indexOf('u') != -1;\n            var decimal = opts[1].indexOf('d') != -1 || opts[1].indexOf('n') != -1;\n            var hex = opts[1].indexOf('x') != -1;\n            var octal = opts[1].indexOf('o') != -1;\n            if (Number(decimal) + Number(hex) + Number(octal) > 1) { return 'Invalid arguments'; }\n            number = decimal && 'decimal' || hex && 'hex' || octal && 'octal';\n          }\n          if (opts[2]) {\n            pattern = new RegExp(opts[2].substr(1, opts[2].length - 2), ignoreCase ? 'i' : '');\n          }\n        }\n      }\n      var err = parseArgs();\n      if (err) {\n        showConfirm(cm, err + ': ' + params.argString);\n        return;\n      }\n      var lineStart = params.line || cm.firstLine();\n      var lineEnd = params.lineEnd || params.line || cm.lastLine();\n      if (lineStart == lineEnd) { return; }\n      var curStart = new Pos(lineStart, 0);\n      var curEnd = new Pos(lineEnd, lineLength(cm, lineEnd));\n      var text = cm.getRange(curStart, curEnd).split('\\n');\n      var numberRegex =\n          (number == 'decimal') ? /(-?)([\\d]+)/ :\n          (number == 'hex') ? /(-?)(?:0x)?([0-9a-f]+)/i :\n          (number == 'octal') ? /([0-7]+)/ : null;\n      var radix = (number == 'decimal') ? 10 : (number == 'hex') ? 16 : (number == 'octal') ? 8 : undefined;\n      var numPart = [], textPart = [];\n      if (number || pattern) {\n        for (var i = 0; i < text.length; i++) {\n          var matchPart = pattern ? text[i].match(pattern) : null;\n          if (matchPart && matchPart[0] != '') {\n            numPart.push(matchPart);\n          } else if (numberRegex && numberRegex.exec(text[i])) {\n            numPart.push(text[i]);\n          } else {\n            textPart.push(text[i]);\n          }\n        }\n      } else {\n        textPart = text;\n      }\n      /** @arg {string} a  @arg {string} b */\n      function compareFn(a, b) {\n        if (reverse) { var tmp; tmp = a; a = b; b = tmp; }\n        if (ignoreCase) { a = a.toLowerCase(); b = b.toLowerCase(); }\n        var amatch = numberRegex && numberRegex.exec(a);\n        var bmatch = numberRegex && numberRegex.exec(b);\n        if (!amatch || !bmatch) { return a < b ? -1 : 1; }\n        var anum = parseInt((amatch[1] + amatch[2]).toLowerCase(), radix);\n        var bnum = parseInt((bmatch[1] + bmatch[2]).toLowerCase(), radix);\n        return anum - bnum;\n      }\n      /** @arg {string[]} a  @arg {string[]} b */\n      function comparePatternFn(a, b) {\n        if (reverse) { var tmp; tmp = a; a = b; b = tmp; }\n        if (ignoreCase) { a[0] = a[0].toLowerCase(); b[0] = b[0].toLowerCase(); }\n        return (a[0] < b[0]) ? -1 : 1;\n      }\n      // @ts-ignore\n      numPart.sort(pattern ? comparePatternFn : compareFn);\n      if (pattern) {\n        for (var i = 0; i < numPart.length; i++) {\n          // @ts-ignore\n          numPart[i] = numPart[i].input;\n        }\n      } else if (!number) { textPart.sort(compareFn); }\n      text = (!reverse) ? textPart.concat(numPart) : numPart.concat(textPart);\n      if (unique) { // Remove duplicate lines\n        var textOld = text;\n        var lastLine;\n        text = [];\n        for (var i = 0; i < textOld.length; i++) {\n          if (textOld[i] != lastLine) {\n            text.push(textOld[i]);\n          }\n          lastLine = textOld[i];\n        }\n      }\n      cm.replaceRange(text.join('\\n'), curStart, curEnd);\n    },\n    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/\n    vglobal: function(cm, params) {\n      // global inspects params.commandName\n      this.global(cm, params);\n    },\n    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/\n    normal: function(cm, params) {\n      var noremap = false;\n      var argString = params.argString;\n      if (argString && argString[0] == '!') {\n          argString = argString.slice(1);\n          noremap = true;\n      }\n      argString = argString.trimStart();\n      if (!argString) {\n        showConfirm(cm, 'Argument is required.');\n        return;\n      }\n      var line = params.line;\n      if (typeof line == 'number') {\n        var lineEnd = isNaN(params.lineEnd) ? line : params.lineEnd;\n        for (var i = line; i <= lineEnd; i++) {\n          cm.setCursor(i, 0);\n          doKeyToKey(cm, params.argString.trimStart(), {noremap});\n          if (cm.state.vim.insertMode) {\n            exitInsertMode(cm, true);\n          }\n        }\n      } else {\n        doKeyToKey(cm, params.argString.trimStart(), {noremap});\n        if (cm.state.vim.insertMode) {\n          exitInsertMode(cm, true);\n        }\n      }\n    },\n    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/\n    global: function(cm, params) {\n      // a global command is of the form\n      // :[range]g/pattern/[cmd]\n      // argString holds the string /pattern/[cmd]\n      var argString = params.argString;\n      if (!argString) {\n        showConfirm(cm, 'Regular Expression missing from global');\n        return;\n      }\n      var inverted = params.commandName[0] === 'v';\n      if (argString[0] === '!' && params.commandName[0] === 'g') {\n        inverted = true;\n        argString = argString.slice(1);\n      }\n      // range is specified here\n      var lineStart = (params.line !== undefined) ? params.line : cm.firstLine();\n      var lineEnd = params.lineEnd || params.line || cm.lastLine();\n      // get the tokens from argString\n      var tokens = splitBySlash(argString);\n      var regexPart = argString, cmd = \"\";\n      if (tokens && tokens.length) {\n        regexPart = tokens[0];\n        cmd = tokens.slice(1, tokens.length).join('/');\n      }\n      if (regexPart) {\n        // If regex part is empty, then use the previous query. Otherwise\n        // use the regex part as the new query.\n        try {\n          updateSearchQuery(cm, regexPart, true /** ignoreCase */,\n            true /** smartCase */);\n        } catch (e) {\n          showConfirm(cm, 'Invalid regex: ' + regexPart);\n          return;\n        }\n      }\n      // now that we have the regexPart, search for regex matches in the\n      // specified range of lines\n      var query = getSearchState(cm).getQuery();\n      /**@type {(string|import(\"./types\").LineHandle)[]}*/\n      var matchedLines = [];\n      for (var i = lineStart; i <= lineEnd; i++) {\n        var line = cm.getLine(i);\n        var matched = query.test(line);\n        if (matched !== inverted) {\n          matchedLines.push(cmd ? cm.getLineHandle(i) : line);\n        }\n      }\n      // if there is no [cmd], just display the list of matched lines\n      if (!cmd) {\n        showConfirm(cm, matchedLines.join('\\n'));\n        return;\n      }\n      var index = 0;\n      var nextCommand = function() {\n        if (index < matchedLines.length) {\n          var lineHandle = matchedLines[index++];\n          var lineNum = cm.getLineNumber(lineHandle);\n          if (lineNum == null) {\n            nextCommand();\n            return;\n          }\n          var command = (lineNum + 1) + cmd;\n          exCommandDispatcher.processCommand(cm, command, {\n            callback: nextCommand\n          });\n        } else if (cm.releaseLineHandles) {\n          cm.releaseLineHandles();\n        }\n      };\n      nextCommand();\n    },\n    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/\n    substitute: function(cm, params) {\n      if (!cm.getSearchCursor) {\n        throw new Error('Search feature not available. Requires searchcursor.js or ' +\n            'any other getSearchCursor implementation.');\n      }\n      var argString = params.argString;\n      var tokens = argString ? splitBySeparator(argString, argString[0]) : [];\n      var regexPart = '', replacePart = '', trailing, flagsPart, count;\n      var confirm = false; // Whether to confirm each replace.\n      var global = false; // True to replace all instances on a line, false to replace only 1.\n      if (tokens && tokens.length) {\n        regexPart = tokens[0];\n        if (getOption('pcre') && regexPart !== '') {\n            regexPart = new RegExp(regexPart).source; //normalize not escaped characters\n        }\n        replacePart = tokens[1];\n        if (replacePart !== undefined) {\n          if (getOption('pcre')) {\n            replacePart = unescapeRegexReplace(replacePart.replace(/([^\\\\])&/g,\"$1$$&\"));\n          } else {\n            replacePart = translateRegexReplace(replacePart);\n          }\n          vimGlobalState.lastSubstituteReplacePart = replacePart;\n        }\n        trailing = tokens[2] ? tokens[2].split(' ') : [];\n      } else {\n        // either the argString is empty or its of the form ' hello/world'\n        // actually splitBySlash returns a list of tokens\n        // only if the string starts with a '/'\n        if (argString && argString.length) {\n          showConfirm(cm, 'Substitutions should be of the form ' +\n              ':s/pattern/replace/');\n          return;\n        }\n      }\n      // After the 3rd slash, we can have flags followed by a space followed\n      // by count.\n      if (trailing) {\n        flagsPart = trailing[0];\n        count = parseInt(trailing[1]);\n        if (flagsPart) {\n          if (flagsPart.indexOf('c') != -1) {\n            confirm = true;\n          }\n          if (flagsPart.indexOf('g') != -1) {\n            global = true;\n          }\n          if (getOption('pcre')) {\n            regexPart = regexPart + '/' + flagsPart;\n          } else {\n            regexPart = regexPart.replace(/\\//g, \"\\\\/\") + '/' + flagsPart;\n          }\n        }\n      }\n      if (regexPart) {\n        // If regex part is empty, then use the previous query. Otherwise use\n        // the regex part as the new query.\n        try {\n          updateSearchQuery(cm, regexPart, true /** ignoreCase */,\n            true /** smartCase */);\n        } catch (e) {\n          showConfirm(cm, 'Invalid regex: ' + regexPart);\n          return;\n        }\n      }\n      replacePart = replacePart || vimGlobalState.lastSubstituteReplacePart;\n      if (replacePart === undefined) {\n        showConfirm(cm, 'No previous substitute regular expression');\n        return;\n      }\n      var state = getSearchState(cm);\n      var query = state.getQuery();\n      var lineStart = (params.line !== undefined) ? params.line : cm.getCursor().line;\n      var lineEnd = params.lineEnd || lineStart;\n      if (lineStart == cm.firstLine() && lineEnd == cm.lastLine()) {\n        lineEnd = Infinity;\n      }\n      if (count) {\n        lineStart = lineEnd;\n        lineEnd = lineStart + count - 1;\n      }\n      var startPos = clipCursorToContent(cm, new Pos(lineStart, 0));\n      var cursor = cm.getSearchCursor(query, startPos);\n      doReplace(cm, confirm, global, lineStart, lineEnd, cursor, query, replacePart, params.callback);\n    },\n    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/\n    startinsert: function(cm, params) {\n      doKeyToKey(cm, params.argString == '!' ? 'A' : 'i', {});\n    },\n    redo: CM.commands.redo,\n    undo: CM.commands.undo,\n    /** @arg {CodeMirrorV} cm */\n    write: function(cm) {\n      if (CM.commands.save) {\n        CM.commands.save(cm);\n      } else if (cm.save) {\n        // Saves to text area if no save command is defined and cm.save() is available.\n        cm.save();\n      }\n    },\n    /** @arg {CodeMirrorV} cm */\n    nohlsearch: function(cm) {\n      clearSearchHighlight(cm);\n    },\n    /** @arg {CodeMirrorV} cm */\n    yank: function (cm) {\n      var cur = copyCursor(cm.getCursor());\n      var line = cur.line;\n      var lineText = cm.getLine(line);\n      vimGlobalState.registerController.pushText(\n        '0', 'yank', lineText, true, true);\n    },\n    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/\n    delete: function(cm, params) {\n      var line = params.selectionLine;\n      var lineEnd = isNaN(params.selectionLineEnd) ? line : params.selectionLineEnd;\n      operators.delete(cm, {linewise: true}, [\n        { anchor: new Pos(line, 0),\n          head: new Pos(lineEnd + 1, 0) }\n      ]);\n    },\n    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/\n    join: function(cm, params) {\n      var line = params.selectionLine;\n      var lineEnd = isNaN(params.selectionLineEnd) ? line : params.selectionLineEnd;\n      cm.setCursor(new Pos(line, 0));\n      actions.joinLines(cm, {repeat: lineEnd - line}, cm.state.vim);\n    },\n    /** @arg {CodeMirrorV} cm @arg {ExParams} params*/\n    delmarks: function(cm, params) {\n      if (!params.argString || !trim(params.argString)) {\n        showConfirm(cm, 'Argument required');\n        return;\n      }\n\n      var state = cm.state.vim;\n      var stream = new CM.StringStream(trim(params.argString));\n      while (!stream.eol()) {\n        stream.eatSpace();\n\n        // Record the streams position at the beginning of the loop for use\n        // in error messages.\n        var count = stream.pos;\n\n        if (!stream.match(/[a-zA-Z]/, false)) {\n          showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));\n          return;\n        }\n\n        var sym = stream.next();\n        // Check if this symbol is part of a range\n        if (stream.match('-', true)) {\n          // This symbol is part of a range.\n\n          // The range must terminate at an alphabetic character.\n          if (!stream.match(/[a-zA-Z]/, false)) {\n            showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));\n            return;\n          }\n\n          var startMark = sym;\n          var finishMark = stream.next();\n          // The range must terminate at an alphabetic character which\n          // shares the same case as the start of the range.\n          if (startMark && finishMark && isLowerCase(startMark) == isLowerCase(finishMark)) {\n            var start = startMark.charCodeAt(0);\n            var finish = finishMark.charCodeAt(0);\n            if (start >= finish) {\n              showConfirm(cm, 'Invalid argument: ' + params.argString.substring(count));\n              return;\n            }\n\n            // Because marks are always ASCII values, and we have\n            // determined that they are the same case, we can use\n            // their char codes to iterate through the defined range.\n            for (var j = 0; j <= finish - start; j++) {\n              var mark = String.fromCharCode(start + j);\n              delete state.marks[mark];\n            }\n          } else {\n            showConfirm(cm, 'Invalid argument: ' + startMark + '-');\n            return;\n          }\n        } else if (sym) {\n          // This symbol is a valid mark, and is not part of a range.\n          delete state.marks[sym];\n        }\n      }\n    }\n  };\n\n  var exCommandDispatcher = new ExCommandDispatcher();\n\n  vimApi.defineEx(\"version\", \"ve\", (cm) => {\n    showConfirm(cm, \"Codemirror-vim version: 6.3.0\");\n  });\n\n  /**\n   * @arg {CodeMirrorV} cm CodeMirror instance we are in.\n   * @arg {boolean} confirm Whether to confirm each replace.\n   * @arg {boolean} global \n   * @arg {number} lineStart Line to start replacing from.\n   * @arg {number} lineEnd Line to stop replacing at.\n   * TODO: find a way for typescript to understand that when match is found searchCursor.from() is not null\n   * @arg {ReturnType<CodeMirror[\"getSearchCursor\"]>|any} searchCursor Search cursor to use for finding matches.\n   * @arg {RegExp} query Query for performing matches with.\n   * @arg {string} replaceWith Text to replace matches with. May contain $1,\n   *     $2, etc for replacing captured groups using JavaScript replace.\n   * @arg {function} [callback] A callback for when the replace is done.\n   */\n  function doReplace(cm, confirm, global, lineStart, lineEnd, searchCursor, query,\n      replaceWith, callback) {\n    // Set up all the functions.\n    cm.state.vim.exMode = true;\n    var done = false;\n    var matches = 0;\n    \n    /** @type {Pos}*/ var lastPos;\n    /** @type {number}*/ var modifiedLineNumber;\n    /** @type {boolean}*/var joined;\n    function replaceAll() {\n      cm.operation(function() {\n        while (!done) {\n          replace();\n          next();\n        }\n        stop();\n      });\n    }\n    function replace() {\n      var newText = '';\n      var match = searchCursor.match || searchCursor.pos && searchCursor.pos.match;\n      if (match) {\n        newText = replaceWith.replace(/\\$(\\d{1,3}|[$&])/g, function(_, x) {\n          if (x == \"$\") return \"$\";\n          if (x == '&') return match[0];\n          var x1 = x;\n          while (parseInt(x1) >= match.length && x1.length > 0) {\n            x1 = x1.slice(0, x1.length - 1);\n          }\n          if (x1) return match[x1] + x.slice(x1.length, x.length);\n          return _;\n        });\n      } else {\n        var text = cm.getRange(searchCursor.from(), searchCursor.to());\n        newText = text.replace(query, replaceWith);\n      }\n      var unmodifiedLineNumber = searchCursor.to().line;\n      searchCursor.replace(newText);\n      modifiedLineNumber = searchCursor.to().line;\n      lineEnd += modifiedLineNumber - unmodifiedLineNumber;\n      joined = modifiedLineNumber < unmodifiedLineNumber;\n    }\n    function findNextValidMatch() {\n      var lastMatchTo = lastPos && copyCursor(searchCursor.to());\n      var match = searchCursor.findNext();\n      if (match && !match[0] && lastMatchTo && cursorEqual(searchCursor.from(), lastMatchTo)) {\n        match = searchCursor.findNext();\n      }\n      if (match) matches++;\n      return match;\n    }\n    function next() {\n      // The below only loops to skip over multiple occurrences on the same\n      // line when 'global' is not true.\n      while(findNextValidMatch() &&\n            isInRange(searchCursor.from(), lineStart, lineEnd)) {\n        if (!global && searchCursor.from().line == modifiedLineNumber && !joined) {\n          continue;\n        }\n        cm.scrollIntoView(searchCursor.from(), 30);\n        cm.setSelection(searchCursor.from(), searchCursor.to());\n        lastPos = searchCursor.from();\n        done = false;\n        return;\n      }\n      done = true;\n    }\n    /** @arg {(() => void) | undefined} [close] */\n    function stop(close) {\n      if (close) { close(); }\n      cm.focus();\n      if (lastPos) {\n        cm.setCursor(lastPos);\n        var vim = cm.state.vim;\n        vim.exMode = false;\n        vim.lastHPos = vim.lastHSPos = lastPos.ch;\n      }\n      if (callback) { callback(); }\n      else if (done) {\n        showConfirm(cm, \n          (matches ? 'Found ' + matches + ' matches' : 'No matches found') +\n          ' for pattern: ' + query +\n          (getOption('pcre') ? ' (set nopcre to use Vim regexps)' : '')\n        );\n      }\n    }\n    /** @arg {KeyboardEvent} e   @arg {any} _value   @arg {any} close */\n    function onPromptKeyDown(e, _value, close) {\n      // Swallow all keys.\n      CM.e_stop(e);\n      var keyName = vimKeyFromEvent(e);\n      switch (keyName) {\n        case 'y':\n          replace(); next(); break;\n        case 'n':\n          next(); break;\n        case 'a':\n          // replaceAll contains a call to close of its own. We don't want it\n          // to fire too early or multiple times.\n          var savedCallback = callback;\n          callback = undefined;\n          cm.operation(replaceAll);\n          callback = savedCallback;\n          break;\n        case 'l':\n          replace();\n          // fall through and exit.\n        case 'q':\n        case '<Esc>':\n        case '<C-c>':\n        case '<C-[>':\n          stop(close);\n          break;\n      }\n      if (done) { stop(close); }\n      return true;\n    }\n\n    // Actually do replace.\n    next();\n    if (done) {\n      showConfirm(cm, 'No matches for ' + query +  (getOption('pcre') ? ' (set nopcre to use vim regexps)' : ''));\n      return;\n    }\n    if (!confirm) {\n      replaceAll();\n      if (callback) { callback(); }\n      return;\n    }\n    showPrompt(cm, {\n      prefix: dom('span', 'replace with ', dom('strong', replaceWith), ' (y/n/a/q/l)'),\n      onKeyDown: onPromptKeyDown\n    });\n  }\n\n  /** @arg {CodeMirrorV} cm  @arg {boolean} [keepCursor] */\n  function exitInsertMode(cm, keepCursor) {\n    var vim = cm.state.vim;\n    var macroModeState = vimGlobalState.macroModeState;\n    var insertModeChangeRegister = vimGlobalState.registerController.getRegister('.');\n    var isPlaying = macroModeState.isPlaying;\n    var lastChange = macroModeState.lastInsertModeChanges;\n    if (!isPlaying) {\n      cm.off('change', onChange);\n      if (vim.insertEnd) vim.insertEnd.clear();\n      vim.insertEnd = undefined;\n      CM.off(cm.getInputField(), 'keydown', onKeyEventTargetKeyDown);\n    }\n    if (!isPlaying && vim.insertModeRepeat && vim.insertModeRepeat > 1) {\n      // Perform insert mode repeat for commands like 3,a and 3,o.\n      repeatLastEdit(cm, vim, vim.insertModeRepeat - 1,\n          true /** repeatForInsert */);\n      // @ts-ignore\n      vim.lastEditInputState.repeatOverride = vim.insertModeRepeat;\n    }\n    delete vim.insertModeRepeat;\n    vim.insertMode = false;\n    if (!keepCursor) {\n      cm.setCursor(cm.getCursor().line, cm.getCursor().ch-1);\n    }\n    cm.setOption('keyMap', 'vim');\n    cm.setOption('disableInput', true);\n    cm.toggleOverwrite(false); // exit replace mode if we were in it.\n    // update the \". register before exiting insert mode\n    insertModeChangeRegister.setText(lastChange.changes.join(''));\n    CM.signal(cm, \"vim-mode-change\", {mode: \"normal\"});\n    if (macroModeState.isRecording) {\n      logInsertModeChange(macroModeState);\n    }\n  }\n\n  /** @arg {vimKey} command*/\n  function _mapCommand(command) {\n    defaultKeymap.unshift(command);\n    if (command.keys) addUsedKeys(command.keys);\n  }\n\n  /** @arg {string} keys */\n  function addUsedKeys(keys) {\n    keys.split(/(<(?:[CSMA]-)*\\w+>|.)/i).forEach(function(part) {\n      if (part) {\n        if (!usedKeys[part]) usedKeys[part] = 0;\n        usedKeys[part]++;\n      }\n    });\n  }\n\n  /** @arg {string} keys */\n  function removeUsedKeys(keys) {\n    keys.split(/(<(?:[CSMA]-)*\\w+>|.)/i).forEach(function(part) {\n      if (usedKeys[part])\n        usedKeys[part]--;\n    });\n  }\n\n  /** \n   * @arg {string} keys\n   * @arg {string} type   \n   * @arg {string} name\n   * @arg {any} args\n   * @arg {{ [x: string]: any; }} extra \n   **/\n  function mapCommand(keys, type, name, args, extra) {\n    /**@type{any} */\n    var command = {keys: keys, type: type};\n    command[type] = name;\n    command[type + \"Args\"] = args;\n    for (var key in extra)\n      command[key] = extra[key];\n    _mapCommand(command);\n  }\n\n  // The timeout in milliseconds for the two-character ESC keymap should be\n  // adjusted according to your typing speed to prevent false positives.\n  defineOption('insertModeEscKeysTimeout', 200, 'number');\n\n\n  /**\n   * @arg {CodeMirrorV} cm \n   * @arg {vimState} vim \n   * @arg {MacroModeState} macroModeState \n   * @arg {string} registerName\n   */\n  function executeMacroRegister(cm, vim, macroModeState, registerName) {\n    var register = vimGlobalState.registerController.getRegister(registerName);\n    if (registerName == ':') {\n      // Read-only register containing last Ex command.\n      if (register.keyBuffer[0]) {\n        exCommandDispatcher.processCommand(cm, register.keyBuffer[0]);\n      }\n      macroModeState.isPlaying = false;\n      return;\n    }\n    var keyBuffer = register.keyBuffer;\n    var imc = 0;\n    macroModeState.isPlaying = true;\n    macroModeState.replaySearchQueries = register.searchQueries.slice(0);\n    for (var i = 0; i < keyBuffer.length; i++) {\n      var text = keyBuffer[i];\n      var match, key;\n      var keyRe = /<(?:[CSMA]-)*\\w+>|./gi;\n      while ((match = keyRe.exec(text))) {\n        // Pull off one command key, which is either a single character\n        // or a special sequence wrapped in '<' and '>', e.g. '<Space>'.\n        key = match[0];\n        vimApi.handleKey(cm, key, 'macro');\n        if (vim.insertMode) {\n          var changes = register.insertModeChanges[imc++].changes;\n          vimGlobalState.macroModeState.lastInsertModeChanges.changes = changes;\n          repeatInsertModeChanges(cm, changes, 1);\n          exitInsertMode(cm);\n        }\n      }\n    }\n    macroModeState.isPlaying = false;\n  }\n\n  /** @arg {MacroModeState} macroModeState @arg {any} key */\n  function logKey(macroModeState, key) {\n    if (macroModeState.isPlaying) { return; }\n    var registerName = macroModeState.latestRegister;\n    var register = vimGlobalState.registerController.getRegister(registerName);\n    if (register) {\n      register.pushText(key);\n    }\n  }\n\n  /** @arg {MacroModeState} macroModeState */\n  function logInsertModeChange(macroModeState) {\n    if (macroModeState.isPlaying) { return; }\n    var registerName = macroModeState.latestRegister;\n    var register = vimGlobalState.registerController.getRegister(registerName);\n    if (register && register.pushInsertModeChanges) {\n      register.pushInsertModeChanges(macroModeState.lastInsertModeChanges);\n    }\n  }\n\n  /** @arg {MacroModeState} macroModeState @arg {string} query */\n  function logSearchQuery(macroModeState, query) {\n    if (macroModeState.isPlaying) { return; }\n    var registerName = macroModeState.latestRegister;\n    var register = vimGlobalState.registerController.getRegister(registerName);\n    if (register && register.pushSearchQuery) {\n      register.pushSearchQuery(query);\n    }\n  }\n\n  /**\n   * Listens for changes made in insert mode.\n   * Should only be active in insert mode.\n   * @arg {CodeMirror} cm\n   * @arg {{ origin: string | undefined; text: any[]; next: any; }} changeObj\n   */\n  function onChange(cm, changeObj) {\n    var macroModeState = vimGlobalState.macroModeState;\n    var lastChange = macroModeState.lastInsertModeChanges;\n    if (!macroModeState.isPlaying) {\n      var vim = cm.state.vim;\n      while(changeObj) {\n        lastChange.expectCursorActivityForChange = true;\n        // @ts-ignore\n        if (lastChange.ignoreCount > 1) {\n          // @ts-ignore\n          lastChange.ignoreCount--;\n        } else if (changeObj.origin == '+input' || changeObj.origin == 'paste'\n            || changeObj.origin === undefined /* only in testing */) {\n          var selectionCount = cm.listSelections().length;\n          if (selectionCount > 1)\n            lastChange.ignoreCount = selectionCount;\n          var text = changeObj.text.join('\\n');\n          if (lastChange.maybeReset) {\n            lastChange.changes = [];\n            lastChange.maybeReset = false;\n          }\n          if (text) {\n            if (cm.state.overwrite && !/\\n/.test(text)) {\n              lastChange.changes.push([text]);\n            } else {\n              if (text.length > 1) {\n                var insertEnd = vim && vim.insertEnd && vim.insertEnd.find();\n                var cursor = cm.getCursor();\n                if (insertEnd && insertEnd.line == cursor.line) {\n                  var offset = insertEnd.ch - cursor.ch;\n                  if (offset > 0 && offset < text.length) {\n                    lastChange.changes.push([text, offset]);\n                    text = '';\n                  }\n                }\n              }\n              if (text) lastChange.changes.push(text);\n            }\n          }\n        }\n        // Change objects may be chained with next.\n        changeObj = changeObj.next;\n      }\n    }\n  }\n\n  /**\n   * Listens for any kind of cursor activity on CodeMirror.\n   * @arg {CodeMirrorV} cm\n   */\n  function onCursorActivity(cm) {\n    var vim = cm.state.vim;\n    if (vim.insertMode) {\n      // Tracking cursor activity in insert mode (for macro support).\n      var macroModeState = vimGlobalState.macroModeState;\n      if (macroModeState.isPlaying) { return; }\n      var lastChange = macroModeState.lastInsertModeChanges;\n      if (lastChange.expectCursorActivityForChange) {\n        lastChange.expectCursorActivityForChange = false;\n      } else {\n        // Cursor moved outside the context of an edit. Reset the change.\n        lastChange.maybeReset = true;\n        if (vim.insertEnd) vim.insertEnd.clear();\n        vim.insertEnd = cm.setBookmark(cm.getCursor(), {insertLeft: true});\n      }\n    } else if (!cm.curOp?.isVimOp) {\n      handleExternalSelection(cm, vim);\n    }\n  }\n  /** @arg {CodeMirrorV} cm  @arg {vimState} vim */\n  function handleExternalSelection(cm, vim) {\n    var anchor = cm.getCursor('anchor');\n    var head = cm.getCursor('head');\n    // Enter or exit visual mode to match mouse selection.\n    if (vim.visualMode && !cm.somethingSelected()) {\n      exitVisualMode(cm, false);\n    } else if (!vim.visualMode && !vim.insertMode && cm.somethingSelected()) {\n      vim.visualMode = true;\n      vim.visualLine = false;\n      CM.signal(cm, \"vim-mode-change\", {mode: \"visual\"});\n    }\n    if (vim.visualMode) {\n      // Bind CodeMirror selection model to vim selection model.\n      // Mouse selections are considered visual characterwise.\n      var headOffset = !cursorIsBefore(head, anchor) ? -1 : 0;\n      var anchorOffset = cursorIsBefore(head, anchor) ? -1 : 0;\n      head = offsetCursor(head, 0, headOffset);\n      anchor = offsetCursor(anchor, 0, anchorOffset);\n      vim.sel = {\n        anchor: anchor,\n        head: head\n      };\n      updateMark(cm, vim, '<', cursorMin(head, anchor));\n      updateMark(cm, vim, '>', cursorMax(head, anchor));\n    } else if (!vim.insertMode) {\n      // Reset lastHPos if selection was modified by something outside of vim mode e.g. by mouse.\n      vim.lastHPos = cm.getCursor().ch;\n    }\n  }\n\n  /**\n   * Handles raw key down events from the text area.\n   * - Should only be active in insert mode.\n   * - For recording deletes in insert mode.\n   * @arg {KeyboardEvent} e\n   */\n  function onKeyEventTargetKeyDown(e) {\n    var macroModeState = vimGlobalState.macroModeState;\n    var lastChange = macroModeState.lastInsertModeChanges;\n    var keyName = CM.keyName ? CM.keyName(e) : e.key;\n    if (!keyName) { return; }\n    \n    if (keyName.indexOf('Delete') != -1 || keyName.indexOf('Backspace') != -1) {\n      if (lastChange.maybeReset) {\n        lastChange.changes = [];\n        lastChange.maybeReset = false;\n      }\n      lastChange.changes.push(new InsertModeKey(keyName, e));\n    }\n  }\n\n  /**\n   * Repeats the last edit, which includes exactly 1 command and at most 1\n   * insert. Operator and motion commands are read from lastEditInputState,\n   * while action commands are read from lastEditActionCommand.\n   *\n   * If repeatForInsert is true, then the function was called by\n   * exitInsertMode to repeat the insert mode changes the user just made. The\n   * corresponding enterInsertMode call was made with a count.\n   * @arg {CodeMirrorV} cm \n   * @arg {vimState} vim \n   * @arg {number} repeat  \n   * @arg {boolean} repeatForInsert\n   */\n  function repeatLastEdit(cm, vim, repeat, repeatForInsert) {\n    var macroModeState = vimGlobalState.macroModeState;\n    macroModeState.isPlaying = true;\n    var lastAction = vim.lastEditActionCommand;\n    var cachedInputState = vim.inputState;\n    function repeatCommand() {\n      if (lastAction) {\n        commandDispatcher.processAction(cm, vim, lastAction);\n      } else {\n        commandDispatcher.evalInput(cm, vim);\n      }\n    }\n    /** @arg {number} repeat */\n    function repeatInsert(repeat) {\n      if (macroModeState.lastInsertModeChanges.changes.length > 0) {\n        // For some reason, repeat cw in desktop VIM does not repeat\n        // insert mode changes. Will conform to that behavior.\n        repeat = !vim.lastEditActionCommand ? 1 : repeat;\n        var changeObject = macroModeState.lastInsertModeChanges;\n        repeatInsertModeChanges(cm, changeObject.changes, repeat);\n      }\n    }\n    // @ts-ignore\n    vim.inputState = vim.lastEditInputState;\n    if (lastAction && lastAction.interlaceInsertRepeat) {\n      // o and O repeat have to be interlaced with insert repeats so that the\n      // insertions appear on separate lines instead of the last line.\n      for (var i = 0; i < repeat; i++) {\n        repeatCommand();\n        repeatInsert(1);\n      }\n    } else {\n      if (!repeatForInsert) {\n        // Hack to get the cursor to end up at the right place. If I is\n        // repeated in insert mode repeat, cursor will be 1 insert\n        // change set left of where it should be.\n        repeatCommand();\n      }\n      repeatInsert(repeat);\n    }\n    vim.inputState = cachedInputState;\n    if (vim.insertMode && !repeatForInsert) {\n      // Don't exit insert mode twice. If repeatForInsert is set, then we\n      // were called by an exitInsertMode call lower on the stack.\n      exitInsertMode(cm);\n    }\n    macroModeState.isPlaying = false;\n  }\n  /**@arg {CodeMirrorV} cm, @arg {string} key */\n  function sendCmKey(cm, key) {\n    CM.lookupKey(key, 'vim-insert', function keyHandler(binding) {\n      if (typeof binding == 'string') {\n        CM.commands[binding](cm);\n      } else {\n        binding(cm);\n      }\n      return true;\n    });\n  }\n  /**\n   * @param {CodeMirrorV} cm\n   * @param {InsertModeChanges[\"changes\"]} changes\n   * @param {number} repeat\n   */\n  function repeatInsertModeChanges(cm, changes, repeat) {\n    var head = cm.getCursor('head');\n    var visualBlock = vimGlobalState.macroModeState.lastInsertModeChanges.visualBlock;\n    if (visualBlock) {\n      // Set up block selection again for repeating the changes.\n      selectForInsert(cm, head, visualBlock + 1);\n      repeat = cm.listSelections().length;\n      cm.setCursor(head);\n    }\n    for (var i = 0; i < repeat; i++) {\n      if (visualBlock) {\n        cm.setCursor(offsetCursor(head, i, 0));\n      }\n      for (var j = 0; j < changes.length; j++) {\n        var change = changes[j];\n        if (change instanceof InsertModeKey) {\n          sendCmKey(cm, change.keyName);\n        } else if (typeof change == \"string\") {\n          cm.replaceSelection(change);\n        } else {\n          var start = cm.getCursor();\n          var end = offsetCursor(start, 0, change[0].length - (change[1] || 0));\n          cm.replaceRange(change[0], start, change[1] ? start: end);\n          cm.setCursor(end);\n        }\n      }\n    }\n    if (visualBlock) {\n      cm.setCursor(offsetCursor(head, 0, 1));\n    }\n  }\n\n  // multiselect support\n  /** @arg {vimState} state */\n  function cloneVimState(state) {\n    // @ts-ignore\n    var n = new state.constructor();\n    Object.keys(state).forEach(function(key) {\n      if (key == \"insertEnd\") return;\n      var o = state[key];\n      if (Array.isArray(o))\n        o = o.slice();\n      else if (o && typeof o == \"object\" && o.constructor != Object)\n        o = cloneVimState(o);\n      n[key] = o;\n    });\n    if (state.sel) {\n      n.sel = {\n        head: state.sel.head && copyCursor(state.sel.head),\n        anchor: state.sel.anchor && copyCursor(state.sel.anchor)\n      };\n    }\n    return n;\n  }\n  /** @arg {CodeMirror} cm_  @arg {string} key @arg {string} origin */\n  function multiSelectHandleKey(cm_, key, origin) {\n    var vim = maybeInitVimState(cm_);\n    var cm = /**@type {CodeMirrorV}*/(cm_);\n    /** @type {boolean | undefined} */\n    var isHandled = false;\n    var vim = vimApi.maybeInitVimState_(cm);\n    var visualBlock = vim.visualBlock || vim.wasInVisualBlock;\n\n    if (cm.state.closeVimNotification) {\n      var close = cm.state.closeVimNotification;\n      cm.state.closeVimNotification = null;\n      close();\n      if (key == '<CR>') {\n        clearInputState(cm);\n        return true;\n      }\n    }\n\n    var wasMultiselect = cm.isInMultiSelectMode();\n    if (vim.wasInVisualBlock && !wasMultiselect) {\n      vim.wasInVisualBlock = false;\n    } else if (wasMultiselect && vim.visualBlock) {\n        vim.wasInVisualBlock = true;\n    }\n\n    if (key == '<Esc>' && !vim.insertMode && !vim.visualMode && wasMultiselect && vim.status == \"<Esc>\") {\n      // allow editor to exit multiselect\n      clearInputState(cm);\n    // @ts-ignore\n    } else if (visualBlock || !wasMultiselect || cm.inVirtualSelectionMode) {\n      isHandled = vimApi.handleKey(cm, key, origin);\n    } else {\n      var old = cloneVimState(vim);\n      var changeQueueList = vim.inputState.changeQueueList || [];\n\n      cm.operation(function() {\n        if (cm.curOp)\n          cm.curOp.isVimOp = true;\n        var index = 0;\n        cm.forEachSelection(function() {\n          cm.state.vim.inputState.changeQueue = changeQueueList[index];\n          var head = cm.getCursor(\"head\");\n          var anchor = cm.getCursor(\"anchor\");\n          var headOffset = !cursorIsBefore(head, anchor) ? -1 : 0;\n          var anchorOffset = cursorIsBefore(head, anchor) ? -1 : 0;\n          head = offsetCursor(head, 0, headOffset);\n          anchor = offsetCursor(anchor, 0, anchorOffset);\n          cm.state.vim.sel.head = head;\n          cm.state.vim.sel.anchor = anchor;\n\n          isHandled = vimApi.handleKey(cm, key, origin);\n          if (cm.virtualSelection) {\n            changeQueueList[index] = cm.state.vim.inputState.changeQueue;\n            cm.state.vim = cloneVimState(old);\n          }\n          index++;\n        });\n        if (cm.curOp?.cursorActivity && !isHandled)\n          cm.curOp.cursorActivity = false;\n        cm.state.vim = vim;\n        vim.inputState.changeQueueList = changeQueueList;\n        vim.inputState.changeQueue = null;\n      }, true);\n    }\n    // some commands may bring visualMode and selection out of sync\n    if (isHandled && !vim.visualMode && !vim.insertMode && vim.visualMode != cm.somethingSelected()) {\n      handleExternalSelection(cm, vim);\n    }\n    return isHandled;\n  }\n  resetVimGlobalState();\n\n  return vimApi;\n}\n\nfunction indexFromPos(doc, pos) {\n    var ch = pos.ch;\n    var lineNumber = pos.line + 1;\n    if (lineNumber < 1) {\n        lineNumber = 1;\n        ch = 0;\n    }\n    if (lineNumber > doc.lines) {\n        lineNumber = doc.lines;\n        ch = Number.MAX_VALUE;\n    }\n    var line = doc.line(lineNumber);\n    return Math.min(line.from + Math.max(0, ch), line.to);\n}\nfunction posFromIndex(doc, offset) {\n    let line = doc.lineAt(offset);\n    return { line: line.number - 1, ch: offset - line.from };\n}\nclass Pos {\n    constructor(line, ch) {\n        this.line = line;\n        this.ch = ch;\n    }\n}\nfunction on(emitter, type, f) {\n    if (emitter.addEventListener) {\n        emitter.addEventListener(type, f, false);\n    }\n    else {\n        var map = emitter._handlers || (emitter._handlers = {});\n        map[type] = (map[type] || []).concat(f);\n    }\n}\nfunction off(emitter, type, f) {\n    if (emitter.removeEventListener) {\n        emitter.removeEventListener(type, f, false);\n    }\n    else {\n        var map = emitter._handlers, arr = map && map[type];\n        if (arr) {\n            var index = arr.indexOf(f);\n            if (index > -1) {\n                map[type] = arr.slice(0, index).concat(arr.slice(index + 1));\n            }\n        }\n    }\n}\nfunction signal(emitter, type, ...args) {\n    var _a;\n    var handlers = (_a = emitter._handlers) === null || _a === void 0 ? void 0 : _a[type];\n    if (!handlers)\n        return;\n    for (var i = 0; i < handlers.length; ++i) {\n        handlers[i](...args);\n    }\n}\nfunction signalTo(handlers, ...args) {\n    if (!handlers)\n        return;\n    for (var i = 0; i < handlers.length; ++i) {\n        handlers[i](...args);\n    }\n}\nlet wordChar;\ntry {\n    wordChar = /*@__PURE__*/new RegExp(\"[\\\\w\\\\p{Alphabetic}\\\\p{Number}_]\", \"u\");\n}\ncatch (_) {\n    wordChar = /[\\w]/;\n}\n// workaround for missing api for merging transactions\nfunction dispatchChange(cm, transaction) {\n    var view = cm.cm6;\n    if (view.state.readOnly)\n        return;\n    var type = \"input.type.compose\";\n    if (cm.curOp) {\n        if (!cm.curOp.lastChange)\n            type = \"input.type.compose.start\";\n    }\n    if (transaction.annotations) {\n        try {\n            transaction.annotations.some(function (note) {\n                if (note.value == \"input\")\n                    note.value = type;\n            });\n        }\n        catch (e) {\n            console.error(e);\n        }\n    }\n    else {\n        transaction.userEvent = type;\n    }\n    return view.dispatch(transaction);\n}\nfunction runHistoryCommand(cm, revert) {\n    var _a;\n    if (cm.curOp) {\n        cm.curOp.$changeStart = undefined;\n    }\n    (revert ? _codemirror_commands__WEBPACK_IMPORTED_MODULE_0__.undo : _codemirror_commands__WEBPACK_IMPORTED_MODULE_0__.redo)(cm.cm6);\n    let changeStartIndex = (_a = cm.curOp) === null || _a === void 0 ? void 0 : _a.$changeStart;\n    // vim mode expects the changed text to be either selected or cursor placed at the start\n    if (changeStartIndex != null) {\n        cm.cm6.dispatch({ selection: { anchor: changeStartIndex } });\n    }\n}\nvar keys = {\n    Left: (cm) => (0,_codemirror_view__WEBPACK_IMPORTED_MODULE_1__.runScopeHandlers)(cm.cm6, { key: \"Left\" }, \"editor\"),\n    Right: (cm) => (0,_codemirror_view__WEBPACK_IMPORTED_MODULE_1__.runScopeHandlers)(cm.cm6, { key: \"Right\" }, \"editor\"),\n    Up: (cm) => (0,_codemirror_view__WEBPACK_IMPORTED_MODULE_1__.runScopeHandlers)(cm.cm6, { key: \"Up\" }, \"editor\"),\n    Down: (cm) => (0,_codemirror_view__WEBPACK_IMPORTED_MODULE_1__.runScopeHandlers)(cm.cm6, { key: \"Down\" }, \"editor\"),\n    Backspace: (cm) => (0,_codemirror_view__WEBPACK_IMPORTED_MODULE_1__.runScopeHandlers)(cm.cm6, { key: \"Backspace\" }, \"editor\"),\n    Delete: (cm) => (0,_codemirror_view__WEBPACK_IMPORTED_MODULE_1__.runScopeHandlers)(cm.cm6, { key: \"Delete\" }, \"editor\"),\n};\nclass CodeMirror {\n    // --------------------------\n    openDialog(template, callback, options) {\n        return openDialog(this, template, callback, options);\n    }\n    ;\n    openNotification(template, options) {\n        return openNotification(this, template, options);\n    }\n    ;\n    constructor(cm6) {\n        this.state = {};\n        this.marks = Object.create(null);\n        this.$mid = 0; // marker id counter\n        this.options = {};\n        this._handlers = {};\n        this.$lastChangeEndOffset = 0;\n        this.virtualSelection = null;\n        this.cm6 = cm6;\n        this.onChange = this.onChange.bind(this);\n        this.onSelectionChange = this.onSelectionChange.bind(this);\n    }\n    ;\n    on(type, f) { on(this, type, f); }\n    off(type, f) { off(this, type, f); }\n    signal(type, e, handlers) { signal(this, type, e, handlers); }\n    indexFromPos(pos) {\n        return indexFromPos(this.cm6.state.doc, pos);\n    }\n    ;\n    posFromIndex(offset) {\n        return posFromIndex(this.cm6.state.doc, offset);\n    }\n    ;\n    foldCode(pos) {\n        let view = this.cm6;\n        let ranges = view.state.selection.ranges;\n        let doc = this.cm6.state.doc;\n        let index = indexFromPos(doc, pos);\n        let tmpRanges = _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.create([_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.range(index, index)], 0).ranges;\n        view.state.selection.ranges = tmpRanges;\n        (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.foldCode)(view);\n        view.state.selection.ranges = ranges;\n    }\n    firstLine() { return 0; }\n    ;\n    lastLine() { return this.cm6.state.doc.lines - 1; }\n    ;\n    lineCount() { return this.cm6.state.doc.lines; }\n    ;\n    setCursor(line, ch) {\n        if (typeof line === 'object') {\n            ch = line.ch;\n            line = line.line;\n        }\n        var offset = indexFromPos(this.cm6.state.doc, { line, ch: ch || 0 });\n        this.cm6.dispatch({ selection: { anchor: offset } }, { scrollIntoView: !this.curOp });\n        if (this.curOp && !this.curOp.isVimOp)\n            this.onBeforeEndOperation();\n    }\n    ;\n    getCursor(p) {\n        var sel = this.cm6.state.selection.main;\n        var offset = p == \"head\" || !p\n            ? sel.head\n            : p == \"anchor\"\n                ? sel.anchor\n                : p == \"start\"\n                    ? sel.from\n                    : p == \"end\"\n                        ? sel.to\n                        : null;\n        if (offset == null)\n            throw new Error(\"Invalid cursor type\");\n        return this.posFromIndex(offset);\n    }\n    ;\n    listSelections() {\n        var doc = this.cm6.state.doc;\n        return this.cm6.state.selection.ranges.map(r => {\n            return {\n                anchor: posFromIndex(doc, r.anchor),\n                head: posFromIndex(doc, r.head),\n            };\n        });\n    }\n    ;\n    setSelections(p, primIndex) {\n        var doc = this.cm6.state.doc;\n        var ranges = p.map(x => {\n            var head = indexFromPos(doc, x.head);\n            var anchor = indexFromPos(doc, x.anchor);\n            // workaround for codemirror bug, see https://github.com/replit/codemirror-vim/issues/169\n            if (head == anchor)\n                return _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.cursor(head, 1);\n            return _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.range(anchor, head);\n        });\n        this.cm6.dispatch({\n            selection: _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.create(ranges, primIndex)\n        });\n    }\n    ;\n    setSelection(anchor, head, options) {\n        this.setSelections([{ anchor, head }], 0);\n        if (options && options.origin == '*mouse') {\n            this.onBeforeEndOperation();\n        }\n    }\n    ;\n    getLine(row) {\n        var doc = this.cm6.state.doc;\n        if (row < 0 || row >= doc.lines)\n            return \"\";\n        return this.cm6.state.doc.line(row + 1).text;\n    }\n    ;\n    getLineHandle(row) {\n        if (!this.$lineHandleChanges)\n            this.$lineHandleChanges = [];\n        return { row: row, index: this.indexFromPos(new Pos(row, 0)) };\n    }\n    getLineNumber(handle) {\n        var updates = this.$lineHandleChanges;\n        if (!updates)\n            return null;\n        var offset = handle.index;\n        for (var i = 0; i < updates.length; i++) {\n            offset = updates[i].changes.mapPos(offset, 1, _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.MapMode.TrackAfter);\n            if (offset == null)\n                return null;\n        }\n        var pos = this.posFromIndex(offset);\n        return pos.ch == 0 ? pos.line : null;\n    }\n    releaseLineHandles() {\n        this.$lineHandleChanges = undefined;\n    }\n    getRange(s, e) {\n        var doc = this.cm6.state.doc;\n        return this.cm6.state.sliceDoc(indexFromPos(doc, s), indexFromPos(doc, e));\n    }\n    ;\n    replaceRange(text, s, e, source) {\n        if (!e)\n            e = s;\n        var doc = this.cm6.state.doc;\n        var from = indexFromPos(doc, s);\n        var to = indexFromPos(doc, e);\n        dispatchChange(this, { changes: { from, to, insert: text } });\n    }\n    ;\n    replaceSelection(text) {\n        dispatchChange(this, this.cm6.state.replaceSelection(text));\n    }\n    ;\n    replaceSelections(replacements) {\n        var ranges = this.cm6.state.selection.ranges;\n        var changes = ranges.map((r, i) => {\n            return { from: r.from, to: r.to, insert: replacements[i] || \"\" };\n        });\n        dispatchChange(this, { changes });\n    }\n    ;\n    getSelection() {\n        return this.getSelections().join(\"\\n\");\n    }\n    ;\n    getSelections() {\n        var cm = this.cm6;\n        return cm.state.selection.ranges.map(r => cm.state.sliceDoc(r.from, r.to));\n    }\n    ;\n    somethingSelected() {\n        return this.cm6.state.selection.ranges.some(r => !r.empty);\n    }\n    ;\n    getInputField() {\n        return this.cm6.contentDOM;\n    }\n    ;\n    clipPos(p) {\n        var doc = this.cm6.state.doc;\n        var ch = p.ch;\n        var lineNumber = p.line + 1;\n        if (lineNumber < 1) {\n            lineNumber = 1;\n            ch = 0;\n        }\n        if (lineNumber > doc.lines) {\n            lineNumber = doc.lines;\n            ch = Number.MAX_VALUE;\n        }\n        var line = doc.line(lineNumber);\n        ch = Math.min(Math.max(0, ch), line.to - line.from);\n        return new Pos(lineNumber - 1, ch);\n    }\n    ;\n    getValue() {\n        return this.cm6.state.doc.toString();\n    }\n    ;\n    setValue(text) {\n        var cm = this.cm6;\n        return cm.dispatch({\n            changes: { from: 0, to: cm.state.doc.length, insert: text },\n            selection: _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.range(0, 0)\n        });\n    }\n    ;\n    focus() {\n        return this.cm6.focus();\n    }\n    ;\n    blur() {\n        return this.cm6.contentDOM.blur();\n    }\n    ;\n    defaultTextHeight() {\n        return this.cm6.defaultLineHeight;\n    }\n    ;\n    findMatchingBracket(pos, _options) {\n        var state = this.cm6.state;\n        var offset = indexFromPos(state.doc, pos);\n        var m = (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.matchBrackets)(state, offset + 1, -1);\n        if (m && m.end) {\n            return { to: posFromIndex(state.doc, m.end.from) };\n        }\n        m = (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.matchBrackets)(state, offset, 1);\n        if (m && m.end) {\n            return { to: posFromIndex(state.doc, m.end.from) };\n        }\n        return { to: undefined };\n    }\n    ;\n    scanForBracket(pos, dir, style, config) {\n        return scanForBracket(this, pos, dir, style, config);\n    }\n    ;\n    indentLine(line, more) {\n        // todo how to indent only one line instead of selection\n        if (more)\n            this.indentMore();\n        else\n            this.indentLess();\n    }\n    ;\n    indentMore() {\n        (0,_codemirror_commands__WEBPACK_IMPORTED_MODULE_0__.indentMore)(this.cm6);\n    }\n    ;\n    indentLess() {\n        (0,_codemirror_commands__WEBPACK_IMPORTED_MODULE_0__.indentLess)(this.cm6);\n    }\n    ;\n    execCommand(name) {\n        if (name == \"indentAuto\")\n            CodeMirror.commands.indentAuto(this);\n        else if (name == \"goLineLeft\")\n            (0,_codemirror_commands__WEBPACK_IMPORTED_MODULE_0__.cursorLineBoundaryBackward)(this.cm6);\n        else if (name == \"goLineRight\") {\n            (0,_codemirror_commands__WEBPACK_IMPORTED_MODULE_0__.cursorLineBoundaryForward)(this.cm6);\n            let state = this.cm6.state;\n            let cur = state.selection.main.head;\n            if (cur < state.doc.length && state.sliceDoc(cur, cur + 1) !== \"\\n\") {\n                (0,_codemirror_commands__WEBPACK_IMPORTED_MODULE_0__.cursorCharBackward)(this.cm6);\n            }\n        }\n        else\n            console.log(name + \" is not implemented\");\n    }\n    ;\n    setBookmark(cursor, options) {\n        var assoc = (options === null || options === void 0 ? void 0 : options.insertLeft) ? 1 : -1;\n        var offset = this.indexFromPos(cursor);\n        var bm = new Marker(this, offset, assoc);\n        return bm;\n    }\n    ;\n    addOverlay({ query }) {\n        let cm6Query = new _codemirror_search__WEBPACK_IMPORTED_MODULE_4__.SearchQuery({\n            regexp: true,\n            search: query.source,\n            caseSensitive: !/i/.test(query.flags),\n        });\n        if (cm6Query.valid) {\n            cm6Query.forVim = true;\n            this.cm6Query = cm6Query;\n            let effect = _codemirror_search__WEBPACK_IMPORTED_MODULE_4__.setSearchQuery.of(cm6Query);\n            this.cm6.dispatch({ effects: effect });\n            return cm6Query;\n        }\n    }\n    ;\n    removeOverlay(overlay) {\n        if (!this.cm6Query)\n            return;\n        this.cm6Query.forVim = false;\n        let effect = _codemirror_search__WEBPACK_IMPORTED_MODULE_4__.setSearchQuery.of(this.cm6Query);\n        this.cm6.dispatch({ effects: effect });\n    }\n    ;\n    getSearchCursor(query, pos) {\n        var cm = this;\n        var last = null;\n        var lastCM5Result = null;\n        var afterEmptyMatch = false;\n        if (pos.ch == undefined)\n            pos.ch = Number.MAX_VALUE;\n        var firstOffset = indexFromPos(cm.cm6.state.doc, pos);\n        var source = query.source.replace(/(\\\\.|{(?:\\d+(?:,\\d*)?|,\\d+)})|[{}]/g, function (a, b) {\n            if (!b)\n                return \"\\\\\" + a;\n            return b;\n        });\n        function rCursor(doc, from = 0, to = doc.length) {\n            return new _codemirror_search__WEBPACK_IMPORTED_MODULE_4__.RegExpCursor(doc, source, { ignoreCase: query.ignoreCase }, from, to);\n        }\n        function nextMatch(from) {\n            var doc = cm.cm6.state.doc;\n            if (from > doc.length)\n                return null;\n            let res = rCursor(doc, from).next();\n            return res.done ? null : res.value;\n        }\n        var ChunkSize = 10000;\n        function prevMatchInRange(from, to) {\n            var doc = cm.cm6.state.doc;\n            for (let size = 1;; size++) {\n                let start = Math.max(from, to - size * ChunkSize);\n                let cursor = rCursor(doc, start, to), range = null;\n                while (!cursor.next().done)\n                    range = cursor.value;\n                if (range && (start == from || range.from > start + 10))\n                    return range;\n                if (start == from)\n                    return null;\n            }\n        }\n        return {\n            findNext: function () { return this.find(false); },\n            findPrevious: function () { return this.find(true); },\n            find: function (back) {\n                var doc = cm.cm6.state.doc;\n                if (back) {\n                    let endAt = last ? (afterEmptyMatch ? last.to - 1 : last.from) : firstOffset;\n                    last = prevMatchInRange(0, endAt);\n                }\n                else {\n                    let startFrom = last ? (afterEmptyMatch ? last.to + 1 : last.to) : firstOffset;\n                    last = nextMatch(startFrom);\n                }\n                lastCM5Result = last && {\n                    from: posFromIndex(doc, last.from),\n                    to: posFromIndex(doc, last.to),\n                    match: last.match,\n                };\n                afterEmptyMatch = last ? last.from == last.to : false;\n                return last && last.match;\n            },\n            from: function () { return lastCM5Result === null || lastCM5Result === void 0 ? void 0 : lastCM5Result.from; },\n            to: function () { return lastCM5Result === null || lastCM5Result === void 0 ? void 0 : lastCM5Result.to; },\n            replace: function (text) {\n                if (last) {\n                    dispatchChange(cm, {\n                        changes: { from: last.from, to: last.to, insert: text }\n                    });\n                    last.to = last.from + text.length;\n                    if (lastCM5Result) {\n                        lastCM5Result.to = posFromIndex(cm.cm6.state.doc, last.to);\n                    }\n                }\n            },\n            get match() {\n                return lastCM5Result && lastCM5Result.match;\n            }\n        };\n    }\n    ;\n    findPosV(start, amount, unit, goalColumn) {\n        let { cm6 } = this;\n        const doc = cm6.state.doc;\n        let pixels = unit == 'page' ? cm6.dom.clientHeight : 0;\n        const startOffset = indexFromPos(doc, start);\n        let range = _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.cursor(startOffset, 1, undefined, goalColumn);\n        let count = Math.round(Math.abs(amount));\n        for (let i = 0; i < count; i++) {\n            if (unit == 'page') {\n                range = cm6.moveVertically(range, amount > 0, pixels);\n            }\n            else if (unit == 'line') {\n                range = cm6.moveVertically(range, amount > 0);\n            }\n        }\n        let pos = posFromIndex(doc, range.head);\n        // set hitside to true if there was no place to move and cursor was clipped to the edge\n        // of document. Needed for gj/gk\n        if ((amount < 0 &&\n            range.head == 0 && goalColumn != 0 &&\n            start.line == 0 && start.ch != 0) || (amount > 0 &&\n            range.head == doc.length && pos.ch != goalColumn\n            && start.line == pos.line)) {\n            pos.hitSide = true;\n        }\n        return pos;\n    }\n    ;\n    charCoords(pos, mode) {\n        var rect = this.cm6.contentDOM.getBoundingClientRect();\n        var offset = indexFromPos(this.cm6.state.doc, pos);\n        var coords = this.cm6.coordsAtPos(offset);\n        var d = -rect.top;\n        return { left: ((coords === null || coords === void 0 ? void 0 : coords.left) || 0) - rect.left, top: ((coords === null || coords === void 0 ? void 0 : coords.top) || 0) + d, bottom: ((coords === null || coords === void 0 ? void 0 : coords.bottom) || 0) + d };\n    }\n    ;\n    coordsChar(coords, mode) {\n        var rect = this.cm6.contentDOM.getBoundingClientRect();\n        var offset = this.cm6.posAtCoords({ x: coords.left + rect.left, y: coords.top + rect.top }) || 0;\n        return posFromIndex(this.cm6.state.doc, offset);\n    }\n    ;\n    getScrollInfo() {\n        var scroller = this.cm6.scrollDOM;\n        return {\n            left: scroller.scrollLeft, top: scroller.scrollTop,\n            height: scroller.scrollHeight,\n            width: scroller.scrollWidth,\n            clientHeight: scroller.clientHeight, clientWidth: scroller.clientWidth\n        };\n    }\n    ;\n    scrollTo(x, y) {\n        if (x != null)\n            this.cm6.scrollDOM.scrollLeft = x;\n        if (y != null)\n            this.cm6.scrollDOM.scrollTop = y;\n    }\n    ;\n    scrollIntoView(pos, margin) {\n        if (pos) {\n            var offset = this.indexFromPos(pos);\n            this.cm6.dispatch({\n                effects: _codemirror_view__WEBPACK_IMPORTED_MODULE_1__.EditorView.scrollIntoView(offset)\n            });\n        }\n        else {\n            this.cm6.dispatch({ scrollIntoView: true, userEvent: \"scroll\" });\n        }\n    }\n    ;\n    getWrapperElement() {\n        return this.cm6.dom;\n    }\n    ;\n    // for tests\n    getMode() {\n        return { name: this.getOption(\"mode\") };\n    }\n    ;\n    setSize(w, h) {\n        this.cm6.dom.style.width = w + 4 + \"px\";\n        this.cm6.dom.style.height = h + \"px\";\n        this.refresh();\n    }\n    refresh() {\n        this.cm6.measure();\n    }\n    // event listeners\n    destroy() {\n        this.removeOverlay();\n    }\n    ;\n    getLastEditEnd() {\n        return this.posFromIndex(this.$lastChangeEndOffset);\n    }\n    ;\n    onChange(update) {\n        if (this.$lineHandleChanges) {\n            this.$lineHandleChanges.push(update);\n        }\n        for (let i in this.marks) {\n            let m = this.marks[i];\n            m.update(update.changes);\n        }\n        if (this.virtualSelection) {\n            this.virtualSelection.ranges = this.virtualSelection.ranges.map(range => range.map(update.changes));\n        }\n        var curOp = this.curOp = this.curOp || {};\n        update.changes.iterChanges((fromA, toA, fromB, toB, text) => {\n            if (curOp.$changeStart == null || curOp.$changeStart > fromB)\n                curOp.$changeStart = fromB;\n            this.$lastChangeEndOffset = toB;\n            var change = { text: text.toJSON() };\n            if (!curOp.lastChange) {\n                curOp.lastChange = curOp.change = change;\n            }\n            else {\n                curOp.lastChange.next = curOp.lastChange = change;\n            }\n        }, true);\n        if (!curOp.changeHandlers)\n            curOp.changeHandlers = this._handlers[\"change\"] && this._handlers[\"change\"].slice();\n    }\n    ;\n    onSelectionChange() {\n        var curOp = this.curOp = this.curOp || {};\n        if (!curOp.cursorActivityHandlers)\n            curOp.cursorActivityHandlers = this._handlers[\"cursorActivity\"] && this._handlers[\"cursorActivity\"].slice();\n        this.curOp.cursorActivity = true;\n    }\n    ;\n    operation(fn, force) {\n        if (!this.curOp)\n            this.curOp = { $d: 0 };\n        this.curOp.$d++;\n        try {\n            var result = fn();\n        }\n        finally {\n            if (this.curOp) {\n                this.curOp.$d--;\n                if (!this.curOp.$d)\n                    this.onBeforeEndOperation();\n            }\n        }\n        return result;\n    }\n    ;\n    onBeforeEndOperation() {\n        var op = this.curOp;\n        var scrollIntoView = false;\n        if (op) {\n            if (op.change) {\n                signalTo(op.changeHandlers, this, op.change);\n            }\n            if (op && op.cursorActivity) {\n                signalTo(op.cursorActivityHandlers, this, null);\n                if (op.isVimOp)\n                    scrollIntoView = true;\n            }\n            this.curOp = null;\n        }\n        if (scrollIntoView)\n            this.scrollIntoView();\n    }\n    ;\n    moveH(increment, unit) {\n        if (unit == 'char') {\n            // todo\n            var cur = this.getCursor();\n            this.setCursor(cur.line, cur.ch + increment);\n        }\n    }\n    ;\n    setOption(name, val) {\n        switch (name) {\n            case \"keyMap\":\n                this.state.keyMap = val;\n                break;\n            case \"textwidth\":\n                this.state.textwidth = val;\n                break;\n        }\n    }\n    ;\n    getOption(name) {\n        switch (name) {\n            case \"firstLineNumber\": return 1;\n            case \"tabSize\": return this.cm6.state.tabSize || 4;\n            case \"readOnly\": return this.cm6.state.readOnly;\n            case \"indentWithTabs\": return this.cm6.state.facet(_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.indentUnit) == \"\\t\"; // TODO\n            case \"indentUnit\": return this.cm6.state.facet(_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.indentUnit).length || 2;\n            case \"textwidth\": return this.state.textwidth;\n            // for tests\n            case \"keyMap\": return this.state.keyMap || \"vim\";\n        }\n    }\n    ;\n    toggleOverwrite(on) {\n        this.state.overwrite = on;\n    }\n    ;\n    getTokenTypeAt(pos) {\n        var _a;\n        // only comment|string are needed\n        var offset = this.indexFromPos(pos);\n        var tree = (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.ensureSyntaxTree)(this.cm6.state, offset);\n        var node = tree === null || tree === void 0 ? void 0 : tree.resolve(offset);\n        var type = ((_a = node === null || node === void 0 ? void 0 : node.type) === null || _a === void 0 ? void 0 : _a.name) || \"\";\n        if (/comment/i.test(type))\n            return \"comment\";\n        if (/string/i.test(type))\n            return \"string\";\n        return \"\";\n    }\n    ;\n    overWriteSelection(text) {\n        var doc = this.cm6.state.doc;\n        var sel = this.cm6.state.selection;\n        var ranges = sel.ranges.map(x => {\n            if (x.empty) {\n                var ch = x.to < doc.length ? doc.sliceString(x.from, x.to + 1) : \"\";\n                if (ch && !/\\n/.test(ch))\n                    return _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.range(x.from, x.to + 1);\n            }\n            return x;\n        });\n        this.cm6.dispatch({\n            selection: _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.create(ranges, sel.mainIndex)\n        });\n        this.replaceSelection(text);\n    }\n    /*** multiselect ****/\n    isInMultiSelectMode() {\n        return this.cm6.state.selection.ranges.length > 1;\n    }\n    virtualSelectionMode() {\n        return !!this.virtualSelection;\n    }\n    forEachSelection(command) {\n        var selection = this.cm6.state.selection;\n        this.virtualSelection = _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.create(selection.ranges, selection.mainIndex);\n        for (var i = 0; i < this.virtualSelection.ranges.length; i++) {\n            var range = this.virtualSelection.ranges[i];\n            if (!range)\n                continue;\n            this.cm6.dispatch({ selection: _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.create([range]) });\n            command();\n            this.virtualSelection.ranges[i] = this.cm6.state.selection.ranges[0];\n        }\n        this.cm6.dispatch({ selection: this.virtualSelection });\n        this.virtualSelection = null;\n    }\n    hardWrap(options) {\n        return hardWrap(this, options);\n    }\n}\nCodeMirror.isMac = typeof navigator != \"undefined\" && /*@__PURE__*//Mac/.test(navigator.platform);\n// --------------------------\nCodeMirror.Pos = Pos;\nCodeMirror.StringStream = _codemirror_language__WEBPACK_IMPORTED_MODULE_3__.StringStream;\nCodeMirror.commands = {\n    cursorCharLeft: function (cm) { (0,_codemirror_commands__WEBPACK_IMPORTED_MODULE_0__.cursorCharLeft)(cm.cm6); },\n    redo: function (cm) { runHistoryCommand(cm, false); },\n    undo: function (cm) { runHistoryCommand(cm, true); },\n    newlineAndIndent: function (cm) {\n        (0,_codemirror_commands__WEBPACK_IMPORTED_MODULE_0__.insertNewlineAndIndent)({\n            state: cm.cm6.state,\n            dispatch: (tr) => {\n                return dispatchChange(cm, tr);\n            }\n        });\n    },\n    indentAuto: function (cm) {\n        (0,_codemirror_commands__WEBPACK_IMPORTED_MODULE_0__.indentSelection)(cm.cm6);\n    },\n    newlineAndIndentContinueComment: undefined,\n    save: undefined,\n};\nCodeMirror.isWordChar = function (ch) {\n    return wordChar.test(ch);\n};\nCodeMirror.keys = keys;\nCodeMirror.addClass = function (el, str) { };\nCodeMirror.rmClass = function (el, str) { };\nCodeMirror.e_preventDefault = function (e) {\n    e.preventDefault();\n};\nCodeMirror.e_stop = function (e) {\n    var _a, _b;\n    (_a = e === null || e === void 0 ? void 0 : e.stopPropagation) === null || _a === void 0 ? void 0 : _a.call(e);\n    (_b = e === null || e === void 0 ? void 0 : e.preventDefault) === null || _b === void 0 ? void 0 : _b.call(e);\n};\nCodeMirror.lookupKey = function lookupKey(key, map, handle) {\n    var result = CodeMirror.keys[key];\n    if (!result && /^Arrow/.test(key))\n        result = CodeMirror.keys[key.slice(5)];\n    if (result)\n        handle(result);\n};\nCodeMirror.on = on;\nCodeMirror.off = off;\nCodeMirror.signal = signal;\nCodeMirror.findMatchingTag = findMatchingTag;\nCodeMirror.findEnclosingTag = findEnclosingTag;\nCodeMirror.keyName = undefined;\n/************* dialog *************/\nfunction dialogDiv(cm, template, bottom) {\n    var dialog = document.createElement(\"div\");\n    dialog.appendChild(template);\n    return dialog;\n}\nfunction closeNotification(cm, newVal) {\n    if (cm.state.currentNotificationClose)\n        cm.state.currentNotificationClose();\n    cm.state.currentNotificationClose = newVal;\n}\nfunction openNotification(cm, template, options) {\n    closeNotification(cm, close);\n    var dialog = dialogDiv(cm, template, options && options.bottom);\n    var closed = false;\n    var doneTimer;\n    var duration = options && typeof options.duration !== \"undefined\" ? options.duration : 5000;\n    function close() {\n        if (closed)\n            return;\n        closed = true;\n        clearTimeout(doneTimer);\n        dialog.remove();\n        hideDialog(cm, dialog);\n    }\n    dialog.onclick = function (e) {\n        e.preventDefault();\n        close();\n    };\n    showDialog(cm, dialog);\n    if (duration)\n        doneTimer = setTimeout(close, duration);\n    return close;\n}\nfunction showDialog(cm, dialog) {\n    var oldDialog = cm.state.dialog;\n    cm.state.dialog = dialog;\n    dialog.style.flex = \"1\";\n    if (dialog && oldDialog !== dialog) {\n        if (oldDialog && oldDialog.contains(document.activeElement))\n            cm.focus();\n        if (oldDialog && oldDialog.parentElement) {\n            oldDialog.parentElement.replaceChild(dialog, oldDialog);\n        }\n        else if (oldDialog) {\n            oldDialog.remove();\n        }\n        CodeMirror.signal(cm, \"dialog\");\n    }\n}\nfunction hideDialog(cm, dialog) {\n    if (cm.state.dialog == dialog) {\n        cm.state.dialog = null;\n        CodeMirror.signal(cm, \"dialog\");\n    }\n}\nfunction openDialog(me, template, callback, options) {\n    if (!options)\n        options = {};\n    closeNotification(me, undefined);\n    var dialog = dialogDiv(me, template, options.bottom);\n    var closed = false;\n    showDialog(me, dialog);\n    function close(newVal) {\n        if (typeof newVal == 'string') {\n            inp.value = newVal;\n        }\n        else {\n            if (closed)\n                return;\n            closed = true;\n            hideDialog(me, dialog);\n            if (!me.state.dialog)\n                me.focus();\n            if (options.onClose)\n                options.onClose(dialog);\n        }\n    }\n    var inp = dialog.getElementsByTagName(\"input\")[0];\n    if (inp) {\n        if (options.value) {\n            inp.value = options.value;\n            if (options.selectValueOnOpen !== false)\n                inp.select();\n        }\n        if (options.onInput)\n            CodeMirror.on(inp, \"input\", function (e) { options.onInput(e, inp.value, close); });\n        if (options.onKeyUp)\n            CodeMirror.on(inp, \"keyup\", function (e) { options.onKeyUp(e, inp.value, close); });\n        CodeMirror.on(inp, \"keydown\", function (e) {\n            if (options && options.onKeyDown && options.onKeyDown(e, inp.value, close)) {\n                return;\n            }\n            if (e.keyCode == 13)\n                callback && callback(inp.value);\n            if (e.keyCode == 27 || (options.closeOnEnter !== false && e.keyCode == 13)) {\n                inp.blur();\n                CodeMirror.e_stop(e);\n                close();\n            }\n        });\n        if (options.closeOnBlur !== false)\n            CodeMirror.on(inp, \"blur\", function () {\n                setTimeout(function () {\n                    if (document.activeElement === inp)\n                        return;\n                    close();\n                });\n            });\n        inp.focus();\n    }\n    return close;\n}\nvar matching = { \"(\": \")>\", \")\": \"(<\", \"[\": \"]>\", \"]\": \"[<\", \"{\": \"}>\", \"}\": \"{<\", \"<\": \">>\", \">\": \"<<\" };\nfunction bracketRegex(config) {\n    return config && config.bracketRegex || /[(){}[\\]]/;\n}\nfunction scanForBracket(cm, where, dir, style, config) {\n    var maxScanLen = (config && config.maxScanLineLength) || 10000;\n    var maxScanLines = (config && config.maxScanLines) || 1000;\n    var stack = [];\n    var re = bracketRegex(config);\n    var lineEnd = dir > 0 ? Math.min(where.line + maxScanLines, cm.lastLine() + 1)\n        : Math.max(cm.firstLine() - 1, where.line - maxScanLines);\n    for (var lineNo = where.line; lineNo != lineEnd; lineNo += dir) {\n        var line = cm.getLine(lineNo);\n        if (!line)\n            continue;\n        var pos = dir > 0 ? 0 : line.length - 1, end = dir > 0 ? line.length : -1;\n        if (line.length > maxScanLen)\n            continue;\n        if (lineNo == where.line)\n            pos = where.ch - (dir < 0 ? 1 : 0);\n        for (; pos != end; pos += dir) {\n            var ch = line.charAt(pos);\n            if (re.test(ch) /*&& (style === undefined ||\n                                (cm.getTokenTypeAt(new Pos(lineNo, pos + 1)) || \"\") == (style || \"\"))*/) {\n                var match = matching[ch];\n                if (match && (match.charAt(1) == \">\") == (dir > 0))\n                    stack.push(ch);\n                else if (!stack.length)\n                    return { pos: new Pos(lineNo, pos), ch: ch };\n                else\n                    stack.pop();\n            }\n        }\n    }\n    return lineNo - dir == (dir > 0 ? cm.lastLine() : cm.firstLine()) ? false : null;\n}\nfunction findMatchingTag(cm, pos) {\n    return null;\n}\nfunction findEnclosingTag(cm, pos) {\n    var _a, _b;\n    var state = cm.cm6.state;\n    var offset = cm.indexFromPos(pos);\n    if (offset < state.doc.length) {\n        var text = state.sliceDoc(offset, offset + 1);\n        if (text == \"<\")\n            offset++;\n    }\n    var tree = (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.ensureSyntaxTree)(state, offset);\n    var node = (tree === null || tree === void 0 ? void 0 : tree.resolve(offset)) || null;\n    while (node) {\n        if (((_a = node.firstChild) === null || _a === void 0 ? void 0 : _a.type.name) == 'OpenTag'\n            && ((_b = node.lastChild) === null || _b === void 0 ? void 0 : _b.type.name) == 'CloseTag') {\n            return {\n                open: convertRange(state.doc, node.firstChild),\n                close: convertRange(state.doc, node.lastChild),\n            };\n        }\n        node = node.parent;\n    }\n}\nfunction convertRange(doc, cm6Range) {\n    return {\n        from: posFromIndex(doc, cm6Range.from),\n        to: posFromIndex(doc, cm6Range.to)\n    };\n}\nclass Marker {\n    constructor(cm, offset, assoc) {\n        this.cm = cm;\n        this.id = cm.$mid++;\n        this.offset = offset;\n        this.assoc = assoc;\n        cm.marks[this.id] = this;\n    }\n    ;\n    clear() { delete this.cm.marks[this.id]; }\n    ;\n    find() {\n        if (this.offset == null)\n            return null;\n        return this.cm.posFromIndex(this.offset);\n    }\n    ;\n    update(change) {\n        if (this.offset != null)\n            this.offset = change.mapPos(this.offset, this.assoc, _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.MapMode.TrackDel);\n    }\n}\nfunction hardWrap(cm, options) {\n    var _a;\n    var max = options.column || cm.getOption('textwidth') || 80;\n    var allowMerge = options.allowMerge != false;\n    var row = Math.min(options.from, options.to);\n    var endRow = Math.max(options.from, options.to);\n    while (row <= endRow) {\n        var line = cm.getLine(row);\n        if (line.length > max) {\n            var space = findSpace(line, max, 5);\n            if (space) {\n                var indentation = (_a = /^\\s*/.exec(line)) === null || _a === void 0 ? void 0 : _a[0];\n                cm.replaceRange(\"\\n\" + indentation, new Pos(row, space.start), new Pos(row, space.end));\n            }\n            endRow++;\n        }\n        else if (allowMerge && /\\S/.test(line) && row != endRow) {\n            var nextLine = cm.getLine(row + 1);\n            if (nextLine && /\\S/.test(nextLine)) {\n                var trimmedLine = line.replace(/\\s+$/, \"\");\n                var trimmedNextLine = nextLine.replace(/^\\s+/, \"\");\n                var mergedLine = trimmedLine + \" \" + trimmedNextLine;\n                var space = findSpace(mergedLine, max, 5);\n                if (space && space.start > trimmedLine.length || mergedLine.length < max) {\n                    cm.replaceRange(\" \", new Pos(row, trimmedLine.length), new Pos(row + 1, nextLine.length - trimmedNextLine.length));\n                    row--;\n                    endRow--;\n                }\n                else if (trimmedLine.length < line.length) {\n                    cm.replaceRange(\"\", new Pos(row, trimmedLine.length), new Pos(row, line.length));\n                }\n            }\n        }\n        row++;\n    }\n    return row;\n    function findSpace(line, max, min) {\n        if (line.length < max)\n            return;\n        var before = line.slice(0, max);\n        var after = line.slice(max);\n        var spaceAfter = /^(?:(\\s+)|(\\S+)(\\s+))/.exec(after);\n        var spaceBefore = /(?:(\\s+)|(\\s+)(\\S+))$/.exec(before);\n        var start = 0;\n        var end = 0;\n        if (spaceBefore && !spaceBefore[2]) {\n            start = max - spaceBefore[1].length;\n            end = max;\n        }\n        if (spaceAfter && !spaceAfter[2]) {\n            if (!start)\n                start = max;\n            end = max + spaceAfter[1].length;\n        }\n        if (start) {\n            return {\n                start: start,\n                end: end\n            };\n        }\n        if (spaceBefore && spaceBefore[2] && spaceBefore.index > min) {\n            return {\n                start: spaceBefore.index,\n                end: spaceBefore.index + spaceBefore[2].length\n            };\n        }\n        if (spaceAfter && spaceAfter[2]) {\n            start = max + spaceAfter[2].length;\n            return {\n                start: start,\n                end: start + spaceAfter[3].length\n            };\n        }\n    }\n}\n\n// backwards compatibility for old versions not supporting getDrawSelectionConfig\nlet getDrawSelectionConfig = _codemirror_view__WEBPACK_IMPORTED_MODULE_1__.getDrawSelectionConfig || /*@__PURE__*/function () {\n    let defaultConfig = { cursorBlinkRate: 1200 };\n    return function () {\n        return defaultConfig;\n    };\n}();\nclass Piece {\n    constructor(left, top, height, fontFamily, fontSize, fontWeight, color, className, letter, partial) {\n        this.left = left;\n        this.top = top;\n        this.height = height;\n        this.fontFamily = fontFamily;\n        this.fontSize = fontSize;\n        this.fontWeight = fontWeight;\n        this.color = color;\n        this.className = className;\n        this.letter = letter;\n        this.partial = partial;\n    }\n    draw() {\n        let elt = document.createElement(\"div\");\n        elt.className = this.className;\n        this.adjust(elt);\n        return elt;\n    }\n    adjust(elt) {\n        elt.style.left = this.left + \"px\";\n        elt.style.top = this.top + \"px\";\n        elt.style.height = this.height + \"px\";\n        elt.style.lineHeight = this.height + \"px\";\n        elt.style.fontFamily = this.fontFamily;\n        elt.style.fontSize = this.fontSize;\n        elt.style.fontWeight = this.fontWeight;\n        elt.style.color = this.partial ? \"transparent\" : this.color;\n        elt.className = this.className;\n        elt.textContent = this.letter;\n    }\n    eq(p) {\n        return this.left == p.left && this.top == p.top && this.height == p.height &&\n            this.fontFamily == p.fontFamily && this.fontSize == p.fontSize &&\n            this.fontWeight == p.fontWeight && this.color == p.color &&\n            this.className == p.className &&\n            this.letter == p.letter;\n    }\n}\nclass BlockCursorPlugin {\n    constructor(view, cm) {\n        this.view = view;\n        this.rangePieces = [];\n        this.cursors = [];\n        this.cm = cm;\n        this.measureReq = { read: this.readPos.bind(this), write: this.drawSel.bind(this) };\n        this.cursorLayer = view.scrollDOM.appendChild(document.createElement(\"div\"));\n        this.cursorLayer.className = \"cm-cursorLayer cm-vimCursorLayer\";\n        this.cursorLayer.setAttribute(\"aria-hidden\", \"true\");\n        view.requestMeasure(this.measureReq);\n        this.setBlinkRate();\n    }\n    setBlinkRate() {\n        let config = getDrawSelectionConfig(this.cm.cm6.state);\n        let blinkRate = config.cursorBlinkRate;\n        this.cursorLayer.style.animationDuration = blinkRate + \"ms\";\n    }\n    update(update) {\n        if (update.selectionSet || update.geometryChanged || update.viewportChanged) {\n            this.view.requestMeasure(this.measureReq);\n            this.cursorLayer.style.animationName = this.cursorLayer.style.animationName == \"cm-blink\" ? \"cm-blink2\" : \"cm-blink\";\n        }\n        if (configChanged(update))\n            this.setBlinkRate();\n    }\n    scheduleRedraw() {\n        this.view.requestMeasure(this.measureReq);\n    }\n    readPos() {\n        let { state } = this.view;\n        let cursors = [];\n        for (let r of state.selection.ranges) {\n            let prim = r == state.selection.main;\n            let piece = measureCursor(this.cm, this.view, r, prim);\n            if (piece)\n                cursors.push(piece);\n        }\n        return { cursors };\n    }\n    drawSel({ cursors }) {\n        if (cursors.length != this.cursors.length || cursors.some((c, i) => !c.eq(this.cursors[i]))) {\n            let oldCursors = this.cursorLayer.children;\n            if (oldCursors.length !== cursors.length) {\n                this.cursorLayer.textContent = \"\";\n                for (const c of cursors)\n                    this.cursorLayer.appendChild(c.draw());\n            }\n            else {\n                cursors.forEach((c, idx) => c.adjust(oldCursors[idx]));\n            }\n            this.cursors = cursors;\n        }\n    }\n    destroy() {\n        this.cursorLayer.remove();\n    }\n}\nfunction configChanged(update) {\n    return getDrawSelectionConfig(update.startState) != getDrawSelectionConfig(update.state);\n}\nconst themeSpec = {\n    \".cm-vimMode .cm-line\": {\n        \"& ::selection\": { backgroundColor: \"transparent !important\" },\n        \"&::selection\": { backgroundColor: \"transparent !important\" },\n        caretColor: \"transparent !important\",\n    },\n    \".cm-fat-cursor\": {\n        position: \"absolute\",\n        background: \"#ff9696\",\n        border: \"none\",\n        whiteSpace: \"pre\",\n    },\n    \"&:not(.cm-focused) .cm-fat-cursor\": {\n        background: \"none\",\n        outline: \"solid 1px #ff9696\",\n        color: \"transparent !important\",\n    },\n};\nconst hideNativeSelection = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Prec.highest(/*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_1__.EditorView.theme(themeSpec));\nfunction getBase(view) {\n    let rect = view.scrollDOM.getBoundingClientRect();\n    let left = view.textDirection == _codemirror_view__WEBPACK_IMPORTED_MODULE_1__.Direction.LTR ? rect.left : rect.right - view.scrollDOM.clientWidth;\n    return { left: left - view.scrollDOM.scrollLeft * view.scaleX, top: rect.top - view.scrollDOM.scrollTop * view.scaleY };\n}\nfunction measureCursor(cm, view, cursor, primary) {\n    var _a, _b, _c, _d;\n    let head = cursor.head;\n    let fatCursor = false;\n    let hCoeff = 1;\n    let vim = cm.state.vim;\n    if (vim && (!vim.insertMode || cm.state.overwrite)) {\n        fatCursor = true;\n        if (vim.visualBlock && !primary)\n            return null;\n        if (cursor.anchor < cursor.head) {\n            let letter = head < view.state.doc.length && view.state.sliceDoc(head, head + 1);\n            if (letter != \"\\n\")\n                head--;\n        }\n        if (cm.state.overwrite)\n            hCoeff = 0.2;\n        else if (vim.status)\n            hCoeff = 0.5;\n    }\n    if (fatCursor) {\n        let letter = head < view.state.doc.length && view.state.sliceDoc(head, head + 1);\n        if (letter && (/[\\uDC00-\\uDFFF]/.test(letter) && head > 1)) {\n            // step back if cursor is on the second half of a surrogate pair\n            head--;\n            letter = view.state.sliceDoc(head, head + 1);\n        }\n        let pos = view.coordsAtPos(head, 1);\n        if (!pos)\n            return null;\n        let base = getBase(view);\n        let domAtPos = view.domAtPos(head);\n        let node = domAtPos ? domAtPos.node : view.contentDOM;\n        if (node instanceof Text && domAtPos.offset >= node.data.length) {\n            if ((_a = node.parentElement) === null || _a === void 0 ? void 0 : _a.nextSibling) {\n                node = (_b = node.parentElement) === null || _b === void 0 ? void 0 : _b.nextSibling;\n                domAtPos = { node: node, offset: 0 };\n            }\n        }\n        while (domAtPos && domAtPos.node instanceof HTMLElement) {\n            node = domAtPos.node;\n            domAtPos = { node: domAtPos.node.childNodes[domAtPos.offset], offset: 0 };\n        }\n        if (!(node instanceof HTMLElement)) {\n            if (!node.parentNode)\n                return null;\n            node = node.parentNode;\n        }\n        let style = getComputedStyle(node);\n        let left = pos.left;\n        // TODO remove coordsAtPos when all supported versions of codemirror have coordsForChar api\n        let charCoords = (_d = (_c = view).coordsForChar) === null || _d === void 0 ? void 0 : _d.call(_c, head);\n        if (charCoords) {\n            left = charCoords.left;\n        }\n        if (!letter || letter == \"\\n\" || letter == \"\\r\") {\n            letter = \"\\xa0\";\n        }\n        else if (letter == \"\\t\") {\n            letter = \"\\xa0\";\n            var nextPos = view.coordsAtPos(head + 1, -1);\n            if (nextPos) {\n                left = nextPos.left - (nextPos.left - pos.left) / parseInt(style.tabSize);\n            }\n        }\n        else if ((/[\\uD800-\\uDBFF]/.test(letter) && head < view.state.doc.length - 1)) {\n            // include the second half of a surrogate pair in cursor\n            letter += view.state.sliceDoc(head + 1, head + 2);\n        }\n        let h = (pos.bottom - pos.top);\n        return new Piece((left - base.left) / view.scaleX, (pos.top - base.top + h * (1 - hCoeff)) / view.scaleY, h * hCoeff / view.scaleY, style.fontFamily, style.fontSize, style.fontWeight, style.color, primary ? \"cm-fat-cursor cm-cursor-primary\" : \"cm-fat-cursor cm-cursor-secondary\", letter, hCoeff != 1);\n    }\n    else {\n        return null;\n    }\n}\n\nvar FIREFOX_LINUX = typeof navigator != \"undefined\"\n    && /*@__PURE__*//linux/i.test(navigator.platform)\n    && /*@__PURE__*// Gecko\\/\\d+/.exec(navigator.userAgent);\nconst Vim = /*@__PURE__*/initVim(CodeMirror);\nconst HighlightMargin = 250;\nconst vimStyle = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_1__.EditorView.baseTheme({\n    \".cm-vimMode .cm-cursorLayer:not(.cm-vimCursorLayer)\": {\n        display: \"none\",\n    },\n    \".cm-vim-panel\": {\n        padding: \"0px 10px\",\n        fontFamily: \"monospace\",\n        minHeight: \"1.3em\",\n        display: 'flex',\n    },\n    \".cm-vim-panel input\": {\n        border: \"none\",\n        outline: \"none\",\n        backgroundColor: \"inherit\",\n    },\n    \"&light .cm-searchMatch\": { backgroundColor: \"#ffff0054\" },\n    \"&dark .cm-searchMatch\": { backgroundColor: \"#00ffff8a\" },\n});\nconst vimPlugin = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_1__.ViewPlugin.fromClass(class {\n    constructor(view) {\n        this.status = \"\";\n        this.query = null;\n        this.decorations = _codemirror_view__WEBPACK_IMPORTED_MODULE_1__.Decoration.none;\n        this.waitForCopy = false;\n        this.lastKeydown = '';\n        this.useNextTextInput = false;\n        this.compositionText = '';\n        this.view = view;\n        const cm = (this.cm = new CodeMirror(view));\n        Vim.enterVimMode(this.cm);\n        this.view.cm = this.cm;\n        this.cm.state.vimPlugin = this;\n        this.blockCursor = new BlockCursorPlugin(view, cm);\n        this.updateClass();\n        this.cm.on(\"vim-command-done\", () => {\n            if (cm.state.vim)\n                cm.state.vim.status = \"\";\n            this.blockCursor.scheduleRedraw();\n            this.updateStatus();\n        });\n        this.cm.on(\"vim-mode-change\", (e) => {\n            if (!cm.state.vim)\n                return;\n            cm.state.vim.mode = e.mode;\n            if (e.subMode) {\n                cm.state.vim.mode += \" block\";\n            }\n            cm.state.vim.status = \"\";\n            this.blockCursor.scheduleRedraw();\n            this.updateClass();\n            this.updateStatus();\n        });\n        this.cm.on(\"dialog\", () => {\n            if (this.cm.state.statusbar) {\n                this.updateStatus();\n            }\n            else {\n                view.dispatch({\n                    effects: showVimPanel.of(!!this.cm.state.dialog),\n                });\n            }\n        });\n        this.dom = document.createElement(\"span\");\n        this.spacer = document.createElement(\"span\");\n        this.spacer.style.flex = \"1\";\n        this.statusButton = document.createElement(\"span\");\n        this.statusButton.onclick = (e) => {\n            Vim.handleKey(this.cm, \"<Esc>\", \"user\");\n            this.cm.focus();\n        };\n        this.statusButton.style.cssText = \"cursor: pointer\";\n    }\n    update(update) {\n        var _a;\n        if ((update.viewportChanged || update.docChanged) && this.query) {\n            this.highlight(this.query);\n        }\n        if (update.docChanged) {\n            this.cm.onChange(update);\n        }\n        if (update.selectionSet) {\n            this.cm.onSelectionChange();\n        }\n        if (update.viewportChanged) ;\n        if (this.cm.curOp && !this.cm.curOp.isVimOp) {\n            this.cm.onBeforeEndOperation();\n        }\n        if (update.transactions) {\n            for (let tr of update.transactions)\n                for (let effect of tr.effects) {\n                    if (effect.is(_codemirror_search__WEBPACK_IMPORTED_MODULE_4__.setSearchQuery)) {\n                        let forVim = (_a = effect.value) === null || _a === void 0 ? void 0 : _a.forVim;\n                        if (!forVim) {\n                            this.highlight(null);\n                        }\n                        else {\n                            let query = effect.value.create();\n                            this.highlight(query);\n                        }\n                    }\n                }\n        }\n        this.blockCursor.update(update);\n    }\n    updateClass() {\n        const state = this.cm.state;\n        if (!state.vim || (state.vim.insertMode && !state.overwrite))\n            this.view.scrollDOM.classList.remove(\"cm-vimMode\");\n        else\n            this.view.scrollDOM.classList.add(\"cm-vimMode\");\n    }\n    updateStatus() {\n        let dom = this.cm.state.statusbar;\n        let vim = this.cm.state.vim;\n        if (!dom || !vim)\n            return;\n        let dialog = this.cm.state.dialog;\n        if (dialog) {\n            if (dialog.parentElement != dom) {\n                dom.textContent = \"\";\n                dom.appendChild(dialog);\n            }\n        }\n        else {\n            dom.textContent = \"\";\n            var status = (vim.mode || \"normal\").toUpperCase();\n            if (vim.insertModeReturn)\n                status += \"(C-O)\";\n            this.statusButton.textContent = `--${status}--`;\n            dom.appendChild(this.statusButton);\n            dom.appendChild(this.spacer);\n        }\n        this.dom.textContent = vim.status;\n        dom.appendChild(this.dom);\n    }\n    destroy() {\n        Vim.leaveVimMode(this.cm);\n        this.updateClass();\n        this.blockCursor.destroy();\n        delete this.view.cm;\n    }\n    highlight(query) {\n        this.query = query;\n        if (!query)\n            return (this.decorations = _codemirror_view__WEBPACK_IMPORTED_MODULE_1__.Decoration.none);\n        let { view } = this;\n        let builder = new _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.RangeSetBuilder();\n        for (let i = 0, ranges = view.visibleRanges, l = ranges.length; i < l; i++) {\n            let { from, to } = ranges[i];\n            while (i < l - 1 && to > ranges[i + 1].from - 2 * HighlightMargin)\n                to = ranges[++i].to;\n            query.highlight(view.state, from, to, (from, to) => {\n                builder.add(from, to, matchMark);\n            });\n        }\n        return (this.decorations = builder.finish());\n    }\n    handleKey(e, view) {\n        const cm = this.cm;\n        let vim = cm.state.vim;\n        if (!vim)\n            return;\n        const key = Vim.vimKeyFromEvent(e, vim);\n        CodeMirror.signal(this.cm, 'inputEvent', { type: \"handleKey\", key });\n        if (!key)\n            return;\n        // clear search highlight\n        if (key == \"<Esc>\" &&\n            !vim.insertMode &&\n            !vim.visualMode &&\n            this.query /* && !cm.inMultiSelectMode*/) {\n            const searchState = vim.searchState_;\n            if (searchState) {\n                cm.removeOverlay(searchState.getOverlay());\n                searchState.setOverlay(null);\n            }\n        }\n        let isCopy = key === \"<C-c>\" && !CodeMirror.isMac;\n        if (isCopy && cm.somethingSelected()) {\n            this.waitForCopy = true;\n            return true;\n        }\n        vim.status = (vim.status || \"\") + key;\n        let result = Vim.multiSelectHandleKey(cm, key, \"user\");\n        vim = Vim.maybeInitVimState_(cm); // the object can change if there is an exception in handleKey\n        // insert mode\n        if (!result && vim.insertMode && cm.state.overwrite) {\n            if (e.key && e.key.length == 1 && !/\\n/.test(e.key)) {\n                result = true;\n                cm.overWriteSelection(e.key);\n            }\n            else if (e.key == \"Backspace\") {\n                result = true;\n                CodeMirror.commands.cursorCharLeft(cm);\n            }\n        }\n        if (result) {\n            CodeMirror.signal(this.cm, 'vim-keypress', key);\n            e.preventDefault();\n            e.stopPropagation();\n            this.blockCursor.scheduleRedraw();\n        }\n        this.updateStatus();\n        return !!result;\n    }\n}, {\n    eventHandlers: {\n        copy: function (e, view) {\n            if (!this.waitForCopy)\n                return;\n            this.waitForCopy = false;\n            Promise.resolve().then(() => {\n                var cm = this.cm;\n                var vim = cm.state.vim;\n                if (!vim)\n                    return;\n                if (vim.insertMode) {\n                    cm.setSelection(cm.getCursor(), cm.getCursor());\n                }\n                else {\n                    cm.operation(() => {\n                        if (cm.curOp)\n                            cm.curOp.isVimOp = true;\n                        Vim.handleKey(cm, '<Esc>', 'user');\n                    });\n                }\n            });\n        },\n        compositionstart: function (e, view) {\n            this.useNextTextInput = true;\n            CodeMirror.signal(this.cm, 'inputEvent', e);\n        },\n        compositionupdate: function (e, view) {\n            CodeMirror.signal(this.cm, 'inputEvent', e);\n        },\n        compositionend: function (e, view) {\n            CodeMirror.signal(this.cm, 'inputEvent', e);\n        },\n        keypress: function (e, view) {\n            CodeMirror.signal(this.cm, 'inputEvent', e);\n            if (this.lastKeydown == \"Dead\")\n                this.handleKey(e, view);\n        },\n        keydown: function (e, view) {\n            CodeMirror.signal(this.cm, 'inputEvent', e);\n            this.lastKeydown = e.key;\n            if (this.lastKeydown == \"Unidentified\"\n                || this.lastKeydown == \"Process\"\n                || this.lastKeydown == \"Dead\") {\n                this.useNextTextInput = true;\n            }\n            else {\n                this.useNextTextInput = false;\n                this.handleKey(e, view);\n            }\n        },\n    },\n    provide: () => {\n        return [\n            _codemirror_view__WEBPACK_IMPORTED_MODULE_1__.EditorView.inputHandler.of((view, from, to, text) => {\n                var _a, _b;\n                var cm = getCM(view);\n                if (!cm)\n                    return false;\n                var vim = (_a = cm.state) === null || _a === void 0 ? void 0 : _a.vim;\n                var vimPlugin = cm.state.vimPlugin;\n                if (vim && !vim.insertMode && !((_b = cm.curOp) === null || _b === void 0 ? void 0 : _b.isVimOp)) {\n                    if (text === \"\\0\\0\") {\n                        return true;\n                    }\n                    CodeMirror.signal(cm, 'inputEvent', {\n                        type: \"text\",\n                        text,\n                        from,\n                        to,\n                    });\n                    if (text.length == 1 && vimPlugin.useNextTextInput) {\n                        if (vim.expectLiteralNext && view.composing) {\n                            vimPlugin.compositionText = text;\n                            return false;\n                        }\n                        if (vimPlugin.compositionText) {\n                            var toRemove = vimPlugin.compositionText;\n                            vimPlugin.compositionText = '';\n                            var head = view.state.selection.main.head;\n                            var textInDoc = view.state.sliceDoc(head - toRemove.length, head);\n                            if (toRemove === textInDoc) {\n                                var pos = cm.getCursor();\n                                cm.replaceRange('', cm.posFromIndex(head - toRemove.length), pos);\n                            }\n                        }\n                        vimPlugin.handleKey({\n                            key: text,\n                            preventDefault: () => { },\n                            stopPropagation: () => { }\n                        });\n                        forceEndComposition(view);\n                        return true;\n                    }\n                }\n                return false;\n            })\n        ];\n    },\n    decorations: (v) => v.decorations,\n});\n/**\n * removes contenteditable element and adds it back to end\n * IME composition in normal mode\n * this method works on all browsers except for Firefox on Linux\n * where we need to reset textContent of editor\n * (which doesn't work on other browsers)\n */\nfunction forceEndComposition(view) {\n    var parent = view.scrollDOM.parentElement;\n    if (!parent)\n        return;\n    if (FIREFOX_LINUX) {\n        view.contentDOM.textContent = \"\\0\\0\";\n        view.contentDOM.dispatchEvent(new CustomEvent(\"compositionend\"));\n        return;\n    }\n    var sibling = view.scrollDOM.nextSibling;\n    var selection = window.getSelection();\n    var savedSelection = selection && {\n        anchorNode: selection.anchorNode,\n        anchorOffset: selection.anchorOffset,\n        focusNode: selection.focusNode,\n        focusOffset: selection.focusOffset\n    };\n    view.scrollDOM.remove();\n    parent.insertBefore(view.scrollDOM, sibling);\n    try {\n        if (savedSelection && selection) {\n            selection.setPosition(savedSelection.anchorNode, savedSelection.anchorOffset);\n            if (savedSelection.focusNode) {\n                selection.extend(savedSelection.focusNode, savedSelection.focusOffset);\n            }\n        }\n    }\n    catch (e) {\n        console.error(e);\n    }\n    view.focus();\n    view.contentDOM.dispatchEvent(new CustomEvent(\"compositionend\"));\n}\nconst matchMark = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_1__.Decoration.mark({ class: \"cm-searchMatch\" });\nconst showVimPanel = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.StateEffect.define();\nconst vimPanelState = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.StateField.define({\n    create: () => false,\n    update(value, tr) {\n        for (let e of tr.effects)\n            if (e.is(showVimPanel))\n                value = e.value;\n        return value;\n    },\n    provide: (f) => {\n        return _codemirror_view__WEBPACK_IMPORTED_MODULE_1__.showPanel.from(f, (on) => (on ? createVimPanel : null));\n    },\n});\nfunction createVimPanel(view) {\n    let dom = document.createElement(\"div\");\n    dom.className = \"cm-vim-panel\";\n    let cm = view.cm;\n    if (cm.state.dialog) {\n        dom.appendChild(cm.state.dialog);\n    }\n    return { top: false, dom };\n}\nfunction statusPanel(view) {\n    let dom = document.createElement(\"div\");\n    dom.className = \"cm-vim-panel\";\n    let cm = view.cm;\n    cm.state.statusbar = dom;\n    cm.state.vimPlugin.updateStatus();\n    return { dom };\n}\nfunction vim(options = {}) {\n    return [\n        vimStyle,\n        vimPlugin,\n        hideNativeSelection,\n        options.status ? _codemirror_view__WEBPACK_IMPORTED_MODULE_1__.showPanel.of(statusPanel) : vimPanelState,\n    ];\n}\nfunction getCM(view) {\n    return view.cm || null;\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./node_modules/@replit/codemirror-vim/dist/index.js\n"));

/***/ })

});